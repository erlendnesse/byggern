
node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ef8  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081ef8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  20000434  0008232c  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004e4  000823dc  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008e8  000827e0  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000900c  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001869  00000000  00000000  000294c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000013a4  00000000  00000000  0002ad2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000280  00000000  00000000  0002c0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  0002c34f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013714  00000000  00000000  0002c517  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005b92  00000000  00000000  0003fc2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005550a  00000000  00000000  000457bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000095c  00000000  00000000  0009acc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 08 00 20 1d 04 08 00 19 04 08 00 19 04 08 00     ... ............
   80010:	19 04 08 00 19 04 08 00 19 04 08 00 00 00 00 00     ................
	...
   8002c:	19 04 08 00 19 04 08 00 00 00 00 00 19 04 08 00     ................
   8003c:	d1 03 08 00 19 04 08 00 19 04 08 00 19 04 08 00     ................
   8004c:	19 04 08 00 19 04 08 00 19 04 08 00 19 04 08 00     ................
   8005c:	19 04 08 00 2d 0e 08 00 19 04 08 00 00 00 00 00     ....-...........
   8006c:	19 04 08 00 19 04 08 00 19 04 08 00 19 04 08 00     ................
	...
   80084:	19 04 08 00 19 04 08 00 19 04 08 00 19 04 08 00     ................
   80094:	19 04 08 00 19 04 08 00 19 04 08 00 19 04 08 00     ................
   800a4:	00 00 00 00 19 04 08 00 19 04 08 00 19 04 08 00     ................
   800b4:	19 04 08 00 19 04 08 00 19 04 08 00 19 04 08 00     ................
   800c4:	19 04 08 00 19 04 08 00 19 04 08 00 19 04 08 00     ................
   800d4:	19 04 08 00 19 04 08 00 19 04 08 00 19 04 08 00     ................
   800e4:	19 04 08 00 19 04 08 00 d9 02 08 00 19 04 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081ef8 	.word	0x00081ef8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081ef8 	.word	0x00081ef8
   80154:	20000438 	.word	0x20000438
   80158:	00081ef8 	.word	0x00081ef8
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d8:	b538      	push	{r3, r4, r5, lr}
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802da:	4b1c      	ldr	r3, [pc, #112]	; (8034c <CAN0_Handler+0x74>)
   802dc:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802de:	f014 0f06 	tst.w	r4, #6
   802e2:	d027      	beq.n	80334 <CAN0_Handler+0x5c>
	{
		//CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e4:	f014 0f02 	tst.w	r4, #2
   802e8:	d10e      	bne.n	80308 <CAN0_Handler+0x30>
			if(message.id == 1) { //id of joystick msg
				pwm_set_duty_cycle(message.data[0]);
				//motor_run(message.data[0]);
			}
		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802ea:	f014 0f04 	tst.w	r4, #4
   802ee:	d017      	beq.n	80320 <CAN0_Handler+0x48>
		
		{
			can_receive(&message, 2);
   802f0:	4d17      	ldr	r5, [pc, #92]	; (80350 <CAN0_Handler+0x78>)
   802f2:	2102      	movs	r1, #2
   802f4:	4628      	mov	r0, r5
   802f6:	4b17      	ldr	r3, [pc, #92]	; (80354 <CAN0_Handler+0x7c>)
   802f8:	4798      	blx	r3
			if(message.id == 1) { //id of joystick msg
   802fa:	882b      	ldrh	r3, [r5, #0]
   802fc:	2b01      	cmp	r3, #1
   802fe:	d112      	bne.n	80326 <CAN0_Handler+0x4e>
				pwm_set_duty_cycle(message.data[0]);
   80300:	78e8      	ldrb	r0, [r5, #3]
   80302:	4b15      	ldr	r3, [pc, #84]	; (80358 <CAN0_Handler+0x80>)
   80304:	4798      	blx	r3
   80306:	e00e      	b.n	80326 <CAN0_Handler+0x4e>
			can_receive(&message, 1);
   80308:	4d11      	ldr	r5, [pc, #68]	; (80350 <CAN0_Handler+0x78>)
   8030a:	2101      	movs	r1, #1
   8030c:	4628      	mov	r0, r5
   8030e:	4b11      	ldr	r3, [pc, #68]	; (80354 <CAN0_Handler+0x7c>)
   80310:	4798      	blx	r3
			if(message.id == 1) { //id of joystick msg
   80312:	882b      	ldrh	r3, [r5, #0]
   80314:	2b01      	cmp	r3, #1
   80316:	d106      	bne.n	80326 <CAN0_Handler+0x4e>
				pwm_set_duty_cycle(message.data[0]);
   80318:	78e8      	ldrb	r0, [r5, #3]
   8031a:	4b0f      	ldr	r3, [pc, #60]	; (80358 <CAN0_Handler+0x80>)
   8031c:	4798      	blx	r3
   8031e:	e002      	b.n	80326 <CAN0_Handler+0x4e>
				//motor_run(message.data[0]);
			}
		}
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80320:	480e      	ldr	r0, [pc, #56]	; (8035c <CAN0_Handler+0x84>)
   80322:	4b0f      	ldr	r3, [pc, #60]	; (80360 <CAN0_Handler+0x88>)
   80324:	4798      	blx	r3
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80326:	2300      	movs	r3, #0
   80328:	e000      	b.n	8032c <CAN0_Handler+0x54>
   8032a:	3301      	adds	r3, #1
   8032c:	4a08      	ldr	r2, [pc, #32]	; (80350 <CAN0_Handler+0x78>)
   8032e:	7892      	ldrb	r2, [r2, #2]
   80330:	4293      	cmp	r3, r2
   80332:	dbfa      	blt.n	8032a <CAN0_Handler+0x52>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80334:	f014 0f01 	tst.w	r4, #1
   80338:	d002      	beq.n	80340 <CAN0_Handler+0x68>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8033a:	2201      	movs	r2, #1
   8033c:	4b03      	ldr	r3, [pc, #12]	; (8034c <CAN0_Handler+0x74>)
   8033e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80340:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80344:	4b07      	ldr	r3, [pc, #28]	; (80364 <CAN0_Handler+0x8c>)
   80346:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8034a:	bd38      	pop	{r3, r4, r5, pc}
   8034c:	400b4000 	.word	0x400b4000
   80350:	20000454 	.word	0x20000454
   80354:	00080255 	.word	0x00080255
   80358:	00080cd9 	.word	0x00080cd9
   8035c:	00081e0c 	.word	0x00081e0c
   80360:	00080c3d 	.word	0x00080c3d
   80364:	e000e100 	.word	0xe000e100

00080368 <dac_init>:
 */ 
#include "dac.h"
#include "sam.h"
#include <stdio.h>

int dac_init() {
   80368:	b508      	push	{r3, lr}
	//free running mode, enable channel an write data in DACC conversion data register
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1 | DACC_MR_STARTUP_16; //Set startup time if not working?
   8036a:	4b12      	ldr	r3, [pc, #72]	; (803b4 <dac_init+0x4c>)
   8036c:	685a      	ldr	r2, [r3, #4]
   8036e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80372:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80376:	605a      	str	r2, [r3, #4]
	
	//enable channel 1 
	DACC->DACC_CHER |= DACC_CHER_CH1;
   80378:	691a      	ldr	r2, [r3, #16]
   8037a:	f042 0202 	orr.w	r2, r2, #2
   8037e:	611a      	str	r2, [r3, #16]
	
	//enable clock for DAC
	PMC->PMC_PCR |= (1<<28) | (38);
   80380:	490d      	ldr	r1, [pc, #52]	; (803b8 <dac_init+0x50>)
   80382:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
   80386:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   8038a:	f042 0226 	orr.w	r2, r2, #38	; 0x26
   8038e:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
	
	// enable power adc 
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   80392:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   80396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8039a:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	
	if (!(DACC->DACC_CHSR)) {
   8039e:	699b      	ldr	r3, [r3, #24]
   803a0:	b10b      	cbz	r3, 803a6 <dac_init+0x3e>
		printf("ERROR: Channel not enabled");
		return -1;
	}
	return 0;
   803a2:	2000      	movs	r0, #0
}
   803a4:	bd08      	pop	{r3, pc}
		printf("ERROR: Channel not enabled");
   803a6:	4805      	ldr	r0, [pc, #20]	; (803bc <dac_init+0x54>)
   803a8:	4b05      	ldr	r3, [pc, #20]	; (803c0 <dac_init+0x58>)
   803aa:	4798      	blx	r3
		return -1;
   803ac:	f04f 30ff 	mov.w	r0, #4294967295
   803b0:	bd08      	pop	{r3, pc}
   803b2:	bf00      	nop
   803b4:	400c8000 	.word	0x400c8000
   803b8:	400e0600 	.word	0x400e0600
   803bc:	00081e38 	.word	0x00081e38
   803c0:	00080c3d 	.word	0x00080c3d

000803c4 <dac_write>:

void dac_write(uint16_t value) {
	DACC->DACC_CDR = value;
   803c4:	4b01      	ldr	r3, [pc, #4]	; (803cc <dac_write+0x8>)
   803c6:	6218      	str	r0, [r3, #32]
   803c8:	4770      	bx	lr
   803ca:	bf00      	nop
   803cc:	400c8000 	.word	0x400c8000

000803d0 <SysTick_Handler>:
#include "sam.h"


volatile float milliseconds = 0;

void SysTick_Handler(void) {
   803d0:	b510      	push	{r4, lr}
	milliseconds++;
   803d2:	4c04      	ldr	r4, [pc, #16]	; (803e4 <SysTick_Handler+0x14>)
   803d4:	6820      	ldr	r0, [r4, #0]
   803d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   803da:	4b03      	ldr	r3, [pc, #12]	; (803e8 <SysTick_Handler+0x18>)
   803dc:	4798      	blx	r3
   803de:	6020      	str	r0, [r4, #0]
   803e0:	bd10      	pop	{r4, pc}
   803e2:	bf00      	nop
   803e4:	20000450 	.word	0x20000450
   803e8:	00081675 	.word	0x00081675

000803ec <delay_ms>:
}

void delay_ms(float ms) {
   803ec:	b538      	push	{r3, r4, r5, lr}
   803ee:	4605      	mov	r5, r0
	float start_time = milliseconds;
   803f0:	4b06      	ldr	r3, [pc, #24]	; (8040c <delay_ms+0x20>)
   803f2:	681c      	ldr	r4, [r3, #0]
	while ((milliseconds - start_time) < ms) {
   803f4:	4b05      	ldr	r3, [pc, #20]	; (8040c <delay_ms+0x20>)
   803f6:	6818      	ldr	r0, [r3, #0]
   803f8:	4621      	mov	r1, r4
   803fa:	4b05      	ldr	r3, [pc, #20]	; (80410 <delay_ms+0x24>)
   803fc:	4798      	blx	r3
   803fe:	4629      	mov	r1, r5
   80400:	4b04      	ldr	r3, [pc, #16]	; (80414 <delay_ms+0x28>)
   80402:	4798      	blx	r3
   80404:	2800      	cmp	r0, #0
   80406:	d1f5      	bne.n	803f4 <delay_ms+0x8>
		// You can add other tasks or code here; it won't block the delay
	}
   80408:	bd38      	pop	{r3, r4, r5, pc}
   8040a:	bf00      	nop
   8040c:	20000450 	.word	0x20000450
   80410:	00081671 	.word	0x00081671
   80414:	00081bc1 	.word	0x00081bc1

00080418 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80418:	e7fe      	b.n	80418 <Dummy_Handler>
	...

0008041c <Reset_Handler>:
{
   8041c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8041e:	4b11      	ldr	r3, [pc, #68]	; (80464 <Reset_Handler+0x48>)
   80420:	4a11      	ldr	r2, [pc, #68]	; (80468 <Reset_Handler+0x4c>)
   80422:	429a      	cmp	r2, r3
   80424:	d009      	beq.n	8043a <Reset_Handler+0x1e>
   80426:	4b0f      	ldr	r3, [pc, #60]	; (80464 <Reset_Handler+0x48>)
   80428:	4a0f      	ldr	r2, [pc, #60]	; (80468 <Reset_Handler+0x4c>)
   8042a:	e003      	b.n	80434 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   8042c:	6811      	ldr	r1, [r2, #0]
   8042e:	6019      	str	r1, [r3, #0]
   80430:	3304      	adds	r3, #4
   80432:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80434:	490d      	ldr	r1, [pc, #52]	; (8046c <Reset_Handler+0x50>)
   80436:	428b      	cmp	r3, r1
   80438:	d3f8      	bcc.n	8042c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   8043a:	4b0d      	ldr	r3, [pc, #52]	; (80470 <Reset_Handler+0x54>)
   8043c:	e002      	b.n	80444 <Reset_Handler+0x28>
                *pDest++ = 0;
   8043e:	2200      	movs	r2, #0
   80440:	601a      	str	r2, [r3, #0]
   80442:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80444:	4a0b      	ldr	r2, [pc, #44]	; (80474 <Reset_Handler+0x58>)
   80446:	4293      	cmp	r3, r2
   80448:	d3f9      	bcc.n	8043e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8044a:	4b0b      	ldr	r3, [pc, #44]	; (80478 <Reset_Handler+0x5c>)
   8044c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80450:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80454:	4a09      	ldr	r2, [pc, #36]	; (8047c <Reset_Handler+0x60>)
   80456:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80458:	4b09      	ldr	r3, [pc, #36]	; (80480 <Reset_Handler+0x64>)
   8045a:	4798      	blx	r3
        main();
   8045c:	4b09      	ldr	r3, [pc, #36]	; (80484 <Reset_Handler+0x68>)
   8045e:	4798      	blx	r3
   80460:	e7fe      	b.n	80460 <Reset_Handler+0x44>
   80462:	bf00      	nop
   80464:	20000000 	.word	0x20000000
   80468:	00081ef8 	.word	0x00081ef8
   8046c:	20000434 	.word	0x20000434
   80470:	20000434 	.word	0x20000434
   80474:	200004e4 	.word	0x200004e4
   80478:	00080000 	.word	0x00080000
   8047c:	e000ed00 	.word	0xe000ed00
   80480:	00081c9d 	.word	0x00081c9d
   80484:	0008056d 	.word	0x0008056d

00080488 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80488:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8048c:	4a20      	ldr	r2, [pc, #128]	; (80510 <SystemInit+0x88>)
   8048e:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80490:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80494:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80496:	4b1f      	ldr	r3, [pc, #124]	; (80514 <SystemInit+0x8c>)
   80498:	6a1b      	ldr	r3, [r3, #32]
   8049a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8049e:	d107      	bne.n	804b0 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   804a0:	4a1d      	ldr	r2, [pc, #116]	; (80518 <SystemInit+0x90>)
   804a2:	4b1c      	ldr	r3, [pc, #112]	; (80514 <SystemInit+0x8c>)
   804a4:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   804a6:	4b1b      	ldr	r3, [pc, #108]	; (80514 <SystemInit+0x8c>)
   804a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804aa:	f013 0f01 	tst.w	r3, #1
   804ae:	d0fa      	beq.n	804a6 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   804b0:	4a1a      	ldr	r2, [pc, #104]	; (8051c <SystemInit+0x94>)
   804b2:	4b18      	ldr	r3, [pc, #96]	; (80514 <SystemInit+0x8c>)
   804b4:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   804b6:	4b17      	ldr	r3, [pc, #92]	; (80514 <SystemInit+0x8c>)
   804b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   804be:	d0fa      	beq.n	804b6 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   804c0:	4a14      	ldr	r2, [pc, #80]	; (80514 <SystemInit+0x8c>)
   804c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   804c4:	f023 0303 	bic.w	r3, r3, #3
   804c8:	f043 0301 	orr.w	r3, r3, #1
   804cc:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   804ce:	4b11      	ldr	r3, [pc, #68]	; (80514 <SystemInit+0x8c>)
   804d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d2:	f013 0f08 	tst.w	r3, #8
   804d6:	d0fa      	beq.n	804ce <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   804d8:	4a11      	ldr	r2, [pc, #68]	; (80520 <SystemInit+0x98>)
   804da:	4b0e      	ldr	r3, [pc, #56]	; (80514 <SystemInit+0x8c>)
   804dc:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   804de:	4b0d      	ldr	r3, [pc, #52]	; (80514 <SystemInit+0x8c>)
   804e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804e2:	f013 0f02 	tst.w	r3, #2
   804e6:	d0fa      	beq.n	804de <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   804e8:	2211      	movs	r2, #17
   804ea:	4b0a      	ldr	r3, [pc, #40]	; (80514 <SystemInit+0x8c>)
   804ec:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   804ee:	4b09      	ldr	r3, [pc, #36]	; (80514 <SystemInit+0x8c>)
   804f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f2:	f013 0f08 	tst.w	r3, #8
   804f6:	d0fa      	beq.n	804ee <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   804f8:	2212      	movs	r2, #18
   804fa:	4b06      	ldr	r3, [pc, #24]	; (80514 <SystemInit+0x8c>)
   804fc:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   804fe:	4b05      	ldr	r3, [pc, #20]	; (80514 <SystemInit+0x8c>)
   80500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80502:	f013 0f08 	tst.w	r3, #8
   80506:	d0fa      	beq.n	804fe <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80508:	4a06      	ldr	r2, [pc, #24]	; (80524 <SystemInit+0x9c>)
   8050a:	4b07      	ldr	r3, [pc, #28]	; (80528 <SystemInit+0xa0>)
   8050c:	601a      	str	r2, [r3, #0]
   8050e:	4770      	bx	lr
   80510:	400e0a00 	.word	0x400e0a00
   80514:	400e0600 	.word	0x400e0600
   80518:	00370809 	.word	0x00370809
   8051c:	01370809 	.word	0x01370809
   80520:	200d3f01 	.word	0x200d3f01
   80524:	0501bd00 	.word	0x0501bd00
   80528:	20000000 	.word	0x20000000

0008052c <toggle_led>:
   return 0;
}


void toggle_led(uint8_t count) {
	if (count % 2) {
   8052c:	f010 0f01 	tst.w	r0, #1
   80530:	d108      	bne.n	80544 <toggle_led+0x18>
		PIOA->PIO_CODR = PIO_PA19 ;
		PIOA->PIO_SODR |=  PIO_PA20;
	}
	else
	{
		PIOA->PIO_CODR = PIO_PA20;
   80532:	4b09      	ldr	r3, [pc, #36]	; (80558 <toggle_led+0x2c>)
   80534:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   80538:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_SODR |=  PIO_PA19;
   8053a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8053c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80540:	631a      	str	r2, [r3, #48]	; 0x30
   80542:	4770      	bx	lr
		PIOA->PIO_CODR = PIO_PA19 ;
   80544:	4b04      	ldr	r3, [pc, #16]	; (80558 <toggle_led+0x2c>)
   80546:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8054a:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_SODR |=  PIO_PA20;
   8054c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8054e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80552:	631a      	str	r2, [r3, #48]	; 0x30
   80554:	4770      	bx	lr
   80556:	bf00      	nop
   80558:	400e0e00 	.word	0x400e0e00

0008055c <led_init>:
	}
}

void led_init() {
	PIOA->PIO_OER |=  PIO_PA19 | PIO_PA20;
   8055c:	4a02      	ldr	r2, [pc, #8]	; (80568 <led_init+0xc>)
   8055e:	6913      	ldr	r3, [r2, #16]
   80560:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
   80564:	6113      	str	r3, [r2, #16]
   80566:	4770      	bx	lr
   80568:	400e0e00 	.word	0x400e0e00

0008056c <main>:
{
   8056c:	b510      	push	{r4, lr}
   8056e:	b082      	sub	sp, #8
    SystemInit();
   80570:	4b2a      	ldr	r3, [pc, #168]	; (8061c <main+0xb0>)
   80572:	4798      	blx	r3
	SysTick_Config(SystemCoreClock / 1000); //for the delay
   80574:	4b2a      	ldr	r3, [pc, #168]	; (80620 <main+0xb4>)
   80576:	681b      	ldr	r3, [r3, #0]
   80578:	4a2a      	ldr	r2, [pc, #168]	; (80624 <main+0xb8>)
   8057a:	fba2 2303 	umull	r2, r3, r2, r3
   8057e:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
   80580:	3b01      	subs	r3, #1
   80582:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   80586:	d209      	bcs.n	8059c <main+0x30>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
   80588:	4a27      	ldr	r2, [pc, #156]	; (80628 <main+0xbc>)
   8058a:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8058c:	21f0      	movs	r1, #240	; 0xf0
   8058e:	4b27      	ldr	r3, [pc, #156]	; (8062c <main+0xc0>)
   80590:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
   80594:	2300      	movs	r3, #0
   80596:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   80598:	2307      	movs	r3, #7
   8059a:	6013      	str	r3, [r2, #0]
	configure_uart();
   8059c:	4b24      	ldr	r3, [pc, #144]	; (80630 <main+0xc4>)
   8059e:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15; //watchdog timer off
   805a0:	4a24      	ldr	r2, [pc, #144]	; (80634 <main+0xc8>)
   805a2:	6853      	ldr	r3, [r2, #4]
   805a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   805a8:	6053      	str	r3, [r2, #4]
	led_init();
   805aa:	4b23      	ldr	r3, [pc, #140]	; (80638 <main+0xcc>)
   805ac:	4798      	blx	r3
	PWM_init();
   805ae:	4b23      	ldr	r3, [pc, #140]	; (8063c <main+0xd0>)
   805b0:	4798      	blx	r3
	motor_init();
   805b2:	4b23      	ldr	r3, [pc, #140]	; (80640 <main+0xd4>)
   805b4:	4798      	blx	r3
	solenoid_init();
   805b6:	4b23      	ldr	r3, [pc, #140]	; (80644 <main+0xd8>)
   805b8:	4798      	blx	r3
	can_init_def_tx_rx_mb(can_br);
   805ba:	4823      	ldr	r0, [pc, #140]	; (80648 <main+0xdc>)
   805bc:	4b23      	ldr	r3, [pc, #140]	; (8064c <main+0xe0>)
   805be:	4798      	blx	r3
	pid_init(0.1,0.01,1.0,time_step,1404);
   805c0:	f240 537c 	movw	r3, #1404	; 0x57c
   805c4:	9300      	str	r3, [sp, #0]
   805c6:	4b22      	ldr	r3, [pc, #136]	; (80650 <main+0xe4>)
   805c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   805cc:	4921      	ldr	r1, [pc, #132]	; (80654 <main+0xe8>)
   805ce:	4822      	ldr	r0, [pc, #136]	; (80658 <main+0xec>)
   805d0:	4c22      	ldr	r4, [pc, #136]	; (8065c <main+0xf0>)
   805d2:	47a0      	blx	r4
	uint8_t i = 0;
   805d4:	2400      	movs	r4, #0
   805d6:	e001      	b.n	805dc <main+0x70>
		i++;
   805d8:	3401      	adds	r4, #1
   805da:	b2e4      	uxtb	r4, r4
		toggle_led(i);
   805dc:	4620      	mov	r0, r4
   805de:	4b20      	ldr	r3, [pc, #128]	; (80660 <main+0xf4>)
   805e0:	4798      	blx	r3
		delay_ms(10);
   805e2:	4820      	ldr	r0, [pc, #128]	; (80664 <main+0xf8>)
   805e4:	4b20      	ldr	r3, [pc, #128]	; (80668 <main+0xfc>)
   805e6:	4798      	blx	r3
		motor_run(message.data[2]);
   805e8:	4b20      	ldr	r3, [pc, #128]	; (8066c <main+0x100>)
   805ea:	7958      	ldrb	r0, [r3, #5]
   805ec:	4b20      	ldr	r3, [pc, #128]	; (80670 <main+0x104>)
   805ee:	4798      	blx	r3
		if (!(i % 3)){
   805f0:	4b20      	ldr	r3, [pc, #128]	; (80674 <main+0x108>)
   805f2:	fba3 2304 	umull	r2, r3, r3, r4
   805f6:	085b      	lsrs	r3, r3, #1
   805f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   805fc:	1ae3      	subs	r3, r4, r3
   805fe:	f013 0fff 	tst.w	r3, #255	; 0xff
   80602:	d1e9      	bne.n	805d8 <main+0x6c>
			if(!message.data[3]) {
   80604:	4b19      	ldr	r3, [pc, #100]	; (8066c <main+0x100>)
   80606:	799b      	ldrb	r3, [r3, #6]
   80608:	2b00      	cmp	r3, #0
   8060a:	d1e5      	bne.n	805d8 <main+0x6c>
				printf("button_pressed\r");
   8060c:	481a      	ldr	r0, [pc, #104]	; (80678 <main+0x10c>)
   8060e:	4b1b      	ldr	r3, [pc, #108]	; (8067c <main+0x110>)
   80610:	4798      	blx	r3
				solenoid_shoot(1);
   80612:	2001      	movs	r0, #1
   80614:	4b1a      	ldr	r3, [pc, #104]	; (80680 <main+0x114>)
   80616:	4798      	blx	r3
   80618:	e7de      	b.n	805d8 <main+0x6c>
   8061a:	bf00      	nop
   8061c:	00080489 	.word	0x00080489
   80620:	20000000 	.word	0x20000000
   80624:	10624dd3 	.word	0x10624dd3
   80628:	e000e010 	.word	0xe000e010
   8062c:	e000ed00 	.word	0xe000ed00
   80630:	00080da1 	.word	0x00080da1
   80634:	400e1a50 	.word	0x400e1a50
   80638:	0008055d 	.word	0x0008055d
   8063c:	00080c61 	.word	0x00080c61
   80640:	00080685 	.word	0x00080685
   80644:	00080d55 	.word	0x00080d55
   80648:	00143156 	.word	0x00143156
   8064c:	00080245 	.word	0x00080245
   80650:	3ca3d70a 	.word	0x3ca3d70a
   80654:	3c23d70a 	.word	0x3c23d70a
   80658:	3dcccccd 	.word	0x3dcccccd
   8065c:	000808ed 	.word	0x000808ed
   80660:	0008052d 	.word	0x0008052d
   80664:	41200000 	.word	0x41200000
   80668:	000803ed 	.word	0x000803ed
   8066c:	20000454 	.word	0x20000454
   80670:	000807dd 	.word	0x000807dd
   80674:	aaaaaaab 	.word	0xaaaaaaab
   80678:	00081e54 	.word	0x00081e54
   8067c:	00080c3d 	.word	0x00080c3d
   80680:	00080d75 	.word	0x00080d75

00080684 <motor_init>:
#include <stdio.h>
#include "delay.h"
#include "pid.h"
#include "can_interrupt.h"

int motor_init() {
   80684:	b510      	push	{r4, lr}
	int err = 0;
	err = dac_init();
   80686:	4b15      	ldr	r3, [pc, #84]	; (806dc <motor_init+0x58>)
   80688:	4798      	blx	r3
	if (err) {
   8068a:	bb00      	cbnz	r0, 806ce <motor_init+0x4a>
   8068c:	4604      	mov	r4, r0
	}
	
	//PMC->PMC_PCR = ID_PIOC;
	//PMC->PMC_PCR = ID_PIOD;
	
	PIOC->PIO_PER |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC7 | PIO_PC8;
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <motor_init+0x5c>)
   80690:	681a      	ldr	r2, [r3, #0]
   80692:	f442 72df 	orr.w	r2, r2, #446	; 0x1be
   80696:	601a      	str	r2, [r3, #0]
	PIOC->PIO_ODR |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC7 | PIO_PC8;
   80698:	695a      	ldr	r2, [r3, #20]
   8069a:	f442 72df 	orr.w	r2, r2, #446	; 0x1be
   8069e:	615a      	str	r2, [r3, #20]
	
 	PIOD->PIO_PER |= PIO_PD0 | PIO_PD1 | PIO_PD2 | PIO_PD9 | PIO_PD10;
   806a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   806a4:	6819      	ldr	r1, [r3, #0]
   806a6:	f240 6007 	movw	r0, #1543	; 0x607
   806aa:	4301      	orrs	r1, r0
   806ac:	6019      	str	r1, [r3, #0]
	PIOD->PIO_OER |= PIO_PD0 | PIO_PD1 | PIO_PD2 | PIO_PD9 | PIO_PD10;
   806ae:	691a      	ldr	r2, [r3, #16]
   806b0:	4302      	orrs	r2, r0
   806b2:	611a      	str	r2, [r3, #16]
	PIOD->PIO_SODR = PIO_PD1;
   806b4:	2202      	movs	r2, #2
   806b6:	631a      	str	r2, [r3, #48]	; 0x30
	
    PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_PIOC << PMC_PCR_PID_Pos);
   806b8:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
   806bc:	4a09      	ldr	r2, [pc, #36]	; (806e4 <motor_init+0x60>)
   806be:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    PMC->PMC_PCER0 |= 1 << (ID_PIOC);	
   806c2:	691a      	ldr	r2, [r3, #16]
   806c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   806c8:	611a      	str	r2, [r3, #16]
	
	return 0;
}
   806ca:	4620      	mov	r0, r4
   806cc:	bd10      	pop	{r4, pc}
		printf("ERROR: motor init failed");
   806ce:	4806      	ldr	r0, [pc, #24]	; (806e8 <motor_init+0x64>)
   806d0:	4b06      	ldr	r3, [pc, #24]	; (806ec <motor_init+0x68>)
   806d2:	4798      	blx	r3
		return -1;
   806d4:	f04f 34ff 	mov.w	r4, #4294967295
   806d8:	e7f7      	b.n	806ca <motor_init+0x46>
   806da:	bf00      	nop
   806dc:	00080369 	.word	0x00080369
   806e0:	400e1200 	.word	0x400e1200
   806e4:	1000000d 	.word	0x1000000d
   806e8:	00081e64 	.word	0x00081e64
   806ec:	00080c3d 	.word	0x00080c3d

000806f0 <motor_set_speed>:

void motor_set_speed(uint16_t speed) {
   806f0:	b508      	push	{r3, lr}
	//printf("motor speed set to %d \r", speed);
	dac_write(speed);
   806f2:	4b01      	ldr	r3, [pc, #4]	; (806f8 <motor_set_speed+0x8>)
   806f4:	4798      	blx	r3
   806f6:	bd08      	pop	{r3, pc}
   806f8:	000803c5 	.word	0x000803c5

000806fc <motor_set_dir>:
}

void motor_set_dir(uint8_t direction) {
	if (direction == 1) {
   806fc:	2801      	cmp	r0, #1
   806fe:	d005      	beq.n	8070c <motor_set_dir+0x10>
		PIOD->PIO_SODR = PIO_PD10; //Right
	}
	else if (direction == 0) {
   80700:	b918      	cbnz	r0, 8070a <motor_set_dir+0xe>
		PIOD->PIO_CODR = PIO_PD10; //Left
   80702:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80706:	4b04      	ldr	r3, [pc, #16]	; (80718 <motor_set_dir+0x1c>)
   80708:	635a      	str	r2, [r3, #52]	; 0x34
   8070a:	4770      	bx	lr
		PIOD->PIO_SODR = PIO_PD10; //Right
   8070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80710:	4b01      	ldr	r3, [pc, #4]	; (80718 <motor_set_dir+0x1c>)
   80712:	631a      	str	r2, [r3, #48]	; 0x30
   80714:	4770      	bx	lr
   80716:	bf00      	nop
   80718:	400e1400 	.word	0x400e1400

0008071c <motor_enable>:
	}
}

void motor_enable(uint8_t bool) {
	if (bool == 1) {
   8071c:	2801      	cmp	r0, #1
   8071e:	d005      	beq.n	8072c <motor_enable+0x10>
		PIOD->PIO_SODR = PIO_PD9; //Enable motor
	}
	else if (bool == 0) {
   80720:	b918      	cbnz	r0, 8072a <motor_enable+0xe>
		PIOD->PIO_CODR = PIO_PD9; //Disable motor
   80722:	f44f 7200 	mov.w	r2, #512	; 0x200
   80726:	4b04      	ldr	r3, [pc, #16]	; (80738 <motor_enable+0x1c>)
   80728:	635a      	str	r2, [r3, #52]	; 0x34
   8072a:	4770      	bx	lr
		PIOD->PIO_SODR = PIO_PD9; //Enable motor
   8072c:	f44f 7200 	mov.w	r2, #512	; 0x200
   80730:	4b01      	ldr	r3, [pc, #4]	; (80738 <motor_enable+0x1c>)
   80732:	631a      	str	r2, [r3, #48]	; 0x30
   80734:	4770      	bx	lr
   80736:	bf00      	nop
   80738:	400e1400 	.word	0x400e1400

0008073c <motor_read_encoder>:
	}
}

int motor_read_encoder() {
   8073c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PIOD->PIO_CODR = PIO_PD0; // STOP recording encoder values
   80740:	4c14      	ldr	r4, [pc, #80]	; (80794 <motor_read_encoder+0x58>)
   80742:	2601      	movs	r6, #1
   80744:	6366      	str	r6, [r4, #52]	; 0x34
	PIOD->PIO_CODR = PIO_PD2; // SELECT HIGH BYTE
   80746:	f04f 0a04 	mov.w	sl, #4
   8074a:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	delay_ms(0.02);
   8074e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8079c <motor_read_encoder+0x60>
   80752:	4648      	mov	r0, r9
   80754:	f8df 8048 	ldr.w	r8, [pc, #72]	; 807a0 <motor_read_encoder+0x64>
   80758:	47c0      	blx	r8
	//PIOD->PIO_CODR = PIO_PD1; //reset encoder value
	//*data = (PIOC->PIO_PDSR & 0b11111111) << 8;
	uint8_t msb = (PIOC->PIO_PDSR & (0xFF << 1)) >> 1;
   8075a:	4f0f      	ldr	r7, [pc, #60]	; (80798 <motor_read_encoder+0x5c>)
   8075c:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
   8075e:	40f5      	lsrs	r5, r6
	//printf("ENCODER VALUE HIGH: %d \r", (int)PIOC->PIO_PDSR);
	PIOD->PIO_SODR = PIO_PD2; // SELECT LOW BYTE
   80760:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
	delay_ms(0.02);
   80764:	4648      	mov	r0, r9
   80766:	47c0      	blx	r8
	uint8_t lsb = (PIOC->PIO_PDSR & (0xFF << 1)) >> 1;
   80768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8076a:	f3c3 0347 	ubfx	r3, r3, #1, #8
	//*data = *data + (PIOC->PIO_PDSR & 0b11111111);
	//printf(("ENCODER VALUE LOW: %d \r",PIOC->PIO_PDSR & 0b11111111)); 
	PIOD->PIO_CODR = PIO_PD1; //reset encoder value
   8076e:	2202      	movs	r2, #2
   80770:	6362      	str	r2, [r4, #52]	; 0x34
	PIOD->PIO_SODR = PIO_PD1; 
   80772:	6322      	str	r2, [r4, #48]	; 0x30
	
	PIOD->PIO_SODR = PIO_PD0;
   80774:	6326      	str	r6, [r4, #48]	; 0x30
    uint16_t encoder_data = ((msb << 8) | lsb);
   80776:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   8077a:	b21b      	sxth	r3, r3
   8077c:	b298      	uxth	r0, r3
    if (encoder_data & (1 << 15)) {
   8077e:	2b00      	cmp	r3, #0
   80780:	db02      	blt.n	80788 <motor_read_encoder+0x4c>
		 return ((uint16_t) (~encoder_data) + 1);
    }
	else {
	//printf("ENCODER VALUE: %d\r", (-encoder_data));
	}
	return -encoder_data;
   80782:	4240      	negs	r0, r0
    
}
   80784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 return ((uint16_t) (~encoder_data) + 1);
   80788:	43c0      	mvns	r0, r0
   8078a:	b280      	uxth	r0, r0
   8078c:	4430      	add	r0, r6
   8078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80792:	bf00      	nop
   80794:	400e1400 	.word	0x400e1400
   80798:	400e1200 	.word	0x400e1200
   8079c:	3ca3d70a 	.word	0x3ca3d70a
   807a0:	000803ed 	.word	0x000803ed

000807a4 <scale_slider_output>:

	
	float scale_slider_output(float value) {
   807a4:	b510      	push	{r4, lr}
   807a6:	4604      	mov	r4, r0
		if (value < 9) {
   807a8:	4906      	ldr	r1, [pc, #24]	; (807c4 <scale_slider_output+0x20>)
   807aa:	4b07      	ldr	r3, [pc, #28]	; (807c8 <scale_slider_output+0x24>)
   807ac:	4798      	blx	r3
   807ae:	b100      	cbz	r0, 807b2 <scale_slider_output+0xe>
			value = 0;
   807b0:	2400      	movs	r4, #0
		}
		float scaled_val = value * 1404/255;
   807b2:	4906      	ldr	r1, [pc, #24]	; (807cc <scale_slider_output+0x28>)
   807b4:	4620      	mov	r0, r4
   807b6:	4b06      	ldr	r3, [pc, #24]	; (807d0 <scale_slider_output+0x2c>)
   807b8:	4798      	blx	r3
   807ba:	4906      	ldr	r1, [pc, #24]	; (807d4 <scale_slider_output+0x30>)
   807bc:	4b06      	ldr	r3, [pc, #24]	; (807d8 <scale_slider_output+0x34>)
   807be:	4798      	blx	r3
		return scaled_val;
	}
   807c0:	bd10      	pop	{r4, pc}
   807c2:	bf00      	nop
   807c4:	41100000 	.word	0x41100000
   807c8:	00081bc1 	.word	0x00081bc1
   807cc:	44af8000 	.word	0x44af8000
   807d0:	00081885 	.word	0x00081885
   807d4:	437f0000 	.word	0x437f0000
   807d8:	000819ed 	.word	0x000819ed

000807dc <motor_run>:
	
	
	//eencoder - 0-1404
	//joystick - 0-256 midtpunkt 160

void motor_run(uint8_t dir) {
   807dc:	b570      	push	{r4, r5, r6, lr}
   807de:	4604      	mov	r4, r0
	
	uint8_t direction = 0;
	uint8_t enable = 0;
	
	
	int encoder_output = motor_read_encoder();
   807e0:	4b31      	ldr	r3, [pc, #196]	; (808a8 <motor_run+0xcc>)
   807e2:	4798      	blx	r3
   807e4:	4606      	mov	r6, r0
	int slider_pos =  (int)scale_slider_output(dir);
   807e6:	4620      	mov	r0, r4
   807e8:	4b30      	ldr	r3, [pc, #192]	; (808ac <motor_run+0xd0>)
   807ea:	4798      	blx	r3
   807ec:	4b30      	ldr	r3, [pc, #192]	; (808b0 <motor_run+0xd4>)
   807ee:	4798      	blx	r3
   807f0:	4b30      	ldr	r3, [pc, #192]	; (808b4 <motor_run+0xd8>)
   807f2:	4798      	blx	r3
	

	
	float control_input = pid_regulator(slider_pos, encoder_output);
   807f4:	4c30      	ldr	r4, [pc, #192]	; (808b8 <motor_run+0xdc>)
   807f6:	47a0      	blx	r4
   807f8:	4605      	mov	r5, r0
   807fa:	4630      	mov	r0, r6
   807fc:	47a0      	blx	r4
   807fe:	4601      	mov	r1, r0
   80800:	4628      	mov	r0, r5
   80802:	4b2e      	ldr	r3, [pc, #184]	; (808bc <motor_run+0xe0>)
   80804:	4798      	blx	r3
   80806:	4604      	mov	r4, r0
	
	
	
	if(control_input > 10) {
   80808:	492d      	ldr	r1, [pc, #180]	; (808c0 <motor_run+0xe4>)
   8080a:	4b2e      	ldr	r3, [pc, #184]	; (808c4 <motor_run+0xe8>)
   8080c:	4798      	blx	r3
   8080e:	2800      	cmp	r0, #0
   80810:	d128      	bne.n	80864 <motor_run+0x88>
			control_input = MOTOR_SPEED_5V;
		}
		motor_set_speed(control_input);	
		printf("C_inp: %d\t", (int)control_input);
	}
	else if(control_input < -10){
   80812:	492d      	ldr	r1, [pc, #180]	; (808c8 <motor_run+0xec>)
   80814:	4620      	mov	r0, r4
   80816:	4b2d      	ldr	r3, [pc, #180]	; (808cc <motor_run+0xf0>)
   80818:	4798      	blx	r3
   8081a:	2800      	cmp	r0, #0
   8081c:	d042      	beq.n	808a4 <motor_run+0xc8>
		control_input = (int)-control_input*48;
   8081e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
   80822:	4b24      	ldr	r3, [pc, #144]	; (808b4 <motor_run+0xd8>)
   80824:	4798      	blx	r3
   80826:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   8082a:	0118      	lsls	r0, r3, #4
   8082c:	4b22      	ldr	r3, [pc, #136]	; (808b8 <motor_run+0xdc>)
   8082e:	4798      	blx	r3
   80830:	4604      	mov	r4, r0
		if (control_input > MOTOR_SPEED_5V) {
   80832:	4927      	ldr	r1, [pc, #156]	; (808d0 <motor_run+0xf4>)
   80834:	4b23      	ldr	r3, [pc, #140]	; (808c4 <motor_run+0xe8>)
   80836:	4798      	blx	r3
   80838:	b100      	cbz	r0, 8083c <motor_run+0x60>
			control_input = MOTOR_SPEED_5V;
   8083a:	4c25      	ldr	r4, [pc, #148]	; (808d0 <motor_run+0xf4>)
		}
		enable = 1;
		direction = 0;
		printf("C_inp: %d\t", (int)control_input);
   8083c:	4620      	mov	r0, r4
   8083e:	4b1d      	ldr	r3, [pc, #116]	; (808b4 <motor_run+0xd8>)
   80840:	4798      	blx	r3
   80842:	4601      	mov	r1, r0
   80844:	4823      	ldr	r0, [pc, #140]	; (808d4 <motor_run+0xf8>)
   80846:	4b24      	ldr	r3, [pc, #144]	; (808d8 <motor_run+0xfc>)
   80848:	4798      	blx	r3
		motor_set_dir(direction);
   8084a:	2000      	movs	r0, #0
   8084c:	4b23      	ldr	r3, [pc, #140]	; (808dc <motor_run+0x100>)
   8084e:	4798      	blx	r3
		motor_set_speed(control_input);
   80850:	4620      	mov	r0, r4
   80852:	4b23      	ldr	r3, [pc, #140]	; (808e0 <motor_run+0x104>)
   80854:	4798      	blx	r3
   80856:	b280      	uxth	r0, r0
   80858:	4b22      	ldr	r3, [pc, #136]	; (808e4 <motor_run+0x108>)
   8085a:	4798      	blx	r3
		enable = 1;
   8085c:	2001      	movs	r0, #1
	else {
		enable = 0;
	}
	
	
	motor_enable(enable);
   8085e:	4b22      	ldr	r3, [pc, #136]	; (808e8 <motor_run+0x10c>)
   80860:	4798      	blx	r3
   80862:	bd70      	pop	{r4, r5, r6, pc}
		motor_set_dir(direction);
   80864:	2001      	movs	r0, #1
   80866:	4b1d      	ldr	r3, [pc, #116]	; (808dc <motor_run+0x100>)
   80868:	4798      	blx	r3
		control_input = (int)control_input*48;
   8086a:	4620      	mov	r0, r4
   8086c:	4b11      	ldr	r3, [pc, #68]	; (808b4 <motor_run+0xd8>)
   8086e:	4798      	blx	r3
   80870:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   80874:	0118      	lsls	r0, r3, #4
   80876:	4b10      	ldr	r3, [pc, #64]	; (808b8 <motor_run+0xdc>)
   80878:	4798      	blx	r3
   8087a:	4604      	mov	r4, r0
		if (control_input > MOTOR_SPEED_5V) {
   8087c:	4914      	ldr	r1, [pc, #80]	; (808d0 <motor_run+0xf4>)
   8087e:	4b11      	ldr	r3, [pc, #68]	; (808c4 <motor_run+0xe8>)
   80880:	4798      	blx	r3
   80882:	b100      	cbz	r0, 80886 <motor_run+0xaa>
			control_input = MOTOR_SPEED_5V;
   80884:	4c12      	ldr	r4, [pc, #72]	; (808d0 <motor_run+0xf4>)
		motor_set_speed(control_input);	
   80886:	4620      	mov	r0, r4
   80888:	4b15      	ldr	r3, [pc, #84]	; (808e0 <motor_run+0x104>)
   8088a:	4798      	blx	r3
   8088c:	b280      	uxth	r0, r0
   8088e:	4b15      	ldr	r3, [pc, #84]	; (808e4 <motor_run+0x108>)
   80890:	4798      	blx	r3
		printf("C_inp: %d\t", (int)control_input);
   80892:	4620      	mov	r0, r4
   80894:	4b07      	ldr	r3, [pc, #28]	; (808b4 <motor_run+0xd8>)
   80896:	4798      	blx	r3
   80898:	4601      	mov	r1, r0
   8089a:	480e      	ldr	r0, [pc, #56]	; (808d4 <motor_run+0xf8>)
   8089c:	4b0e      	ldr	r3, [pc, #56]	; (808d8 <motor_run+0xfc>)
   8089e:	4798      	blx	r3
		enable = 1;
   808a0:	2001      	movs	r0, #1
   808a2:	e7dc      	b.n	8085e <motor_run+0x82>
		enable = 0;
   808a4:	2000      	movs	r0, #0
   808a6:	e7da      	b.n	8085e <motor_run+0x82>
   808a8:	0008073d 	.word	0x0008073d
   808ac:	000817d5 	.word	0x000817d5
   808b0:	000807a5 	.word	0x000807a5
   808b4:	00081c11 	.word	0x00081c11
   808b8:	000817dd 	.word	0x000817dd
   808bc:	00080911 	.word	0x00080911
   808c0:	41200000 	.word	0x41200000
   808c4:	00081bfd 	.word	0x00081bfd
   808c8:	c1200000 	.word	0xc1200000
   808cc:	00081bc1 	.word	0x00081bc1
   808d0:	477fff00 	.word	0x477fff00
   808d4:	00081e80 	.word	0x00081e80
   808d8:	00080c3d 	.word	0x00080c3d
   808dc:	000806fd 	.word	0x000806fd
   808e0:	00081c5d 	.word	0x00081c5d
   808e4:	000806f1 	.word	0x000806f1
   808e8:	0008071d 	.word	0x0008071d

000808ec <pid_init>:

struct PID_struct_type PID;


//Init PID
void pid_init(float k_p, float k_i, float k_d, float time_step, int max_control_input) {
   808ec:	b510      	push	{r4, lr}
    PID.K_p = k_p;
   808ee:	4c06      	ldr	r4, [pc, #24]	; (80908 <pid_init+0x1c>)
   808f0:	6020      	str	r0, [r4, #0]
    PID.K_i = k_i;
   808f2:	6061      	str	r1, [r4, #4]
    PID.K_d = k_d;
   808f4:	60a2      	str	r2, [r4, #8]
    PID.Time_step = time_step;
   808f6:	60e3      	str	r3, [r4, #12]
    PID.Max_control_input = max_control_input;
   808f8:	9802      	ldr	r0, [sp, #8]
   808fa:	4b04      	ldr	r3, [pc, #16]	; (8090c <pid_init+0x20>)
   808fc:	4798      	blx	r3
   808fe:	6120      	str	r0, [r4, #16]
    PID.error_sum = 0;
   80900:	2300      	movs	r3, #0
   80902:	6163      	str	r3, [r4, #20]
    PID.previous_error = 0;
   80904:	61a3      	str	r3, [r4, #24]
   80906:	bd10      	pop	{r4, pc}
   80908:	20000460 	.word	0x20000460
   8090c:	000817dd 	.word	0x000817dd

00080910 <pid_regulator>:
}

//Regulator
float pid_regulator(float reference, float current_value) {
   80910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80914:	4681      	mov	r9, r0
   80916:	468a      	mov	sl, r1
	
    float error  = reference - current_value;
   80918:	4b1a      	ldr	r3, [pc, #104]	; (80984 <pid_regulator+0x74>)
   8091a:	4798      	blx	r3
   8091c:	4605      	mov	r5, r0
    PID.error_sum += error;
   8091e:	4c1a      	ldr	r4, [pc, #104]	; (80988 <pid_regulator+0x78>)
   80920:	4e1a      	ldr	r6, [pc, #104]	; (8098c <pid_regulator+0x7c>)
   80922:	6961      	ldr	r1, [r4, #20]
   80924:	47b0      	blx	r6
   80926:	4680      	mov	r8, r0
   80928:	6160      	str	r0, [r4, #20]

    float p_gain = PID.K_p * error;
   8092a:	4f19      	ldr	r7, [pc, #100]	; (80990 <pid_regulator+0x80>)
   8092c:	6821      	ldr	r1, [r4, #0]
   8092e:	4628      	mov	r0, r5
   80930:	47b8      	blx	r7
   80932:	4683      	mov	fp, r0
    float i_gain = PID.K_i * PID.error_sum;
   80934:	6861      	ldr	r1, [r4, #4]
   80936:	4640      	mov	r0, r8
   80938:	47b8      	blx	r7
   8093a:	4607      	mov	r7, r0
    //float d_gain = PID.K_d * (error - PID.previous_error)/PID.Time_step;
	
	printf("Error: %d\r", (int)error);
   8093c:	4628      	mov	r0, r5
   8093e:	4b15      	ldr	r3, [pc, #84]	; (80994 <pid_regulator+0x84>)
   80940:	4798      	blx	r3
   80942:	4601      	mov	r1, r0
   80944:	4814      	ldr	r0, [pc, #80]	; (80998 <pid_regulator+0x88>)
   80946:	4b15      	ldr	r3, [pc, #84]	; (8099c <pid_regulator+0x8c>)
   80948:	4798      	blx	r3
	//printf("PID_error_sum: %d\r", (int)PID.error_sum);

    //updating previous error
    PID.previous_error = error;
   8094a:	61a5      	str	r5, [r4, #24]

    float control_input = p_gain + i_gain; // + d_gain;
   8094c:	4639      	mov	r1, r7
   8094e:	4658      	mov	r0, fp
   80950:	47b0      	blx	r6
   80952:	4605      	mov	r5, r0

    //enabling saturation so the controller doesn't go crazy
    if (control_input > PID.Max_control_input) 
   80954:	6924      	ldr	r4, [r4, #16]
   80956:	4621      	mov	r1, r4
   80958:	4b11      	ldr	r3, [pc, #68]	; (809a0 <pid_regulator+0x90>)
   8095a:	4798      	blx	r3
   8095c:	b938      	cbnz	r0, 8096e <pid_regulator+0x5e>
    {
        control_input = PID.Max_control_input;
    }
    else if (control_input < (-PID.Max_control_input)) 
   8095e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   80962:	460c      	mov	r4, r1
   80964:	4628      	mov	r0, r5
   80966:	4b0f      	ldr	r3, [pc, #60]	; (809a4 <pid_regulator+0x94>)
   80968:	4798      	blx	r3
   8096a:	b900      	cbnz	r0, 8096e <pid_regulator+0x5e>
    float control_input = p_gain + i_gain; // + d_gain;
   8096c:	462c      	mov	r4, r5
    }
	
	
	
	
	if (reference == current_value) {
   8096e:	4651      	mov	r1, sl
   80970:	4648      	mov	r0, r9
   80972:	4b0d      	ldr	r3, [pc, #52]	; (809a8 <pid_regulator+0x98>)
   80974:	4798      	blx	r3
   80976:	b110      	cbz	r0, 8097e <pid_regulator+0x6e>
		PID.error_sum = 0;
   80978:	2200      	movs	r2, #0
   8097a:	4b03      	ldr	r3, [pc, #12]	; (80988 <pid_regulator+0x78>)
   8097c:	615a      	str	r2, [r3, #20]
	
	
	
	
    return control_input;
   8097e:	4620      	mov	r0, r4
   80980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80984:	00081671 	.word	0x00081671
   80988:	20000460 	.word	0x20000460
   8098c:	00081675 	.word	0x00081675
   80990:	00081885 	.word	0x00081885
   80994:	00081c11 	.word	0x00081c11
   80998:	00081e8c 	.word	0x00081e8c
   8099c:	00080c3d 	.word	0x00080c3d
   809a0:	00081bfd 	.word	0x00081bfd
   809a4:	00081bc1 	.word	0x00081bc1
   809a8:	00081bad 	.word	0x00081bad

000809ac <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   809ac:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   809ae:	b2c8      	uxtb	r0, r1
   809b0:	4b01      	ldr	r3, [pc, #4]	; (809b8 <printchar+0xc>)
   809b2:	4798      	blx	r3
   809b4:	bd08      	pop	{r3, pc}
   809b6:	bf00      	nop
   809b8:	00080e09 	.word	0x00080e09

000809bc <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   809bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   809c0:	4607      	mov	r7, r0
   809c2:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   809c4:	1e15      	subs	r5, r2, #0
   809c6:	dd02      	ble.n	809ce <prints+0x12>
   809c8:	460a      	mov	r2, r1
   809ca:	2100      	movs	r1, #0
   809cc:	e004      	b.n	809d8 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   809ce:	f04f 0820 	mov.w	r8, #32
   809d2:	e00e      	b.n	809f2 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   809d4:	3101      	adds	r1, #1
   809d6:	3201      	adds	r2, #1
   809d8:	7810      	ldrb	r0, [r2, #0]
   809da:	2800      	cmp	r0, #0
   809dc:	d1fa      	bne.n	809d4 <prints+0x18>
		if (len >= width) width = 0;
   809de:	42a9      	cmp	r1, r5
   809e0:	da01      	bge.n	809e6 <prints+0x2a>
		else width -= len;
   809e2:	1a6d      	subs	r5, r5, r1
   809e4:	e000      	b.n	809e8 <prints+0x2c>
		if (len >= width) width = 0;
   809e6:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   809e8:	f013 0f02 	tst.w	r3, #2
   809ec:	d106      	bne.n	809fc <prints+0x40>
	register int pc = 0, padchar = ' ';
   809ee:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   809f2:	f013 0401 	ands.w	r4, r3, #1
   809f6:	d00a      	beq.n	80a0e <prints+0x52>
	register int pc = 0, padchar = ' ';
   809f8:	2400      	movs	r4, #0
   809fa:	e010      	b.n	80a1e <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   809fc:	f04f 0830 	mov.w	r8, #48	; 0x30
   80a00:	e7f7      	b.n	809f2 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   80a02:	4641      	mov	r1, r8
   80a04:	4638      	mov	r0, r7
   80a06:	4b0d      	ldr	r3, [pc, #52]	; (80a3c <prints+0x80>)
   80a08:	4798      	blx	r3
			++pc;
   80a0a:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80a0c:	3d01      	subs	r5, #1
   80a0e:	2d00      	cmp	r5, #0
   80a10:	dcf7      	bgt.n	80a02 <prints+0x46>
   80a12:	e004      	b.n	80a1e <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   80a14:	4638      	mov	r0, r7
   80a16:	4b09      	ldr	r3, [pc, #36]	; (80a3c <prints+0x80>)
   80a18:	4798      	blx	r3
		++pc;
   80a1a:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80a1c:	3601      	adds	r6, #1
   80a1e:	7831      	ldrb	r1, [r6, #0]
   80a20:	2900      	cmp	r1, #0
   80a22:	d1f7      	bne.n	80a14 <prints+0x58>
   80a24:	e005      	b.n	80a32 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   80a26:	4641      	mov	r1, r8
   80a28:	4638      	mov	r0, r7
   80a2a:	4b04      	ldr	r3, [pc, #16]	; (80a3c <prints+0x80>)
   80a2c:	4798      	blx	r3
		++pc;
   80a2e:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80a30:	3d01      	subs	r5, #1
   80a32:	2d00      	cmp	r5, #0
   80a34:	dcf7      	bgt.n	80a26 <prints+0x6a>
	}

	return pc;
}
   80a36:	4620      	mov	r0, r4
   80a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80a3c:	000809ad 	.word	0x000809ad

00080a40 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a42:	b085      	sub	sp, #20
   80a44:	4607      	mov	r7, r0
   80a46:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80a48:	b151      	cbz	r1, 80a60 <printi+0x20>
   80a4a:	461e      	mov	r6, r3
   80a4c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80a4e:	b113      	cbz	r3, 80a56 <printi+0x16>
   80a50:	2a0a      	cmp	r2, #10
   80a52:	d012      	beq.n	80a7a <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80a54:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80a56:	ad04      	add	r5, sp, #16
   80a58:	2300      	movs	r3, #0
   80a5a:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80a5e:	e018      	b.n	80a92 <printi+0x52>
		print_buf[0] = '0';
   80a60:	2330      	movs	r3, #48	; 0x30
   80a62:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80a66:	2300      	movs	r3, #0
   80a68:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a70:	a901      	add	r1, sp, #4
   80a72:	4638      	mov	r0, r7
   80a74:	4c1b      	ldr	r4, [pc, #108]	; (80ae4 <printi+0xa4>)
   80a76:	47a0      	blx	r4
   80a78:	e029      	b.n	80ace <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80a7a:	2900      	cmp	r1, #0
   80a7c:	db01      	blt.n	80a82 <printi+0x42>
	register int t, neg = 0, pc = 0;
   80a7e:	2600      	movs	r6, #0
   80a80:	e7e9      	b.n	80a56 <printi+0x16>
		u = -i;
   80a82:	424c      	negs	r4, r1
		neg = 1;
   80a84:	2601      	movs	r6, #1
   80a86:	e7e6      	b.n	80a56 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80a88:	3330      	adds	r3, #48	; 0x30
   80a8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80a8e:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80a92:	b14c      	cbz	r4, 80aa8 <printi+0x68>
		t = u % b;
   80a94:	fbb4 f3f2 	udiv	r3, r4, r2
   80a98:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80a9c:	2b09      	cmp	r3, #9
   80a9e:	ddf3      	ble.n	80a88 <printi+0x48>
			t += letbase - '0' - 10;
   80aa0:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80aa4:	440b      	add	r3, r1
   80aa6:	e7ef      	b.n	80a88 <printi+0x48>
	}

	if (neg) {
   80aa8:	b156      	cbz	r6, 80ac0 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80aac:	b11b      	cbz	r3, 80ab6 <printi+0x76>
   80aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80ab0:	f013 0f02 	tst.w	r3, #2
   80ab4:	d10d      	bne.n	80ad2 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80ab6:	232d      	movs	r3, #45	; 0x2d
   80ab8:	f805 3c01 	strb.w	r3, [r5, #-1]
   80abc:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80abe:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80ac4:	4629      	mov	r1, r5
   80ac6:	4638      	mov	r0, r7
   80ac8:	4c06      	ldr	r4, [pc, #24]	; (80ae4 <printi+0xa4>)
   80aca:	47a0      	blx	r4
   80acc:	4430      	add	r0, r6
}
   80ace:	b005      	add	sp, #20
   80ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80ad2:	212d      	movs	r1, #45	; 0x2d
   80ad4:	4638      	mov	r0, r7
   80ad6:	4b04      	ldr	r3, [pc, #16]	; (80ae8 <printi+0xa8>)
   80ad8:	4798      	blx	r3
			--width;
   80ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80adc:	3b01      	subs	r3, #1
   80ade:	930a      	str	r3, [sp, #40]	; 0x28
   80ae0:	e7ee      	b.n	80ac0 <printi+0x80>
   80ae2:	bf00      	nop
   80ae4:	000809bd 	.word	0x000809bd
   80ae8:	000809ad 	.word	0x000809ad

00080aec <print>:

static int print( char **out, const char *format, va_list args )
{
   80aec:	b5f0      	push	{r4, r5, r6, r7, lr}
   80aee:	b089      	sub	sp, #36	; 0x24
   80af0:	4606      	mov	r6, r0
   80af2:	460c      	mov	r4, r1
   80af4:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80af6:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80af8:	e081      	b.n	80bfe <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80afa:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80afc:	2301      	movs	r3, #1
   80afe:	e08b      	b.n	80c18 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80b00:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   80b02:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80b06:	7822      	ldrb	r2, [r4, #0]
   80b08:	2a30      	cmp	r2, #48	; 0x30
   80b0a:	d0f9      	beq.n	80b00 <print+0x14>
   80b0c:	2200      	movs	r2, #0
   80b0e:	e006      	b.n	80b1e <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80b10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80b14:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80b16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80b1a:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80b1c:	3401      	adds	r4, #1
   80b1e:	7821      	ldrb	r1, [r4, #0]
   80b20:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80b24:	b2c0      	uxtb	r0, r0
   80b26:	2809      	cmp	r0, #9
   80b28:	d9f2      	bls.n	80b10 <print+0x24>
			}
			if( *format == 's' ) {
   80b2a:	2973      	cmp	r1, #115	; 0x73
   80b2c:	d018      	beq.n	80b60 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80b2e:	2964      	cmp	r1, #100	; 0x64
   80b30:	d022      	beq.n	80b78 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80b32:	2978      	cmp	r1, #120	; 0x78
   80b34:	d02f      	beq.n	80b96 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80b36:	2958      	cmp	r1, #88	; 0x58
   80b38:	d03c      	beq.n	80bb4 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80b3a:	2975      	cmp	r1, #117	; 0x75
   80b3c:	d049      	beq.n	80bd2 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80b3e:	2963      	cmp	r1, #99	; 0x63
   80b40:	d15c      	bne.n	80bfc <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80b42:	9905      	ldr	r1, [sp, #20]
   80b44:	1d08      	adds	r0, r1, #4
   80b46:	9005      	str	r0, [sp, #20]
   80b48:	7809      	ldrb	r1, [r1, #0]
   80b4a:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80b4e:	2100      	movs	r1, #0
   80b50:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80b54:	a907      	add	r1, sp, #28
   80b56:	4630      	mov	r0, r6
   80b58:	4f34      	ldr	r7, [pc, #208]	; (80c2c <print+0x140>)
   80b5a:	47b8      	blx	r7
   80b5c:	4405      	add	r5, r0
				continue;
   80b5e:	e04d      	b.n	80bfc <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80b60:	9905      	ldr	r1, [sp, #20]
   80b62:	1d08      	adds	r0, r1, #4
   80b64:	9005      	str	r0, [sp, #20]
   80b66:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80b68:	b121      	cbz	r1, 80b74 <print+0x88>
   80b6a:	4630      	mov	r0, r6
   80b6c:	4f2f      	ldr	r7, [pc, #188]	; (80c2c <print+0x140>)
   80b6e:	47b8      	blx	r7
   80b70:	4405      	add	r5, r0
				continue;
   80b72:	e043      	b.n	80bfc <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80b74:	492e      	ldr	r1, [pc, #184]	; (80c30 <print+0x144>)
   80b76:	e7f8      	b.n	80b6a <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80b78:	9905      	ldr	r1, [sp, #20]
   80b7a:	1d08      	adds	r0, r1, #4
   80b7c:	9005      	str	r0, [sp, #20]
   80b7e:	6809      	ldr	r1, [r1, #0]
   80b80:	2061      	movs	r0, #97	; 0x61
   80b82:	9002      	str	r0, [sp, #8]
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	9200      	str	r2, [sp, #0]
   80b88:	2301      	movs	r3, #1
   80b8a:	220a      	movs	r2, #10
   80b8c:	4630      	mov	r0, r6
   80b8e:	4f29      	ldr	r7, [pc, #164]	; (80c34 <print+0x148>)
   80b90:	47b8      	blx	r7
   80b92:	4405      	add	r5, r0
				continue;
   80b94:	e032      	b.n	80bfc <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80b96:	9905      	ldr	r1, [sp, #20]
   80b98:	1d08      	adds	r0, r1, #4
   80b9a:	9005      	str	r0, [sp, #20]
   80b9c:	6809      	ldr	r1, [r1, #0]
   80b9e:	2061      	movs	r0, #97	; 0x61
   80ba0:	9002      	str	r0, [sp, #8]
   80ba2:	9301      	str	r3, [sp, #4]
   80ba4:	9200      	str	r2, [sp, #0]
   80ba6:	2300      	movs	r3, #0
   80ba8:	2210      	movs	r2, #16
   80baa:	4630      	mov	r0, r6
   80bac:	4f21      	ldr	r7, [pc, #132]	; (80c34 <print+0x148>)
   80bae:	47b8      	blx	r7
   80bb0:	4405      	add	r5, r0
				continue;
   80bb2:	e023      	b.n	80bfc <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80bb4:	9905      	ldr	r1, [sp, #20]
   80bb6:	1d08      	adds	r0, r1, #4
   80bb8:	9005      	str	r0, [sp, #20]
   80bba:	6809      	ldr	r1, [r1, #0]
   80bbc:	2041      	movs	r0, #65	; 0x41
   80bbe:	9002      	str	r0, [sp, #8]
   80bc0:	9301      	str	r3, [sp, #4]
   80bc2:	9200      	str	r2, [sp, #0]
   80bc4:	2300      	movs	r3, #0
   80bc6:	2210      	movs	r2, #16
   80bc8:	4630      	mov	r0, r6
   80bca:	4f1a      	ldr	r7, [pc, #104]	; (80c34 <print+0x148>)
   80bcc:	47b8      	blx	r7
   80bce:	4405      	add	r5, r0
				continue;
   80bd0:	e014      	b.n	80bfc <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80bd2:	9905      	ldr	r1, [sp, #20]
   80bd4:	1d08      	adds	r0, r1, #4
   80bd6:	9005      	str	r0, [sp, #20]
   80bd8:	6809      	ldr	r1, [r1, #0]
   80bda:	2061      	movs	r0, #97	; 0x61
   80bdc:	9002      	str	r0, [sp, #8]
   80bde:	9301      	str	r3, [sp, #4]
   80be0:	9200      	str	r2, [sp, #0]
   80be2:	2300      	movs	r3, #0
   80be4:	220a      	movs	r2, #10
   80be6:	4630      	mov	r0, r6
   80be8:	4f12      	ldr	r7, [pc, #72]	; (80c34 <print+0x148>)
   80bea:	47b8      	blx	r7
   80bec:	4405      	add	r5, r0
				continue;
   80bee:	e005      	b.n	80bfc <print+0x110>
			++format;
   80bf0:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80bf2:	7821      	ldrb	r1, [r4, #0]
   80bf4:	4630      	mov	r0, r6
   80bf6:	4b10      	ldr	r3, [pc, #64]	; (80c38 <print+0x14c>)
   80bf8:	4798      	blx	r3
			++pc;
   80bfa:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80bfc:	3401      	adds	r4, #1
   80bfe:	7823      	ldrb	r3, [r4, #0]
   80c00:	b163      	cbz	r3, 80c1c <print+0x130>
		if (*format == '%') {
   80c02:	2b25      	cmp	r3, #37	; 0x25
   80c04:	d1f5      	bne.n	80bf2 <print+0x106>
			++format;
   80c06:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80c08:	7863      	ldrb	r3, [r4, #1]
   80c0a:	b13b      	cbz	r3, 80c1c <print+0x130>
			if (*format == '%') goto out;
   80c0c:	2b25      	cmp	r3, #37	; 0x25
   80c0e:	d0ef      	beq.n	80bf0 <print+0x104>
			if (*format == '-') {
   80c10:	2b2d      	cmp	r3, #45	; 0x2d
   80c12:	f43f af72 	beq.w	80afa <print+0xe>
			width = pad = 0;
   80c16:	2300      	movs	r3, #0
   80c18:	4614      	mov	r4, r2
   80c1a:	e774      	b.n	80b06 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80c1c:	b116      	cbz	r6, 80c24 <print+0x138>
   80c1e:	6833      	ldr	r3, [r6, #0]
   80c20:	2200      	movs	r2, #0
   80c22:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80c24:	4628      	mov	r0, r5
   80c26:	b009      	add	sp, #36	; 0x24
   80c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c2a:	bf00      	nop
   80c2c:	000809bd 	.word	0x000809bd
   80c30:	00081e98 	.word	0x00081e98
   80c34:	00080a41 	.word	0x00080a41
   80c38:	000809ad 	.word	0x000809ad

00080c3c <printf>:

int printf(const char *format, ...)
{
   80c3c:	b40f      	push	{r0, r1, r2, r3}
   80c3e:	b500      	push	{lr}
   80c40:	b083      	sub	sp, #12
   80c42:	aa04      	add	r2, sp, #16
   80c44:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80c48:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80c4a:	2000      	movs	r0, #0
   80c4c:	4b03      	ldr	r3, [pc, #12]	; (80c5c <printf+0x20>)
   80c4e:	4798      	blx	r3
}
   80c50:	b003      	add	sp, #12
   80c52:	f85d eb04 	ldr.w	lr, [sp], #4
   80c56:	b004      	add	sp, #16
   80c58:	4770      	bx	lr
   80c5a:	bf00      	nop
   80c5c:	00080aed 	.word	0x00080aed

00080c60 <PWM_init>:

#define max_duty_cycle_value 180
#define min_duty_cycle_value 80
#define mean_duty_cycle_value 127

void PWM_init(void){
   80c60:	b508      	push	{r3, lr}
	printf("PWM init...\r");
   80c62:	4817      	ldr	r0, [pc, #92]	; (80cc0 <PWM_init+0x60>)
   80c64:	4b17      	ldr	r3, [pc, #92]	; (80cc4 <PWM_init+0x64>)
   80c66:	4798      	blx	r3
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;// Peripheral Clock Enable PWM
   80c68:	4b17      	ldr	r3, [pc, #92]	; (80cc8 <PWM_init+0x68>)
   80c6a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   80c6e:	f042 0210 	orr.w	r2, r2, #16
   80c72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	PIOC->PIO_PDR |= PIO_PDR_P19;// Disable Register
   80c76:	4a15      	ldr	r2, [pc, #84]	; (80ccc <PWM_init+0x6c>)
   80c78:	6851      	ldr	r1, [r2, #4]
   80c7a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80c7e:	6051      	str	r1, [r2, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;// Peripheral Select
   80c80:	6f11      	ldr	r1, [r2, #112]	; 0x70
   80c82:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80c86:	6711      	str	r1, [r2, #112]	; 0x70

	PMC->PMC_PCR |= PMC_PCR_EN;
   80c88:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   80c8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80c90:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	/* PWM Clock Register*/
	PWM->PWM_CLK |= 1 << PWM_CLK_DIVA_Pos;
   80c94:	4b0e      	ldr	r3, [pc, #56]	; (80cd0 <PWM_init+0x70>)
   80c96:	681a      	ldr	r2, [r3, #0]
   80c98:	f042 0201 	orr.w	r2, r2, #1
   80c9c:	601a      	str	r2, [r3, #0]
	PWM->PWM_SCM |= PWM_SCM_UPDM_MODE0;
   80c9e:	6a1a      	ldr	r2, [r3, #32]
   80ca0:	621a      	str	r2, [r3, #32]

	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024 | PWM_CMR_CPOL;
   80ca2:	f240 220a 	movw	r2, #522	; 0x20a
   80ca6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[5].PWM_CPRD = 1641;
   80caa:	f240 6269 	movw	r2, #1641	; 0x669
   80cae:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = (uint32_t)((180 + 80) / 2); /// 180 is max value, 80 min value 
   80cb2:	2282      	movs	r2, #130	; 0x82
   80cb4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	PWM->PWM_ENA = PWM_ENA_CHID5;// Enable PWM channel 5.
   80cb8:	2220      	movs	r2, #32
   80cba:	605a      	str	r2, [r3, #4]
   80cbc:	bd08      	pop	{r3, pc}
   80cbe:	bf00      	nop
   80cc0:	00081ea0 	.word	0x00081ea0
   80cc4:	00080c3d 	.word	0x00080c3d
   80cc8:	400e0600 	.word	0x400e0600
   80ccc:	400e1200 	.word	0x400e1200
   80cd0:	40094000 	.word	0x40094000
   80cd4:	00000000 	.word	0x00000000

00080cd8 <pwm_set_duty_cycle>:
}


void pwm_set_duty_cycle(uint32_t joystick_pos) {
   80cd8:	b510      	push	{r4, lr}
	
	uint32_t duty_cycle = (uint32_t)(0.38*(float)joystick_pos + 80.0);
   80cda:	4b17      	ldr	r3, [pc, #92]	; (80d38 <pwm_set_duty_cycle+0x60>)
   80cdc:	4798      	blx	r3
   80cde:	4b17      	ldr	r3, [pc, #92]	; (80d3c <pwm_set_duty_cycle+0x64>)
   80ce0:	4798      	blx	r3
   80ce2:	a313      	add	r3, pc, #76	; (adr r3, 80d30 <pwm_set_duty_cycle+0x58>)
   80ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
   80ce8:	4c15      	ldr	r4, [pc, #84]	; (80d40 <pwm_set_duty_cycle+0x68>)
   80cea:	47a0      	blx	r4
   80cec:	2200      	movs	r2, #0
   80cee:	4b15      	ldr	r3, [pc, #84]	; (80d44 <pwm_set_duty_cycle+0x6c>)
   80cf0:	4c15      	ldr	r4, [pc, #84]	; (80d48 <pwm_set_duty_cycle+0x70>)
   80cf2:	47a0      	blx	r4
   80cf4:	4b15      	ldr	r3, [pc, #84]	; (80d4c <pwm_set_duty_cycle+0x74>)
   80cf6:	4798      	blx	r3
	if (duty_cycle > max_duty_cycle_value) {
   80cf8:	28b4      	cmp	r0, #180	; 0xb4
   80cfa:	d809      	bhi.n	80d10 <pwm_set_duty_cycle+0x38>
		PWM->PWM_CH_NUM[5].PWM_CDTY = max_duty_cycle_value;
	}
	else if (duty_cycle < min_duty_cycle_value) {
   80cfc:	284f      	cmp	r0, #79	; 0x4f
   80cfe:	d90c      	bls.n	80d1a <pwm_set_duty_cycle+0x42>
		PWM->PWM_CH_NUM[5].PWM_CDTY = min_duty_cycle_value;
	}
	else if (duty_cycle > 125 && duty_cycle < 155) {
   80d00:	f1a0 037e 	sub.w	r3, r0, #126	; 0x7e
   80d04:	2b1c      	cmp	r3, #28
   80d06:	d90d      	bls.n	80d24 <pwm_set_duty_cycle+0x4c>
		PWM->PWM_CH_NUM[5].PWM_CDTY = mean_duty_cycle_value;
	}
	else {
		PWM->PWM_CH_NUM[5].PWM_CDTY = duty_cycle;
   80d08:	4b11      	ldr	r3, [pc, #68]	; (80d50 <pwm_set_duty_cycle+0x78>)
   80d0a:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   80d0e:	bd10      	pop	{r4, pc}
		PWM->PWM_CH_NUM[5].PWM_CDTY = max_duty_cycle_value;
   80d10:	22b4      	movs	r2, #180	; 0xb4
   80d12:	4b0f      	ldr	r3, [pc, #60]	; (80d50 <pwm_set_duty_cycle+0x78>)
   80d14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80d18:	bd10      	pop	{r4, pc}
		PWM->PWM_CH_NUM[5].PWM_CDTY = min_duty_cycle_value;
   80d1a:	2250      	movs	r2, #80	; 0x50
   80d1c:	4b0c      	ldr	r3, [pc, #48]	; (80d50 <pwm_set_duty_cycle+0x78>)
   80d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80d22:	bd10      	pop	{r4, pc}
		PWM->PWM_CH_NUM[5].PWM_CDTY = mean_duty_cycle_value;
   80d24:	227f      	movs	r2, #127	; 0x7f
   80d26:	4b0a      	ldr	r3, [pc, #40]	; (80d50 <pwm_set_duty_cycle+0x78>)
   80d28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80d2c:	bd10      	pop	{r4, pc}
   80d2e:	bf00      	nop
   80d30:	851eb852 	.word	0x851eb852
   80d34:	3fd851eb 	.word	0x3fd851eb
   80d38:	000817d5 	.word	0x000817d5
   80d3c:	0008115d 	.word	0x0008115d
   80d40:	00081205 	.word	0x00081205
   80d44:	40540000 	.word	0x40540000
   80d48:	00080ea1 	.word	0x00080ea1
   80d4c:	00081629 	.word	0x00081629
   80d50:	40094000 	.word	0x40094000

00080d54 <solenoid_init>:



void solenoid_init() {
    //Pio Enable Register
    PIOA->PIO_PER |= PIO_PA14;
   80d54:	4b06      	ldr	r3, [pc, #24]	; (80d70 <solenoid_init+0x1c>)
   80d56:	681a      	ldr	r2, [r3, #0]
   80d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80d5c:	601a      	str	r2, [r3, #0]

    //enable Output Enable Register
    PIOA->PIO_OER |= PIO_PA14;
   80d5e:	691a      	ldr	r2, [r3, #16]
   80d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80d64:	611a      	str	r2, [r3, #16]

    //Set Output Data Register
    PIOA->PIO_SODR |= PIO_PA14;
   80d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80d6c:	631a      	str	r2, [r3, #48]	; 0x30
   80d6e:	4770      	bx	lr
   80d70:	400e0e00 	.word	0x400e0e00

00080d74 <solenoid_shoot>:
};

void solenoid_shoot(int button){
    //generates short pulse if button is pressed
    if (button) {
   80d74:	b900      	cbnz	r0, 80d78 <solenoid_shoot+0x4>
   80d76:	4770      	bx	lr
void solenoid_shoot(int button){
   80d78:	b510      	push	{r4, lr}
        PIOA->PIO_CODR |= PIO_PA14;
   80d7a:	4c06      	ldr	r4, [pc, #24]	; (80d94 <solenoid_shoot+0x20>)
   80d7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   80d82:	6363      	str	r3, [r4, #52]	; 0x34
        delay_ms(100);
   80d84:	4804      	ldr	r0, [pc, #16]	; (80d98 <solenoid_shoot+0x24>)
   80d86:	4b05      	ldr	r3, [pc, #20]	; (80d9c <solenoid_shoot+0x28>)
   80d88:	4798      	blx	r3
        PIOA->PIO_SODR |= PIO_PA14;
   80d8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   80d90:	6323      	str	r3, [r4, #48]	; 0x30
   80d92:	bd10      	pop	{r4, pc}
   80d94:	400e0e00 	.word	0x400e0e00
   80d98:	42c80000 	.word	0x42c80000
   80d9c:	000803ed 	.word	0x000803ed

00080da0 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80da0:	4b16      	ldr	r3, [pc, #88]	; (80dfc <configure_uart+0x5c>)
   80da2:	2200      	movs	r2, #0
   80da4:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80da6:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80da8:	4b15      	ldr	r3, [pc, #84]	; (80e00 <configure_uart+0x60>)
   80daa:	f44f 7140 	mov.w	r1, #768	; 0x300
   80dae:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80db0:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80db2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80db4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80db6:	4002      	ands	r2, r0
   80db8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80dbc:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80dbe:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
   80dc4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80dc8:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80dca:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80dce:	21ac      	movs	r1, #172	; 0xac
   80dd0:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80dd2:	f240 2123 	movw	r1, #547	; 0x223
   80dd6:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80ddc:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80dde:	f240 2102 	movw	r1, #514	; 0x202
   80de2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80de6:	f04f 31ff 	mov.w	r1, #4294967295
   80dea:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80dec:	21e1      	movs	r1, #225	; 0xe1
   80dee:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80df0:	4904      	ldr	r1, [pc, #16]	; (80e04 <configure_uart+0x64>)
   80df2:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80df4:	2250      	movs	r2, #80	; 0x50
   80df6:	601a      	str	r2, [r3, #0]
   80df8:	4770      	bx	lr
   80dfa:	bf00      	nop
   80dfc:	2000047c 	.word	0x2000047c
   80e00:	400e0e00 	.word	0x400e0e00
   80e04:	e000e100 	.word	0xe000e100

00080e08 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80e08:	4b07      	ldr	r3, [pc, #28]	; (80e28 <uart_putchar+0x20>)
   80e0a:	695b      	ldr	r3, [r3, #20]
   80e0c:	f013 0f02 	tst.w	r3, #2
   80e10:	d008      	beq.n	80e24 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80e12:	4b05      	ldr	r3, [pc, #20]	; (80e28 <uart_putchar+0x20>)
   80e14:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80e16:	4b04      	ldr	r3, [pc, #16]	; (80e28 <uart_putchar+0x20>)
   80e18:	695b      	ldr	r3, [r3, #20]
   80e1a:	f413 7f00 	tst.w	r3, #512	; 0x200
   80e1e:	d0fa      	beq.n	80e16 <uart_putchar+0xe>
	return 0;
   80e20:	2000      	movs	r0, #0
   80e22:	4770      	bx	lr
	return 1;
   80e24:	2001      	movs	r0, #1
}
   80e26:	4770      	bx	lr
   80e28:	400e0800 	.word	0x400e0800

00080e2c <UART_Handler>:

void UART_Handler(void)
{
   80e2c:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80e2e:	4b15      	ldr	r3, [pc, #84]	; (80e84 <UART_Handler+0x58>)
   80e30:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80e32:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80e36:	d003      	beq.n	80e40 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80e38:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80e3c:	4a11      	ldr	r2, [pc, #68]	; (80e84 <UART_Handler+0x58>)
   80e3e:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80e40:	f013 0f01 	tst.w	r3, #1
   80e44:	d012      	beq.n	80e6c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80e46:	4810      	ldr	r0, [pc, #64]	; (80e88 <UART_Handler+0x5c>)
   80e48:	7842      	ldrb	r2, [r0, #1]
   80e4a:	1c53      	adds	r3, r2, #1
   80e4c:	4259      	negs	r1, r3
   80e4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80e52:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80e56:	bf58      	it	pl
   80e58:	424b      	negpl	r3, r1
   80e5a:	7801      	ldrb	r1, [r0, #0]
   80e5c:	428b      	cmp	r3, r1
   80e5e:	d006      	beq.n	80e6e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80e60:	4908      	ldr	r1, [pc, #32]	; (80e84 <UART_Handler+0x58>)
   80e62:	6988      	ldr	r0, [r1, #24]
   80e64:	4908      	ldr	r1, [pc, #32]	; (80e88 <UART_Handler+0x5c>)
   80e66:	440a      	add	r2, r1
   80e68:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80e6a:	704b      	strb	r3, [r1, #1]
   80e6c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80e6e:	4807      	ldr	r0, [pc, #28]	; (80e8c <UART_Handler+0x60>)
   80e70:	4b07      	ldr	r3, [pc, #28]	; (80e90 <UART_Handler+0x64>)
   80e72:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80e74:	4b04      	ldr	r3, [pc, #16]	; (80e88 <UART_Handler+0x5c>)
   80e76:	7859      	ldrb	r1, [r3, #1]
   80e78:	4a02      	ldr	r2, [pc, #8]	; (80e84 <UART_Handler+0x58>)
   80e7a:	6992      	ldr	r2, [r2, #24]
   80e7c:	440b      	add	r3, r1
   80e7e:	709a      	strb	r2, [r3, #2]
			return;
   80e80:	bd08      	pop	{r3, pc}
   80e82:	bf00      	nop
   80e84:	400e0800 	.word	0x400e0800
   80e88:	2000047c 	.word	0x2000047c
   80e8c:	00081eb0 	.word	0x00081eb0
   80e90:	00080c3d 	.word	0x00080c3d

00080e94 <__aeabi_drsub>:
   80e94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80e98:	e002      	b.n	80ea0 <__adddf3>
   80e9a:	bf00      	nop

00080e9c <__aeabi_dsub>:
   80e9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080ea0 <__adddf3>:
   80ea0:	b530      	push	{r4, r5, lr}
   80ea2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80ea6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80eaa:	ea94 0f05 	teq	r4, r5
   80eae:	bf08      	it	eq
   80eb0:	ea90 0f02 	teqeq	r0, r2
   80eb4:	bf1f      	itttt	ne
   80eb6:	ea54 0c00 	orrsne.w	ip, r4, r0
   80eba:	ea55 0c02 	orrsne.w	ip, r5, r2
   80ebe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80ec2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80ec6:	f000 80e2 	beq.w	8108e <__adddf3+0x1ee>
   80eca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80ece:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80ed2:	bfb8      	it	lt
   80ed4:	426d      	neglt	r5, r5
   80ed6:	dd0c      	ble.n	80ef2 <__adddf3+0x52>
   80ed8:	442c      	add	r4, r5
   80eda:	ea80 0202 	eor.w	r2, r0, r2
   80ede:	ea81 0303 	eor.w	r3, r1, r3
   80ee2:	ea82 0000 	eor.w	r0, r2, r0
   80ee6:	ea83 0101 	eor.w	r1, r3, r1
   80eea:	ea80 0202 	eor.w	r2, r0, r2
   80eee:	ea81 0303 	eor.w	r3, r1, r3
   80ef2:	2d36      	cmp	r5, #54	; 0x36
   80ef4:	bf88      	it	hi
   80ef6:	bd30      	pophi	{r4, r5, pc}
   80ef8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80efc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80f00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80f04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80f08:	d002      	beq.n	80f10 <__adddf3+0x70>
   80f0a:	4240      	negs	r0, r0
   80f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80f10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80f14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80f18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80f1c:	d002      	beq.n	80f24 <__adddf3+0x84>
   80f1e:	4252      	negs	r2, r2
   80f20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80f24:	ea94 0f05 	teq	r4, r5
   80f28:	f000 80a7 	beq.w	8107a <__adddf3+0x1da>
   80f2c:	f1a4 0401 	sub.w	r4, r4, #1
   80f30:	f1d5 0e20 	rsbs	lr, r5, #32
   80f34:	db0d      	blt.n	80f52 <__adddf3+0xb2>
   80f36:	fa02 fc0e 	lsl.w	ip, r2, lr
   80f3a:	fa22 f205 	lsr.w	r2, r2, r5
   80f3e:	1880      	adds	r0, r0, r2
   80f40:	f141 0100 	adc.w	r1, r1, #0
   80f44:	fa03 f20e 	lsl.w	r2, r3, lr
   80f48:	1880      	adds	r0, r0, r2
   80f4a:	fa43 f305 	asr.w	r3, r3, r5
   80f4e:	4159      	adcs	r1, r3
   80f50:	e00e      	b.n	80f70 <__adddf3+0xd0>
   80f52:	f1a5 0520 	sub.w	r5, r5, #32
   80f56:	f10e 0e20 	add.w	lr, lr, #32
   80f5a:	2a01      	cmp	r2, #1
   80f5c:	fa03 fc0e 	lsl.w	ip, r3, lr
   80f60:	bf28      	it	cs
   80f62:	f04c 0c02 	orrcs.w	ip, ip, #2
   80f66:	fa43 f305 	asr.w	r3, r3, r5
   80f6a:	18c0      	adds	r0, r0, r3
   80f6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f74:	d507      	bpl.n	80f86 <__adddf3+0xe6>
   80f76:	f04f 0e00 	mov.w	lr, #0
   80f7a:	f1dc 0c00 	rsbs	ip, ip, #0
   80f7e:	eb7e 0000 	sbcs.w	r0, lr, r0
   80f82:	eb6e 0101 	sbc.w	r1, lr, r1
   80f86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80f8a:	d31b      	bcc.n	80fc4 <__adddf3+0x124>
   80f8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80f90:	d30c      	bcc.n	80fac <__adddf3+0x10c>
   80f92:	0849      	lsrs	r1, r1, #1
   80f94:	ea5f 0030 	movs.w	r0, r0, rrx
   80f98:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80f9c:	f104 0401 	add.w	r4, r4, #1
   80fa0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80fa4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80fa8:	f080 809a 	bcs.w	810e0 <__adddf3+0x240>
   80fac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80fb0:	bf08      	it	eq
   80fb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80fb6:	f150 0000 	adcs.w	r0, r0, #0
   80fba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80fbe:	ea41 0105 	orr.w	r1, r1, r5
   80fc2:	bd30      	pop	{r4, r5, pc}
   80fc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80fc8:	4140      	adcs	r0, r0
   80fca:	eb41 0101 	adc.w	r1, r1, r1
   80fce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80fd2:	f1a4 0401 	sub.w	r4, r4, #1
   80fd6:	d1e9      	bne.n	80fac <__adddf3+0x10c>
   80fd8:	f091 0f00 	teq	r1, #0
   80fdc:	bf04      	itt	eq
   80fde:	4601      	moveq	r1, r0
   80fe0:	2000      	moveq	r0, #0
   80fe2:	fab1 f381 	clz	r3, r1
   80fe6:	bf08      	it	eq
   80fe8:	3320      	addeq	r3, #32
   80fea:	f1a3 030b 	sub.w	r3, r3, #11
   80fee:	f1b3 0220 	subs.w	r2, r3, #32
   80ff2:	da0c      	bge.n	8100e <__adddf3+0x16e>
   80ff4:	320c      	adds	r2, #12
   80ff6:	dd08      	ble.n	8100a <__adddf3+0x16a>
   80ff8:	f102 0c14 	add.w	ip, r2, #20
   80ffc:	f1c2 020c 	rsb	r2, r2, #12
   81000:	fa01 f00c 	lsl.w	r0, r1, ip
   81004:	fa21 f102 	lsr.w	r1, r1, r2
   81008:	e00c      	b.n	81024 <__adddf3+0x184>
   8100a:	f102 0214 	add.w	r2, r2, #20
   8100e:	bfd8      	it	le
   81010:	f1c2 0c20 	rsble	ip, r2, #32
   81014:	fa01 f102 	lsl.w	r1, r1, r2
   81018:	fa20 fc0c 	lsr.w	ip, r0, ip
   8101c:	bfdc      	itt	le
   8101e:	ea41 010c 	orrle.w	r1, r1, ip
   81022:	4090      	lslle	r0, r2
   81024:	1ae4      	subs	r4, r4, r3
   81026:	bfa2      	ittt	ge
   81028:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8102c:	4329      	orrge	r1, r5
   8102e:	bd30      	popge	{r4, r5, pc}
   81030:	ea6f 0404 	mvn.w	r4, r4
   81034:	3c1f      	subs	r4, #31
   81036:	da1c      	bge.n	81072 <__adddf3+0x1d2>
   81038:	340c      	adds	r4, #12
   8103a:	dc0e      	bgt.n	8105a <__adddf3+0x1ba>
   8103c:	f104 0414 	add.w	r4, r4, #20
   81040:	f1c4 0220 	rsb	r2, r4, #32
   81044:	fa20 f004 	lsr.w	r0, r0, r4
   81048:	fa01 f302 	lsl.w	r3, r1, r2
   8104c:	ea40 0003 	orr.w	r0, r0, r3
   81050:	fa21 f304 	lsr.w	r3, r1, r4
   81054:	ea45 0103 	orr.w	r1, r5, r3
   81058:	bd30      	pop	{r4, r5, pc}
   8105a:	f1c4 040c 	rsb	r4, r4, #12
   8105e:	f1c4 0220 	rsb	r2, r4, #32
   81062:	fa20 f002 	lsr.w	r0, r0, r2
   81066:	fa01 f304 	lsl.w	r3, r1, r4
   8106a:	ea40 0003 	orr.w	r0, r0, r3
   8106e:	4629      	mov	r1, r5
   81070:	bd30      	pop	{r4, r5, pc}
   81072:	fa21 f004 	lsr.w	r0, r1, r4
   81076:	4629      	mov	r1, r5
   81078:	bd30      	pop	{r4, r5, pc}
   8107a:	f094 0f00 	teq	r4, #0
   8107e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81082:	bf06      	itte	eq
   81084:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81088:	3401      	addeq	r4, #1
   8108a:	3d01      	subne	r5, #1
   8108c:	e74e      	b.n	80f2c <__adddf3+0x8c>
   8108e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81092:	bf18      	it	ne
   81094:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81098:	d029      	beq.n	810ee <__adddf3+0x24e>
   8109a:	ea94 0f05 	teq	r4, r5
   8109e:	bf08      	it	eq
   810a0:	ea90 0f02 	teqeq	r0, r2
   810a4:	d005      	beq.n	810b2 <__adddf3+0x212>
   810a6:	ea54 0c00 	orrs.w	ip, r4, r0
   810aa:	bf04      	itt	eq
   810ac:	4619      	moveq	r1, r3
   810ae:	4610      	moveq	r0, r2
   810b0:	bd30      	pop	{r4, r5, pc}
   810b2:	ea91 0f03 	teq	r1, r3
   810b6:	bf1e      	ittt	ne
   810b8:	2100      	movne	r1, #0
   810ba:	2000      	movne	r0, #0
   810bc:	bd30      	popne	{r4, r5, pc}
   810be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   810c2:	d105      	bne.n	810d0 <__adddf3+0x230>
   810c4:	0040      	lsls	r0, r0, #1
   810c6:	4149      	adcs	r1, r1
   810c8:	bf28      	it	cs
   810ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   810ce:	bd30      	pop	{r4, r5, pc}
   810d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   810d4:	bf3c      	itt	cc
   810d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   810da:	bd30      	popcc	{r4, r5, pc}
   810dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   810e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   810e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   810e8:	f04f 0000 	mov.w	r0, #0
   810ec:	bd30      	pop	{r4, r5, pc}
   810ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   810f2:	bf1a      	itte	ne
   810f4:	4619      	movne	r1, r3
   810f6:	4610      	movne	r0, r2
   810f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   810fc:	bf1c      	itt	ne
   810fe:	460b      	movne	r3, r1
   81100:	4602      	movne	r2, r0
   81102:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81106:	bf06      	itte	eq
   81108:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8110c:	ea91 0f03 	teqeq	r1, r3
   81110:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81114:	bd30      	pop	{r4, r5, pc}
   81116:	bf00      	nop

00081118 <__aeabi_ui2d>:
   81118:	f090 0f00 	teq	r0, #0
   8111c:	bf04      	itt	eq
   8111e:	2100      	moveq	r1, #0
   81120:	4770      	bxeq	lr
   81122:	b530      	push	{r4, r5, lr}
   81124:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81128:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8112c:	f04f 0500 	mov.w	r5, #0
   81130:	f04f 0100 	mov.w	r1, #0
   81134:	e750      	b.n	80fd8 <__adddf3+0x138>
   81136:	bf00      	nop

00081138 <__aeabi_i2d>:
   81138:	f090 0f00 	teq	r0, #0
   8113c:	bf04      	itt	eq
   8113e:	2100      	moveq	r1, #0
   81140:	4770      	bxeq	lr
   81142:	b530      	push	{r4, r5, lr}
   81144:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81148:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8114c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81150:	bf48      	it	mi
   81152:	4240      	negmi	r0, r0
   81154:	f04f 0100 	mov.w	r1, #0
   81158:	e73e      	b.n	80fd8 <__adddf3+0x138>
   8115a:	bf00      	nop

0008115c <__aeabi_f2d>:
   8115c:	0042      	lsls	r2, r0, #1
   8115e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81162:	ea4f 0131 	mov.w	r1, r1, rrx
   81166:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8116a:	bf1f      	itttt	ne
   8116c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81170:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81174:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81178:	4770      	bxne	lr
   8117a:	f092 0f00 	teq	r2, #0
   8117e:	bf14      	ite	ne
   81180:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81184:	4770      	bxeq	lr
   81186:	b530      	push	{r4, r5, lr}
   81188:	f44f 7460 	mov.w	r4, #896	; 0x380
   8118c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81190:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81194:	e720      	b.n	80fd8 <__adddf3+0x138>
   81196:	bf00      	nop

00081198 <__aeabi_ul2d>:
   81198:	ea50 0201 	orrs.w	r2, r0, r1
   8119c:	bf08      	it	eq
   8119e:	4770      	bxeq	lr
   811a0:	b530      	push	{r4, r5, lr}
   811a2:	f04f 0500 	mov.w	r5, #0
   811a6:	e00a      	b.n	811be <__aeabi_l2d+0x16>

000811a8 <__aeabi_l2d>:
   811a8:	ea50 0201 	orrs.w	r2, r0, r1
   811ac:	bf08      	it	eq
   811ae:	4770      	bxeq	lr
   811b0:	b530      	push	{r4, r5, lr}
   811b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   811b6:	d502      	bpl.n	811be <__aeabi_l2d+0x16>
   811b8:	4240      	negs	r0, r0
   811ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   811be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   811ca:	f43f aedc 	beq.w	80f86 <__adddf3+0xe6>
   811ce:	f04f 0203 	mov.w	r2, #3
   811d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   811d6:	bf18      	it	ne
   811d8:	3203      	addne	r2, #3
   811da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   811de:	bf18      	it	ne
   811e0:	3203      	addne	r2, #3
   811e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   811e6:	f1c2 0320 	rsb	r3, r2, #32
   811ea:	fa00 fc03 	lsl.w	ip, r0, r3
   811ee:	fa20 f002 	lsr.w	r0, r0, r2
   811f2:	fa01 fe03 	lsl.w	lr, r1, r3
   811f6:	ea40 000e 	orr.w	r0, r0, lr
   811fa:	fa21 f102 	lsr.w	r1, r1, r2
   811fe:	4414      	add	r4, r2
   81200:	e6c1      	b.n	80f86 <__adddf3+0xe6>
   81202:	bf00      	nop

00081204 <__aeabi_dmul>:
   81204:	b570      	push	{r4, r5, r6, lr}
   81206:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8120a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8120e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81212:	bf1d      	ittte	ne
   81214:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81218:	ea94 0f0c 	teqne	r4, ip
   8121c:	ea95 0f0c 	teqne	r5, ip
   81220:	f000 f8de 	bleq	813e0 <__aeabi_dmul+0x1dc>
   81224:	442c      	add	r4, r5
   81226:	ea81 0603 	eor.w	r6, r1, r3
   8122a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8122e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81232:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81236:	bf18      	it	ne
   81238:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8123c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81244:	d038      	beq.n	812b8 <__aeabi_dmul+0xb4>
   81246:	fba0 ce02 	umull	ip, lr, r0, r2
   8124a:	f04f 0500 	mov.w	r5, #0
   8124e:	fbe1 e502 	umlal	lr, r5, r1, r2
   81252:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81256:	fbe0 e503 	umlal	lr, r5, r0, r3
   8125a:	f04f 0600 	mov.w	r6, #0
   8125e:	fbe1 5603 	umlal	r5, r6, r1, r3
   81262:	f09c 0f00 	teq	ip, #0
   81266:	bf18      	it	ne
   81268:	f04e 0e01 	orrne.w	lr, lr, #1
   8126c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81270:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81274:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81278:	d204      	bcs.n	81284 <__aeabi_dmul+0x80>
   8127a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8127e:	416d      	adcs	r5, r5
   81280:	eb46 0606 	adc.w	r6, r6, r6
   81284:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81288:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8128c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81290:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81294:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81298:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8129c:	bf88      	it	hi
   8129e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   812a2:	d81e      	bhi.n	812e2 <__aeabi_dmul+0xde>
   812a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   812a8:	bf08      	it	eq
   812aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   812ae:	f150 0000 	adcs.w	r0, r0, #0
   812b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   812b6:	bd70      	pop	{r4, r5, r6, pc}
   812b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   812bc:	ea46 0101 	orr.w	r1, r6, r1
   812c0:	ea40 0002 	orr.w	r0, r0, r2
   812c4:	ea81 0103 	eor.w	r1, r1, r3
   812c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   812cc:	bfc2      	ittt	gt
   812ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   812d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   812d6:	bd70      	popgt	{r4, r5, r6, pc}
   812d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   812dc:	f04f 0e00 	mov.w	lr, #0
   812e0:	3c01      	subs	r4, #1
   812e2:	f300 80ab 	bgt.w	8143c <__aeabi_dmul+0x238>
   812e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   812ea:	bfde      	ittt	le
   812ec:	2000      	movle	r0, #0
   812ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   812f2:	bd70      	pople	{r4, r5, r6, pc}
   812f4:	f1c4 0400 	rsb	r4, r4, #0
   812f8:	3c20      	subs	r4, #32
   812fa:	da35      	bge.n	81368 <__aeabi_dmul+0x164>
   812fc:	340c      	adds	r4, #12
   812fe:	dc1b      	bgt.n	81338 <__aeabi_dmul+0x134>
   81300:	f104 0414 	add.w	r4, r4, #20
   81304:	f1c4 0520 	rsb	r5, r4, #32
   81308:	fa00 f305 	lsl.w	r3, r0, r5
   8130c:	fa20 f004 	lsr.w	r0, r0, r4
   81310:	fa01 f205 	lsl.w	r2, r1, r5
   81314:	ea40 0002 	orr.w	r0, r0, r2
   81318:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8131c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81324:	fa21 f604 	lsr.w	r6, r1, r4
   81328:	eb42 0106 	adc.w	r1, r2, r6
   8132c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81330:	bf08      	it	eq
   81332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81336:	bd70      	pop	{r4, r5, r6, pc}
   81338:	f1c4 040c 	rsb	r4, r4, #12
   8133c:	f1c4 0520 	rsb	r5, r4, #32
   81340:	fa00 f304 	lsl.w	r3, r0, r4
   81344:	fa20 f005 	lsr.w	r0, r0, r5
   81348:	fa01 f204 	lsl.w	r2, r1, r4
   8134c:	ea40 0002 	orr.w	r0, r0, r2
   81350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81358:	f141 0100 	adc.w	r1, r1, #0
   8135c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81360:	bf08      	it	eq
   81362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81366:	bd70      	pop	{r4, r5, r6, pc}
   81368:	f1c4 0520 	rsb	r5, r4, #32
   8136c:	fa00 f205 	lsl.w	r2, r0, r5
   81370:	ea4e 0e02 	orr.w	lr, lr, r2
   81374:	fa20 f304 	lsr.w	r3, r0, r4
   81378:	fa01 f205 	lsl.w	r2, r1, r5
   8137c:	ea43 0302 	orr.w	r3, r3, r2
   81380:	fa21 f004 	lsr.w	r0, r1, r4
   81384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81388:	fa21 f204 	lsr.w	r2, r1, r4
   8138c:	ea20 0002 	bic.w	r0, r0, r2
   81390:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81398:	bf08      	it	eq
   8139a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8139e:	bd70      	pop	{r4, r5, r6, pc}
   813a0:	f094 0f00 	teq	r4, #0
   813a4:	d10f      	bne.n	813c6 <__aeabi_dmul+0x1c2>
   813a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   813aa:	0040      	lsls	r0, r0, #1
   813ac:	eb41 0101 	adc.w	r1, r1, r1
   813b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813b4:	bf08      	it	eq
   813b6:	3c01      	subeq	r4, #1
   813b8:	d0f7      	beq.n	813aa <__aeabi_dmul+0x1a6>
   813ba:	ea41 0106 	orr.w	r1, r1, r6
   813be:	f095 0f00 	teq	r5, #0
   813c2:	bf18      	it	ne
   813c4:	4770      	bxne	lr
   813c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   813ca:	0052      	lsls	r2, r2, #1
   813cc:	eb43 0303 	adc.w	r3, r3, r3
   813d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   813d4:	bf08      	it	eq
   813d6:	3d01      	subeq	r5, #1
   813d8:	d0f7      	beq.n	813ca <__aeabi_dmul+0x1c6>
   813da:	ea43 0306 	orr.w	r3, r3, r6
   813de:	4770      	bx	lr
   813e0:	ea94 0f0c 	teq	r4, ip
   813e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   813e8:	bf18      	it	ne
   813ea:	ea95 0f0c 	teqne	r5, ip
   813ee:	d00c      	beq.n	8140a <__aeabi_dmul+0x206>
   813f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813f4:	bf18      	it	ne
   813f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   813fa:	d1d1      	bne.n	813a0 <__aeabi_dmul+0x19c>
   813fc:	ea81 0103 	eor.w	r1, r1, r3
   81400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81404:	f04f 0000 	mov.w	r0, #0
   81408:	bd70      	pop	{r4, r5, r6, pc}
   8140a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8140e:	bf06      	itte	eq
   81410:	4610      	moveq	r0, r2
   81412:	4619      	moveq	r1, r3
   81414:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81418:	d019      	beq.n	8144e <__aeabi_dmul+0x24a>
   8141a:	ea94 0f0c 	teq	r4, ip
   8141e:	d102      	bne.n	81426 <__aeabi_dmul+0x222>
   81420:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81424:	d113      	bne.n	8144e <__aeabi_dmul+0x24a>
   81426:	ea95 0f0c 	teq	r5, ip
   8142a:	d105      	bne.n	81438 <__aeabi_dmul+0x234>
   8142c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81430:	bf1c      	itt	ne
   81432:	4610      	movne	r0, r2
   81434:	4619      	movne	r1, r3
   81436:	d10a      	bne.n	8144e <__aeabi_dmul+0x24a>
   81438:	ea81 0103 	eor.w	r1, r1, r3
   8143c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81440:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81448:	f04f 0000 	mov.w	r0, #0
   8144c:	bd70      	pop	{r4, r5, r6, pc}
   8144e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81452:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81456:	bd70      	pop	{r4, r5, r6, pc}

00081458 <__aeabi_ddiv>:
   81458:	b570      	push	{r4, r5, r6, lr}
   8145a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8145e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81466:	bf1d      	ittte	ne
   81468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8146c:	ea94 0f0c 	teqne	r4, ip
   81470:	ea95 0f0c 	teqne	r5, ip
   81474:	f000 f8a7 	bleq	815c6 <__aeabi_ddiv+0x16e>
   81478:	eba4 0405 	sub.w	r4, r4, r5
   8147c:	ea81 0e03 	eor.w	lr, r1, r3
   81480:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81484:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81488:	f000 8088 	beq.w	8159c <__aeabi_ddiv+0x144>
   8148c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81490:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81494:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81498:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8149c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   814a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   814a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   814a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   814ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   814b0:	429d      	cmp	r5, r3
   814b2:	bf08      	it	eq
   814b4:	4296      	cmpeq	r6, r2
   814b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   814ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   814be:	d202      	bcs.n	814c6 <__aeabi_ddiv+0x6e>
   814c0:	085b      	lsrs	r3, r3, #1
   814c2:	ea4f 0232 	mov.w	r2, r2, rrx
   814c6:	1ab6      	subs	r6, r6, r2
   814c8:	eb65 0503 	sbc.w	r5, r5, r3
   814cc:	085b      	lsrs	r3, r3, #1
   814ce:	ea4f 0232 	mov.w	r2, r2, rrx
   814d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   814d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   814da:	ebb6 0e02 	subs.w	lr, r6, r2
   814de:	eb75 0e03 	sbcs.w	lr, r5, r3
   814e2:	bf22      	ittt	cs
   814e4:	1ab6      	subcs	r6, r6, r2
   814e6:	4675      	movcs	r5, lr
   814e8:	ea40 000c 	orrcs.w	r0, r0, ip
   814ec:	085b      	lsrs	r3, r3, #1
   814ee:	ea4f 0232 	mov.w	r2, r2, rrx
   814f2:	ebb6 0e02 	subs.w	lr, r6, r2
   814f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   814fa:	bf22      	ittt	cs
   814fc:	1ab6      	subcs	r6, r6, r2
   814fe:	4675      	movcs	r5, lr
   81500:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81504:	085b      	lsrs	r3, r3, #1
   81506:	ea4f 0232 	mov.w	r2, r2, rrx
   8150a:	ebb6 0e02 	subs.w	lr, r6, r2
   8150e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81512:	bf22      	ittt	cs
   81514:	1ab6      	subcs	r6, r6, r2
   81516:	4675      	movcs	r5, lr
   81518:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8151c:	085b      	lsrs	r3, r3, #1
   8151e:	ea4f 0232 	mov.w	r2, r2, rrx
   81522:	ebb6 0e02 	subs.w	lr, r6, r2
   81526:	eb75 0e03 	sbcs.w	lr, r5, r3
   8152a:	bf22      	ittt	cs
   8152c:	1ab6      	subcs	r6, r6, r2
   8152e:	4675      	movcs	r5, lr
   81530:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81534:	ea55 0e06 	orrs.w	lr, r5, r6
   81538:	d018      	beq.n	8156c <__aeabi_ddiv+0x114>
   8153a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8153e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81542:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81546:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8154a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8154e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81552:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81556:	d1c0      	bne.n	814da <__aeabi_ddiv+0x82>
   81558:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8155c:	d10b      	bne.n	81576 <__aeabi_ddiv+0x11e>
   8155e:	ea41 0100 	orr.w	r1, r1, r0
   81562:	f04f 0000 	mov.w	r0, #0
   81566:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8156a:	e7b6      	b.n	814da <__aeabi_ddiv+0x82>
   8156c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81570:	bf04      	itt	eq
   81572:	4301      	orreq	r1, r0
   81574:	2000      	moveq	r0, #0
   81576:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8157a:	bf88      	it	hi
   8157c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81580:	f63f aeaf 	bhi.w	812e2 <__aeabi_dmul+0xde>
   81584:	ebb5 0c03 	subs.w	ip, r5, r3
   81588:	bf04      	itt	eq
   8158a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8158e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81592:	f150 0000 	adcs.w	r0, r0, #0
   81596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8159a:	bd70      	pop	{r4, r5, r6, pc}
   8159c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   815a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   815a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   815a8:	bfc2      	ittt	gt
   815aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   815ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   815b2:	bd70      	popgt	{r4, r5, r6, pc}
   815b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   815b8:	f04f 0e00 	mov.w	lr, #0
   815bc:	3c01      	subs	r4, #1
   815be:	e690      	b.n	812e2 <__aeabi_dmul+0xde>
   815c0:	ea45 0e06 	orr.w	lr, r5, r6
   815c4:	e68d      	b.n	812e2 <__aeabi_dmul+0xde>
   815c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   815ca:	ea94 0f0c 	teq	r4, ip
   815ce:	bf08      	it	eq
   815d0:	ea95 0f0c 	teqeq	r5, ip
   815d4:	f43f af3b 	beq.w	8144e <__aeabi_dmul+0x24a>
   815d8:	ea94 0f0c 	teq	r4, ip
   815dc:	d10a      	bne.n	815f4 <__aeabi_ddiv+0x19c>
   815de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   815e2:	f47f af34 	bne.w	8144e <__aeabi_dmul+0x24a>
   815e6:	ea95 0f0c 	teq	r5, ip
   815ea:	f47f af25 	bne.w	81438 <__aeabi_dmul+0x234>
   815ee:	4610      	mov	r0, r2
   815f0:	4619      	mov	r1, r3
   815f2:	e72c      	b.n	8144e <__aeabi_dmul+0x24a>
   815f4:	ea95 0f0c 	teq	r5, ip
   815f8:	d106      	bne.n	81608 <__aeabi_ddiv+0x1b0>
   815fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   815fe:	f43f aefd 	beq.w	813fc <__aeabi_dmul+0x1f8>
   81602:	4610      	mov	r0, r2
   81604:	4619      	mov	r1, r3
   81606:	e722      	b.n	8144e <__aeabi_dmul+0x24a>
   81608:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8160c:	bf18      	it	ne
   8160e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81612:	f47f aec5 	bne.w	813a0 <__aeabi_dmul+0x19c>
   81616:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8161a:	f47f af0d 	bne.w	81438 <__aeabi_dmul+0x234>
   8161e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81622:	f47f aeeb 	bne.w	813fc <__aeabi_dmul+0x1f8>
   81626:	e712      	b.n	8144e <__aeabi_dmul+0x24a>

00081628 <__aeabi_d2uiz>:
   81628:	004a      	lsls	r2, r1, #1
   8162a:	d211      	bcs.n	81650 <__aeabi_d2uiz+0x28>
   8162c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81630:	d211      	bcs.n	81656 <__aeabi_d2uiz+0x2e>
   81632:	d50d      	bpl.n	81650 <__aeabi_d2uiz+0x28>
   81634:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8163c:	d40e      	bmi.n	8165c <__aeabi_d2uiz+0x34>
   8163e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8164a:	fa23 f002 	lsr.w	r0, r3, r2
   8164e:	4770      	bx	lr
   81650:	f04f 0000 	mov.w	r0, #0
   81654:	4770      	bx	lr
   81656:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8165a:	d102      	bne.n	81662 <__aeabi_d2uiz+0x3a>
   8165c:	f04f 30ff 	mov.w	r0, #4294967295
   81660:	4770      	bx	lr
   81662:	f04f 0000 	mov.w	r0, #0
   81666:	4770      	bx	lr

00081668 <__aeabi_frsub>:
   81668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8166c:	e002      	b.n	81674 <__addsf3>
   8166e:	bf00      	nop

00081670 <__aeabi_fsub>:
   81670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00081674 <__addsf3>:
   81674:	0042      	lsls	r2, r0, #1
   81676:	bf1f      	itttt	ne
   81678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   8167c:	ea92 0f03 	teqne	r2, r3
   81680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81688:	d06a      	beq.n	81760 <__addsf3+0xec>
   8168a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8168e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   81692:	bfc1      	itttt	gt
   81694:	18d2      	addgt	r2, r2, r3
   81696:	4041      	eorgt	r1, r0
   81698:	4048      	eorgt	r0, r1
   8169a:	4041      	eorgt	r1, r0
   8169c:	bfb8      	it	lt
   8169e:	425b      	neglt	r3, r3
   816a0:	2b19      	cmp	r3, #25
   816a2:	bf88      	it	hi
   816a4:	4770      	bxhi	lr
   816a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   816aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   816ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   816b2:	bf18      	it	ne
   816b4:	4240      	negne	r0, r0
   816b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   816ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   816be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   816c2:	bf18      	it	ne
   816c4:	4249      	negne	r1, r1
   816c6:	ea92 0f03 	teq	r2, r3
   816ca:	d03f      	beq.n	8174c <__addsf3+0xd8>
   816cc:	f1a2 0201 	sub.w	r2, r2, #1
   816d0:	fa41 fc03 	asr.w	ip, r1, r3
   816d4:	eb10 000c 	adds.w	r0, r0, ip
   816d8:	f1c3 0320 	rsb	r3, r3, #32
   816dc:	fa01 f103 	lsl.w	r1, r1, r3
   816e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   816e4:	d502      	bpl.n	816ec <__addsf3+0x78>
   816e6:	4249      	negs	r1, r1
   816e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   816ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   816f0:	d313      	bcc.n	8171a <__addsf3+0xa6>
   816f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   816f6:	d306      	bcc.n	81706 <__addsf3+0x92>
   816f8:	0840      	lsrs	r0, r0, #1
   816fa:	ea4f 0131 	mov.w	r1, r1, rrx
   816fe:	f102 0201 	add.w	r2, r2, #1
   81702:	2afe      	cmp	r2, #254	; 0xfe
   81704:	d251      	bcs.n	817aa <__addsf3+0x136>
   81706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8170a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8170e:	bf08      	it	eq
   81710:	f020 0001 	biceq.w	r0, r0, #1
   81714:	ea40 0003 	orr.w	r0, r0, r3
   81718:	4770      	bx	lr
   8171a:	0049      	lsls	r1, r1, #1
   8171c:	eb40 0000 	adc.w	r0, r0, r0
   81720:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81724:	f1a2 0201 	sub.w	r2, r2, #1
   81728:	d1ed      	bne.n	81706 <__addsf3+0x92>
   8172a:	fab0 fc80 	clz	ip, r0
   8172e:	f1ac 0c08 	sub.w	ip, ip, #8
   81732:	ebb2 020c 	subs.w	r2, r2, ip
   81736:	fa00 f00c 	lsl.w	r0, r0, ip
   8173a:	bfaa      	itet	ge
   8173c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81740:	4252      	neglt	r2, r2
   81742:	4318      	orrge	r0, r3
   81744:	bfbc      	itt	lt
   81746:	40d0      	lsrlt	r0, r2
   81748:	4318      	orrlt	r0, r3
   8174a:	4770      	bx	lr
   8174c:	f092 0f00 	teq	r2, #0
   81750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81754:	bf06      	itte	eq
   81756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8175a:	3201      	addeq	r2, #1
   8175c:	3b01      	subne	r3, #1
   8175e:	e7b5      	b.n	816cc <__addsf3+0x58>
   81760:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81768:	bf18      	it	ne
   8176a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8176e:	d021      	beq.n	817b4 <__addsf3+0x140>
   81770:	ea92 0f03 	teq	r2, r3
   81774:	d004      	beq.n	81780 <__addsf3+0x10c>
   81776:	f092 0f00 	teq	r2, #0
   8177a:	bf08      	it	eq
   8177c:	4608      	moveq	r0, r1
   8177e:	4770      	bx	lr
   81780:	ea90 0f01 	teq	r0, r1
   81784:	bf1c      	itt	ne
   81786:	2000      	movne	r0, #0
   81788:	4770      	bxne	lr
   8178a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8178e:	d104      	bne.n	8179a <__addsf3+0x126>
   81790:	0040      	lsls	r0, r0, #1
   81792:	bf28      	it	cs
   81794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   81798:	4770      	bx	lr
   8179a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8179e:	bf3c      	itt	cc
   817a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   817a4:	4770      	bxcc	lr
   817a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   817aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   817ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   817b2:	4770      	bx	lr
   817b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   817b8:	bf16      	itet	ne
   817ba:	4608      	movne	r0, r1
   817bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   817c0:	4601      	movne	r1, r0
   817c2:	0242      	lsls	r2, r0, #9
   817c4:	bf06      	itte	eq
   817c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   817ca:	ea90 0f01 	teqeq	r0, r1
   817ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   817d2:	4770      	bx	lr

000817d4 <__aeabi_ui2f>:
   817d4:	f04f 0300 	mov.w	r3, #0
   817d8:	e004      	b.n	817e4 <__aeabi_i2f+0x8>
   817da:	bf00      	nop

000817dc <__aeabi_i2f>:
   817dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   817e0:	bf48      	it	mi
   817e2:	4240      	negmi	r0, r0
   817e4:	ea5f 0c00 	movs.w	ip, r0
   817e8:	bf08      	it	eq
   817ea:	4770      	bxeq	lr
   817ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   817f0:	4601      	mov	r1, r0
   817f2:	f04f 0000 	mov.w	r0, #0
   817f6:	e01c      	b.n	81832 <__aeabi_l2f+0x2a>

000817f8 <__aeabi_ul2f>:
   817f8:	ea50 0201 	orrs.w	r2, r0, r1
   817fc:	bf08      	it	eq
   817fe:	4770      	bxeq	lr
   81800:	f04f 0300 	mov.w	r3, #0
   81804:	e00a      	b.n	8181c <__aeabi_l2f+0x14>
   81806:	bf00      	nop

00081808 <__aeabi_l2f>:
   81808:	ea50 0201 	orrs.w	r2, r0, r1
   8180c:	bf08      	it	eq
   8180e:	4770      	bxeq	lr
   81810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81814:	d502      	bpl.n	8181c <__aeabi_l2f+0x14>
   81816:	4240      	negs	r0, r0
   81818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8181c:	ea5f 0c01 	movs.w	ip, r1
   81820:	bf02      	ittt	eq
   81822:	4684      	moveq	ip, r0
   81824:	4601      	moveq	r1, r0
   81826:	2000      	moveq	r0, #0
   81828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   8182c:	bf08      	it	eq
   8182e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81836:	fabc f28c 	clz	r2, ip
   8183a:	3a08      	subs	r2, #8
   8183c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81840:	db10      	blt.n	81864 <__aeabi_l2f+0x5c>
   81842:	fa01 fc02 	lsl.w	ip, r1, r2
   81846:	4463      	add	r3, ip
   81848:	fa00 fc02 	lsl.w	ip, r0, r2
   8184c:	f1c2 0220 	rsb	r2, r2, #32
   81850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81854:	fa20 f202 	lsr.w	r2, r0, r2
   81858:	eb43 0002 	adc.w	r0, r3, r2
   8185c:	bf08      	it	eq
   8185e:	f020 0001 	biceq.w	r0, r0, #1
   81862:	4770      	bx	lr
   81864:	f102 0220 	add.w	r2, r2, #32
   81868:	fa01 fc02 	lsl.w	ip, r1, r2
   8186c:	f1c2 0220 	rsb	r2, r2, #32
   81870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81874:	fa21 f202 	lsr.w	r2, r1, r2
   81878:	eb43 0002 	adc.w	r0, r3, r2
   8187c:	bf08      	it	eq
   8187e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81882:	4770      	bx	lr

00081884 <__aeabi_fmul>:
   81884:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8188c:	bf1e      	ittt	ne
   8188e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81892:	ea92 0f0c 	teqne	r2, ip
   81896:	ea93 0f0c 	teqne	r3, ip
   8189a:	d06f      	beq.n	8197c <__aeabi_fmul+0xf8>
   8189c:	441a      	add	r2, r3
   8189e:	ea80 0c01 	eor.w	ip, r0, r1
   818a2:	0240      	lsls	r0, r0, #9
   818a4:	bf18      	it	ne
   818a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   818aa:	d01e      	beq.n	818ea <__aeabi_fmul+0x66>
   818ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   818b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   818b8:	fba0 3101 	umull	r3, r1, r0, r1
   818bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   818c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   818c4:	bf3e      	ittt	cc
   818c6:	0049      	lslcc	r1, r1, #1
   818c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   818cc:	005b      	lslcc	r3, r3, #1
   818ce:	ea40 0001 	orr.w	r0, r0, r1
   818d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   818d6:	2afd      	cmp	r2, #253	; 0xfd
   818d8:	d81d      	bhi.n	81916 <__aeabi_fmul+0x92>
   818da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   818de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   818e2:	bf08      	it	eq
   818e4:	f020 0001 	biceq.w	r0, r0, #1
   818e8:	4770      	bx	lr
   818ea:	f090 0f00 	teq	r0, #0
   818ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   818f2:	bf08      	it	eq
   818f4:	0249      	lsleq	r1, r1, #9
   818f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   818fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   818fe:	3a7f      	subs	r2, #127	; 0x7f
   81900:	bfc2      	ittt	gt
   81902:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8190a:	4770      	bxgt	lr
   8190c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81910:	f04f 0300 	mov.w	r3, #0
   81914:	3a01      	subs	r2, #1
   81916:	dc5d      	bgt.n	819d4 <__aeabi_fmul+0x150>
   81918:	f112 0f19 	cmn.w	r2, #25
   8191c:	bfdc      	itt	le
   8191e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81922:	4770      	bxle	lr
   81924:	f1c2 0200 	rsb	r2, r2, #0
   81928:	0041      	lsls	r1, r0, #1
   8192a:	fa21 f102 	lsr.w	r1, r1, r2
   8192e:	f1c2 0220 	rsb	r2, r2, #32
   81932:	fa00 fc02 	lsl.w	ip, r0, r2
   81936:	ea5f 0031 	movs.w	r0, r1, rrx
   8193a:	f140 0000 	adc.w	r0, r0, #0
   8193e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81942:	bf08      	it	eq
   81944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81948:	4770      	bx	lr
   8194a:	f092 0f00 	teq	r2, #0
   8194e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81952:	bf02      	ittt	eq
   81954:	0040      	lsleq	r0, r0, #1
   81956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8195a:	3a01      	subeq	r2, #1
   8195c:	d0f9      	beq.n	81952 <__aeabi_fmul+0xce>
   8195e:	ea40 000c 	orr.w	r0, r0, ip
   81962:	f093 0f00 	teq	r3, #0
   81966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8196a:	bf02      	ittt	eq
   8196c:	0049      	lsleq	r1, r1, #1
   8196e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81972:	3b01      	subeq	r3, #1
   81974:	d0f9      	beq.n	8196a <__aeabi_fmul+0xe6>
   81976:	ea41 010c 	orr.w	r1, r1, ip
   8197a:	e78f      	b.n	8189c <__aeabi_fmul+0x18>
   8197c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81980:	ea92 0f0c 	teq	r2, ip
   81984:	bf18      	it	ne
   81986:	ea93 0f0c 	teqne	r3, ip
   8198a:	d00a      	beq.n	819a2 <__aeabi_fmul+0x11e>
   8198c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81990:	bf18      	it	ne
   81992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81996:	d1d8      	bne.n	8194a <__aeabi_fmul+0xc6>
   81998:	ea80 0001 	eor.w	r0, r0, r1
   8199c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   819a0:	4770      	bx	lr
   819a2:	f090 0f00 	teq	r0, #0
   819a6:	bf17      	itett	ne
   819a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   819ac:	4608      	moveq	r0, r1
   819ae:	f091 0f00 	teqne	r1, #0
   819b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   819b6:	d014      	beq.n	819e2 <__aeabi_fmul+0x15e>
   819b8:	ea92 0f0c 	teq	r2, ip
   819bc:	d101      	bne.n	819c2 <__aeabi_fmul+0x13e>
   819be:	0242      	lsls	r2, r0, #9
   819c0:	d10f      	bne.n	819e2 <__aeabi_fmul+0x15e>
   819c2:	ea93 0f0c 	teq	r3, ip
   819c6:	d103      	bne.n	819d0 <__aeabi_fmul+0x14c>
   819c8:	024b      	lsls	r3, r1, #9
   819ca:	bf18      	it	ne
   819cc:	4608      	movne	r0, r1
   819ce:	d108      	bne.n	819e2 <__aeabi_fmul+0x15e>
   819d0:	ea80 0001 	eor.w	r0, r0, r1
   819d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   819d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   819dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   819e0:	4770      	bx	lr
   819e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   819e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   819ea:	4770      	bx	lr

000819ec <__aeabi_fdiv>:
   819ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
   819f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   819f4:	bf1e      	ittt	ne
   819f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   819fa:	ea92 0f0c 	teqne	r2, ip
   819fe:	ea93 0f0c 	teqne	r3, ip
   81a02:	d069      	beq.n	81ad8 <__aeabi_fdiv+0xec>
   81a04:	eba2 0203 	sub.w	r2, r2, r3
   81a08:	ea80 0c01 	eor.w	ip, r0, r1
   81a0c:	0249      	lsls	r1, r1, #9
   81a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81a12:	d037      	beq.n	81a84 <__aeabi_fdiv+0x98>
   81a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81a24:	428b      	cmp	r3, r1
   81a26:	bf38      	it	cc
   81a28:	005b      	lslcc	r3, r3, #1
   81a2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81a2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81a32:	428b      	cmp	r3, r1
   81a34:	bf24      	itt	cs
   81a36:	1a5b      	subcs	r3, r3, r1
   81a38:	ea40 000c 	orrcs.w	r0, r0, ip
   81a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81a40:	bf24      	itt	cs
   81a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81a4e:	bf24      	itt	cs
   81a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81a5c:	bf24      	itt	cs
   81a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81a66:	011b      	lsls	r3, r3, #4
   81a68:	bf18      	it	ne
   81a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81a6e:	d1e0      	bne.n	81a32 <__aeabi_fdiv+0x46>
   81a70:	2afd      	cmp	r2, #253	; 0xfd
   81a72:	f63f af50 	bhi.w	81916 <__aeabi_fmul+0x92>
   81a76:	428b      	cmp	r3, r1
   81a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81a7c:	bf08      	it	eq
   81a7e:	f020 0001 	biceq.w	r0, r0, #1
   81a82:	4770      	bx	lr
   81a84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81a8c:	327f      	adds	r2, #127	; 0x7f
   81a8e:	bfc2      	ittt	gt
   81a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81a98:	4770      	bxgt	lr
   81a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a9e:	f04f 0300 	mov.w	r3, #0
   81aa2:	3a01      	subs	r2, #1
   81aa4:	e737      	b.n	81916 <__aeabi_fmul+0x92>
   81aa6:	f092 0f00 	teq	r2, #0
   81aaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81aae:	bf02      	ittt	eq
   81ab0:	0040      	lsleq	r0, r0, #1
   81ab2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81ab6:	3a01      	subeq	r2, #1
   81ab8:	d0f9      	beq.n	81aae <__aeabi_fdiv+0xc2>
   81aba:	ea40 000c 	orr.w	r0, r0, ip
   81abe:	f093 0f00 	teq	r3, #0
   81ac2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81ac6:	bf02      	ittt	eq
   81ac8:	0049      	lsleq	r1, r1, #1
   81aca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81ace:	3b01      	subeq	r3, #1
   81ad0:	d0f9      	beq.n	81ac6 <__aeabi_fdiv+0xda>
   81ad2:	ea41 010c 	orr.w	r1, r1, ip
   81ad6:	e795      	b.n	81a04 <__aeabi_fdiv+0x18>
   81ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81adc:	ea92 0f0c 	teq	r2, ip
   81ae0:	d108      	bne.n	81af4 <__aeabi_fdiv+0x108>
   81ae2:	0242      	lsls	r2, r0, #9
   81ae4:	f47f af7d 	bne.w	819e2 <__aeabi_fmul+0x15e>
   81ae8:	ea93 0f0c 	teq	r3, ip
   81aec:	f47f af70 	bne.w	819d0 <__aeabi_fmul+0x14c>
   81af0:	4608      	mov	r0, r1
   81af2:	e776      	b.n	819e2 <__aeabi_fmul+0x15e>
   81af4:	ea93 0f0c 	teq	r3, ip
   81af8:	d104      	bne.n	81b04 <__aeabi_fdiv+0x118>
   81afa:	024b      	lsls	r3, r1, #9
   81afc:	f43f af4c 	beq.w	81998 <__aeabi_fmul+0x114>
   81b00:	4608      	mov	r0, r1
   81b02:	e76e      	b.n	819e2 <__aeabi_fmul+0x15e>
   81b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81b08:	bf18      	it	ne
   81b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81b0e:	d1ca      	bne.n	81aa6 <__aeabi_fdiv+0xba>
   81b10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81b14:	f47f af5c 	bne.w	819d0 <__aeabi_fmul+0x14c>
   81b18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81b1c:	f47f af3c 	bne.w	81998 <__aeabi_fmul+0x114>
   81b20:	e75f      	b.n	819e2 <__aeabi_fmul+0x15e>
   81b22:	bf00      	nop

00081b24 <__gesf2>:
   81b24:	f04f 3cff 	mov.w	ip, #4294967295
   81b28:	e006      	b.n	81b38 <__cmpsf2+0x4>
   81b2a:	bf00      	nop

00081b2c <__lesf2>:
   81b2c:	f04f 0c01 	mov.w	ip, #1
   81b30:	e002      	b.n	81b38 <__cmpsf2+0x4>
   81b32:	bf00      	nop

00081b34 <__cmpsf2>:
   81b34:	f04f 0c01 	mov.w	ip, #1
   81b38:	f84d cd04 	str.w	ip, [sp, #-4]!
   81b3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81b40:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81b44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81b48:	bf18      	it	ne
   81b4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81b4e:	d011      	beq.n	81b74 <__cmpsf2+0x40>
   81b50:	b001      	add	sp, #4
   81b52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81b56:	bf18      	it	ne
   81b58:	ea90 0f01 	teqne	r0, r1
   81b5c:	bf58      	it	pl
   81b5e:	ebb2 0003 	subspl.w	r0, r2, r3
   81b62:	bf88      	it	hi
   81b64:	17c8      	asrhi	r0, r1, #31
   81b66:	bf38      	it	cc
   81b68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81b6c:	bf18      	it	ne
   81b6e:	f040 0001 	orrne.w	r0, r0, #1
   81b72:	4770      	bx	lr
   81b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81b78:	d102      	bne.n	81b80 <__cmpsf2+0x4c>
   81b7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81b7e:	d105      	bne.n	81b8c <__cmpsf2+0x58>
   81b80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81b84:	d1e4      	bne.n	81b50 <__cmpsf2+0x1c>
   81b86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81b8a:	d0e1      	beq.n	81b50 <__cmpsf2+0x1c>
   81b8c:	f85d 0b04 	ldr.w	r0, [sp], #4
   81b90:	4770      	bx	lr
   81b92:	bf00      	nop

00081b94 <__aeabi_cfrcmple>:
   81b94:	4684      	mov	ip, r0
   81b96:	4608      	mov	r0, r1
   81b98:	4661      	mov	r1, ip
   81b9a:	e7ff      	b.n	81b9c <__aeabi_cfcmpeq>

00081b9c <__aeabi_cfcmpeq>:
   81b9c:	b50f      	push	{r0, r1, r2, r3, lr}
   81b9e:	f7ff ffc9 	bl	81b34 <__cmpsf2>
   81ba2:	2800      	cmp	r0, #0
   81ba4:	bf48      	it	mi
   81ba6:	f110 0f00 	cmnmi.w	r0, #0
   81baa:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081bac <__aeabi_fcmpeq>:
   81bac:	f84d ed08 	str.w	lr, [sp, #-8]!
   81bb0:	f7ff fff4 	bl	81b9c <__aeabi_cfcmpeq>
   81bb4:	bf0c      	ite	eq
   81bb6:	2001      	moveq	r0, #1
   81bb8:	2000      	movne	r0, #0
   81bba:	f85d fb08 	ldr.w	pc, [sp], #8
   81bbe:	bf00      	nop

00081bc0 <__aeabi_fcmplt>:
   81bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81bc4:	f7ff ffea 	bl	81b9c <__aeabi_cfcmpeq>
   81bc8:	bf34      	ite	cc
   81bca:	2001      	movcc	r0, #1
   81bcc:	2000      	movcs	r0, #0
   81bce:	f85d fb08 	ldr.w	pc, [sp], #8
   81bd2:	bf00      	nop

00081bd4 <__aeabi_fcmple>:
   81bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81bd8:	f7ff ffe0 	bl	81b9c <__aeabi_cfcmpeq>
   81bdc:	bf94      	ite	ls
   81bde:	2001      	movls	r0, #1
   81be0:	2000      	movhi	r0, #0
   81be2:	f85d fb08 	ldr.w	pc, [sp], #8
   81be6:	bf00      	nop

00081be8 <__aeabi_fcmpge>:
   81be8:	f84d ed08 	str.w	lr, [sp, #-8]!
   81bec:	f7ff ffd2 	bl	81b94 <__aeabi_cfrcmple>
   81bf0:	bf94      	ite	ls
   81bf2:	2001      	movls	r0, #1
   81bf4:	2000      	movhi	r0, #0
   81bf6:	f85d fb08 	ldr.w	pc, [sp], #8
   81bfa:	bf00      	nop

00081bfc <__aeabi_fcmpgt>:
   81bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   81c00:	f7ff ffc8 	bl	81b94 <__aeabi_cfrcmple>
   81c04:	bf34      	ite	cc
   81c06:	2001      	movcc	r0, #1
   81c08:	2000      	movcs	r0, #0
   81c0a:	f85d fb08 	ldr.w	pc, [sp], #8
   81c0e:	bf00      	nop

00081c10 <__aeabi_f2iz>:
   81c10:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81c14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81c18:	d30f      	bcc.n	81c3a <__aeabi_f2iz+0x2a>
   81c1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81c1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81c22:	d90d      	bls.n	81c40 <__aeabi_f2iz+0x30>
   81c24:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81c2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81c30:	fa23 f002 	lsr.w	r0, r3, r2
   81c34:	bf18      	it	ne
   81c36:	4240      	negne	r0, r0
   81c38:	4770      	bx	lr
   81c3a:	f04f 0000 	mov.w	r0, #0
   81c3e:	4770      	bx	lr
   81c40:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81c44:	d101      	bne.n	81c4a <__aeabi_f2iz+0x3a>
   81c46:	0242      	lsls	r2, r0, #9
   81c48:	d105      	bne.n	81c56 <__aeabi_f2iz+0x46>
   81c4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81c4e:	bf08      	it	eq
   81c50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81c54:	4770      	bx	lr
   81c56:	f04f 0000 	mov.w	r0, #0
   81c5a:	4770      	bx	lr

00081c5c <__aeabi_f2uiz>:
   81c5c:	0042      	lsls	r2, r0, #1
   81c5e:	d20e      	bcs.n	81c7e <__aeabi_f2uiz+0x22>
   81c60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81c64:	d30b      	bcc.n	81c7e <__aeabi_f2uiz+0x22>
   81c66:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81c6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81c6e:	d409      	bmi.n	81c84 <__aeabi_f2uiz+0x28>
   81c70:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81c78:	fa23 f002 	lsr.w	r0, r3, r2
   81c7c:	4770      	bx	lr
   81c7e:	f04f 0000 	mov.w	r0, #0
   81c82:	4770      	bx	lr
   81c84:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81c88:	d101      	bne.n	81c8e <__aeabi_f2uiz+0x32>
   81c8a:	0242      	lsls	r2, r0, #9
   81c8c:	d102      	bne.n	81c94 <__aeabi_f2uiz+0x38>
   81c8e:	f04f 30ff 	mov.w	r0, #4294967295
   81c92:	4770      	bx	lr
   81c94:	f04f 0000 	mov.w	r0, #0
   81c98:	4770      	bx	lr
   81c9a:	bf00      	nop

00081c9c <__libc_init_array>:
   81c9c:	b570      	push	{r4, r5, r6, lr}
   81c9e:	4e0f      	ldr	r6, [pc, #60]	; (81cdc <__libc_init_array+0x40>)
   81ca0:	4d0f      	ldr	r5, [pc, #60]	; (81ce0 <__libc_init_array+0x44>)
   81ca2:	1b76      	subs	r6, r6, r5
   81ca4:	10b6      	asrs	r6, r6, #2
   81ca6:	bf18      	it	ne
   81ca8:	2400      	movne	r4, #0
   81caa:	d005      	beq.n	81cb8 <__libc_init_array+0x1c>
   81cac:	3401      	adds	r4, #1
   81cae:	f855 3b04 	ldr.w	r3, [r5], #4
   81cb2:	4798      	blx	r3
   81cb4:	42a6      	cmp	r6, r4
   81cb6:	d1f9      	bne.n	81cac <__libc_init_array+0x10>
   81cb8:	4e0a      	ldr	r6, [pc, #40]	; (81ce4 <__libc_init_array+0x48>)
   81cba:	4d0b      	ldr	r5, [pc, #44]	; (81ce8 <__libc_init_array+0x4c>)
   81cbc:	f000 f90a 	bl	81ed4 <_init>
   81cc0:	1b76      	subs	r6, r6, r5
   81cc2:	10b6      	asrs	r6, r6, #2
   81cc4:	bf18      	it	ne
   81cc6:	2400      	movne	r4, #0
   81cc8:	d006      	beq.n	81cd8 <__libc_init_array+0x3c>
   81cca:	3401      	adds	r4, #1
   81ccc:	f855 3b04 	ldr.w	r3, [r5], #4
   81cd0:	4798      	blx	r3
   81cd2:	42a6      	cmp	r6, r4
   81cd4:	d1f9      	bne.n	81cca <__libc_init_array+0x2e>
   81cd6:	bd70      	pop	{r4, r5, r6, pc}
   81cd8:	bd70      	pop	{r4, r5, r6, pc}
   81cda:	bf00      	nop
   81cdc:	00081ee0 	.word	0x00081ee0
   81ce0:	00081ee0 	.word	0x00081ee0
   81ce4:	00081ee8 	.word	0x00081ee8
   81ce8:	00081ee0 	.word	0x00081ee0

00081cec <register_fini>:
   81cec:	4b02      	ldr	r3, [pc, #8]	; (81cf8 <register_fini+0xc>)
   81cee:	b113      	cbz	r3, 81cf6 <register_fini+0xa>
   81cf0:	4802      	ldr	r0, [pc, #8]	; (81cfc <register_fini+0x10>)
   81cf2:	f000 b805 	b.w	81d00 <atexit>
   81cf6:	4770      	bx	lr
   81cf8:	00000000 	.word	0x00000000
   81cfc:	00081d0d 	.word	0x00081d0d

00081d00 <atexit>:
   81d00:	2300      	movs	r3, #0
   81d02:	4601      	mov	r1, r0
   81d04:	461a      	mov	r2, r3
   81d06:	4618      	mov	r0, r3
   81d08:	f000 b81e 	b.w	81d48 <__register_exitproc>

00081d0c <__libc_fini_array>:
   81d0c:	b538      	push	{r3, r4, r5, lr}
   81d0e:	4c0a      	ldr	r4, [pc, #40]	; (81d38 <__libc_fini_array+0x2c>)
   81d10:	4d0a      	ldr	r5, [pc, #40]	; (81d3c <__libc_fini_array+0x30>)
   81d12:	1b64      	subs	r4, r4, r5
   81d14:	10a4      	asrs	r4, r4, #2
   81d16:	d00a      	beq.n	81d2e <__libc_fini_array+0x22>
   81d18:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81d1c:	3b01      	subs	r3, #1
   81d1e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81d22:	3c01      	subs	r4, #1
   81d24:	f855 3904 	ldr.w	r3, [r5], #-4
   81d28:	4798      	blx	r3
   81d2a:	2c00      	cmp	r4, #0
   81d2c:	d1f9      	bne.n	81d22 <__libc_fini_array+0x16>
   81d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81d32:	f000 b8d9 	b.w	81ee8 <_fini>
   81d36:	bf00      	nop
   81d38:	00081ef8 	.word	0x00081ef8
   81d3c:	00081ef4 	.word	0x00081ef4

00081d40 <__retarget_lock_acquire_recursive>:
   81d40:	4770      	bx	lr
   81d42:	bf00      	nop

00081d44 <__retarget_lock_release_recursive>:
   81d44:	4770      	bx	lr
   81d46:	bf00      	nop

00081d48 <__register_exitproc>:
   81d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81d4c:	4d2c      	ldr	r5, [pc, #176]	; (81e00 <__register_exitproc+0xb8>)
   81d4e:	4606      	mov	r6, r0
   81d50:	6828      	ldr	r0, [r5, #0]
   81d52:	4698      	mov	r8, r3
   81d54:	460f      	mov	r7, r1
   81d56:	4691      	mov	r9, r2
   81d58:	f7ff fff2 	bl	81d40 <__retarget_lock_acquire_recursive>
   81d5c:	4b29      	ldr	r3, [pc, #164]	; (81e04 <__register_exitproc+0xbc>)
   81d5e:	681c      	ldr	r4, [r3, #0]
   81d60:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81d64:	2b00      	cmp	r3, #0
   81d66:	d03e      	beq.n	81de6 <__register_exitproc+0x9e>
   81d68:	685a      	ldr	r2, [r3, #4]
   81d6a:	2a1f      	cmp	r2, #31
   81d6c:	dc1c      	bgt.n	81da8 <__register_exitproc+0x60>
   81d6e:	f102 0e01 	add.w	lr, r2, #1
   81d72:	b176      	cbz	r6, 81d92 <__register_exitproc+0x4a>
   81d74:	2101      	movs	r1, #1
   81d76:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81d7a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81d7e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81d82:	4091      	lsls	r1, r2
   81d84:	4308      	orrs	r0, r1
   81d86:	2e02      	cmp	r6, #2
   81d88:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81d8c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81d90:	d023      	beq.n	81dda <__register_exitproc+0x92>
   81d92:	3202      	adds	r2, #2
   81d94:	f8c3 e004 	str.w	lr, [r3, #4]
   81d98:	6828      	ldr	r0, [r5, #0]
   81d9a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81d9e:	f7ff ffd1 	bl	81d44 <__retarget_lock_release_recursive>
   81da2:	2000      	movs	r0, #0
   81da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81da8:	4b17      	ldr	r3, [pc, #92]	; (81e08 <__register_exitproc+0xc0>)
   81daa:	b30b      	cbz	r3, 81df0 <__register_exitproc+0xa8>
   81dac:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81db0:	f3af 8000 	nop.w
   81db4:	4603      	mov	r3, r0
   81db6:	b1d8      	cbz	r0, 81df0 <__register_exitproc+0xa8>
   81db8:	2000      	movs	r0, #0
   81dba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81dbe:	f04f 0e01 	mov.w	lr, #1
   81dc2:	6058      	str	r0, [r3, #4]
   81dc4:	6019      	str	r1, [r3, #0]
   81dc6:	4602      	mov	r2, r0
   81dc8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81dcc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81dd0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81dd4:	2e00      	cmp	r6, #0
   81dd6:	d0dc      	beq.n	81d92 <__register_exitproc+0x4a>
   81dd8:	e7cc      	b.n	81d74 <__register_exitproc+0x2c>
   81dda:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81dde:	4301      	orrs	r1, r0
   81de0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81de4:	e7d5      	b.n	81d92 <__register_exitproc+0x4a>
   81de6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81dea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81dee:	e7bb      	b.n	81d68 <__register_exitproc+0x20>
   81df0:	6828      	ldr	r0, [r5, #0]
   81df2:	f7ff ffa7 	bl	81d44 <__retarget_lock_release_recursive>
   81df6:	f04f 30ff 	mov.w	r0, #4294967295
   81dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81dfe:	bf00      	nop
   81e00:	20000430 	.word	0x20000430
   81e04:	00081ed0 	.word	0x00081ed0
   81e08:	00000000 	.word	0x00000000
   81e0c:	304e4143 	.word	0x304e4143
   81e10:	73656d20 	.word	0x73656d20
   81e14:	65676173 	.word	0x65676173
   81e18:	72726120 	.word	0x72726120
   81e1c:	64657669 	.word	0x64657669
   81e20:	206e6920 	.word	0x206e6920
   81e24:	2d6e6f6e 	.word	0x2d6e6f6e
   81e28:	64657375 	.word	0x64657375
   81e2c:	69616d20 	.word	0x69616d20
   81e30:	786f626c 	.word	0x786f626c
   81e34:	00000d0a 	.word	0x00000d0a
   81e38:	4f525245 	.word	0x4f525245
   81e3c:	43203a52 	.word	0x43203a52
   81e40:	6e6e6168 	.word	0x6e6e6168
   81e44:	6e206c65 	.word	0x6e206c65
   81e48:	6520746f 	.word	0x6520746f
   81e4c:	6c62616e 	.word	0x6c62616e
   81e50:	00006465 	.word	0x00006465
   81e54:	74747562 	.word	0x74747562
   81e58:	705f6e6f 	.word	0x705f6e6f
   81e5c:	73736572 	.word	0x73736572
   81e60:	000d6465 	.word	0x000d6465
   81e64:	4f525245 	.word	0x4f525245
   81e68:	6d203a52 	.word	0x6d203a52
   81e6c:	726f746f 	.word	0x726f746f
   81e70:	696e6920 	.word	0x696e6920
   81e74:	61662074 	.word	0x61662074
   81e78:	64656c69 	.word	0x64656c69
   81e7c:	00000000 	.word	0x00000000
   81e80:	6e695f43 	.word	0x6e695f43
   81e84:	25203a70 	.word	0x25203a70
   81e88:	00000964 	.word	0x00000964
   81e8c:	6f727245 	.word	0x6f727245
   81e90:	25203a72 	.word	0x25203a72
   81e94:	00000d64 	.word	0x00000d64
   81e98:	6c756e28 	.word	0x6c756e28
   81e9c:	0000296c 	.word	0x0000296c
   81ea0:	204d5750 	.word	0x204d5750
   81ea4:	74696e69 	.word	0x74696e69
   81ea8:	0d2e2e2e 	.word	0x0d2e2e2e
   81eac:	00000000 	.word	0x00000000
   81eb0:	3a525245 	.word	0x3a525245
   81eb4:	52415520 	.word	0x52415520
   81eb8:	58522054 	.word	0x58522054
   81ebc:	66756220 	.word	0x66756220
   81ec0:	20726566 	.word	0x20726566
   81ec4:	66207369 	.word	0x66207369
   81ec8:	0a6c6c75 	.word	0x0a6c6c75
   81ecc:	0000000d 	.word	0x0000000d

00081ed0 <_global_impure_ptr>:
   81ed0:	20000008                                ... 

00081ed4 <_init>:
   81ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81ed6:	bf00      	nop
   81ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81eda:	bc08      	pop	{r3}
   81edc:	469e      	mov	lr, r3
   81ede:	4770      	bx	lr

00081ee0 <__init_array_start>:
   81ee0:	00081ced 	.word	0x00081ced

00081ee4 <__frame_dummy_init_array_entry>:
   81ee4:	00080119                                ....

00081ee8 <_fini>:
   81ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81eea:	bf00      	nop
   81eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81eee:	bc08      	pop	{r3}
   81ef0:	469e      	mov	lr, r3
   81ef2:	4770      	bx	lr

00081ef4 <__fini_array_start>:
   81ef4:	000800f5 	.word	0x000800f5
