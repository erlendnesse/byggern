
node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d40  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081d40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  20000434  00082174  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004e4  00082224  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008e8  00082628  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008a98  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001760  00000000  00000000  00028f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000012dd  00000000  00000000  0002a6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000258  00000000  00000000  0002b98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0002bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013389  00000000  00000000  0002bd93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005460  00000000  00000000  0003f11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000554d3  00000000  00000000  0004457c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000090c  00000000  00000000  00099a50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 08 00 20 11 04 08 00 0d 04 08 00 0d 04 08 00     ... ............
   80010:	0d 04 08 00 0d 04 08 00 0d 04 08 00 00 00 00 00     ................
	...
   8002c:	0d 04 08 00 0d 04 08 00 00 00 00 00 0d 04 08 00     ................
   8003c:	c5 03 08 00 0d 04 08 00 0d 04 08 00 0d 04 08 00     ................
   8004c:	0d 04 08 00 0d 04 08 00 0d 04 08 00 0d 04 08 00     ................
   8005c:	0d 04 08 00 b1 0c 08 00 0d 04 08 00 00 00 00 00     ................
   8006c:	0d 04 08 00 0d 04 08 00 0d 04 08 00 0d 04 08 00     ................
	...
   80084:	0d 04 08 00 0d 04 08 00 0d 04 08 00 0d 04 08 00     ................
   80094:	0d 04 08 00 0d 04 08 00 0d 04 08 00 0d 04 08 00     ................
   800a4:	00 00 00 00 0d 04 08 00 0d 04 08 00 0d 04 08 00     ................
   800b4:	0d 04 08 00 0d 04 08 00 0d 04 08 00 0d 04 08 00     ................
   800c4:	0d 04 08 00 0d 04 08 00 0d 04 08 00 0d 04 08 00     ................
   800d4:	0d 04 08 00 0d 04 08 00 0d 04 08 00 0d 04 08 00     ................
   800e4:	0d 04 08 00 0d 04 08 00 d9 02 08 00 0d 04 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081d40 	.word	0x00081d40

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081d40 	.word	0x00081d40
   80154:	20000438 	.word	0x20000438
   80158:	00081d40 	.word	0x00081d40
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d8:	b538      	push	{r3, r4, r5, lr}
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802da:	4b1c      	ldr	r3, [pc, #112]	; (8034c <CAN0_Handler+0x74>)
   802dc:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802de:	f014 0f06 	tst.w	r4, #6
   802e2:	d027      	beq.n	80334 <CAN0_Handler+0x5c>
	{
		//CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e4:	f014 0f02 	tst.w	r4, #2
   802e8:	d10e      	bne.n	80308 <CAN0_Handler+0x30>
			if(message.id == 1) { //id of joystick msg
				pwm_set_duty_cycle(message.data[0]);
				//motor_run(message.data[0]);
			}
		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802ea:	f014 0f04 	tst.w	r4, #4
   802ee:	d017      	beq.n	80320 <CAN0_Handler+0x48>
		
		{
			can_receive(&message, 2);
   802f0:	4d17      	ldr	r5, [pc, #92]	; (80350 <CAN0_Handler+0x78>)
   802f2:	2102      	movs	r1, #2
   802f4:	4628      	mov	r0, r5
   802f6:	4b17      	ldr	r3, [pc, #92]	; (80354 <CAN0_Handler+0x7c>)
   802f8:	4798      	blx	r3
			if(message.id == 1) { //id of joystick msg
   802fa:	882b      	ldrh	r3, [r5, #0]
   802fc:	2b01      	cmp	r3, #1
   802fe:	d112      	bne.n	80326 <CAN0_Handler+0x4e>
				pwm_set_duty_cycle(message.data[0]);
   80300:	78e8      	ldrb	r0, [r5, #3]
   80302:	4b15      	ldr	r3, [pc, #84]	; (80358 <CAN0_Handler+0x80>)
   80304:	4798      	blx	r3
   80306:	e00e      	b.n	80326 <CAN0_Handler+0x4e>
			can_receive(&message, 1);
   80308:	4d11      	ldr	r5, [pc, #68]	; (80350 <CAN0_Handler+0x78>)
   8030a:	2101      	movs	r1, #1
   8030c:	4628      	mov	r0, r5
   8030e:	4b11      	ldr	r3, [pc, #68]	; (80354 <CAN0_Handler+0x7c>)
   80310:	4798      	blx	r3
			if(message.id == 1) { //id of joystick msg
   80312:	882b      	ldrh	r3, [r5, #0]
   80314:	2b01      	cmp	r3, #1
   80316:	d106      	bne.n	80326 <CAN0_Handler+0x4e>
				pwm_set_duty_cycle(message.data[0]);
   80318:	78e8      	ldrb	r0, [r5, #3]
   8031a:	4b0f      	ldr	r3, [pc, #60]	; (80358 <CAN0_Handler+0x80>)
   8031c:	4798      	blx	r3
   8031e:	e002      	b.n	80326 <CAN0_Handler+0x4e>
				//motor_run(message.data[0]);
			}
		}
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80320:	480e      	ldr	r0, [pc, #56]	; (8035c <CAN0_Handler+0x84>)
   80322:	4b0f      	ldr	r3, [pc, #60]	; (80360 <CAN0_Handler+0x88>)
   80324:	4798      	blx	r3
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80326:	2300      	movs	r3, #0
   80328:	e000      	b.n	8032c <CAN0_Handler+0x54>
   8032a:	3301      	adds	r3, #1
   8032c:	4a08      	ldr	r2, [pc, #32]	; (80350 <CAN0_Handler+0x78>)
   8032e:	7892      	ldrb	r2, [r2, #2]
   80330:	4293      	cmp	r3, r2
   80332:	dbfa      	blt.n	8032a <CAN0_Handler+0x52>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80334:	f014 0f01 	tst.w	r4, #1
   80338:	d002      	beq.n	80340 <CAN0_Handler+0x68>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8033a:	2201      	movs	r2, #1
   8033c:	4b03      	ldr	r3, [pc, #12]	; (8034c <CAN0_Handler+0x74>)
   8033e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80340:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80344:	4b07      	ldr	r3, [pc, #28]	; (80364 <CAN0_Handler+0x8c>)
   80346:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8034a:	bd38      	pop	{r3, r4, r5, pc}
   8034c:	400b4000 	.word	0x400b4000
   80350:	20000454 	.word	0x20000454
   80354:	00080255 	.word	0x00080255
   80358:	00080ba9 	.word	0x00080ba9
   8035c:	00081c50 	.word	0x00081c50
   80360:	00080b0d 	.word	0x00080b0d
   80364:	e000e100 	.word	0xe000e100

00080368 <dac_init>:
 */ 
#include "dac.h"
#include "sam.h"
#include <stdio.h>

int dac_init() {
   80368:	b508      	push	{r3, lr}
	//free running mode, enable channel an write data in DACC conversion data register
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1 | DACC_MR_STARTUP_16; //Set startup time if not working?
   8036a:	4b12      	ldr	r3, [pc, #72]	; (803b4 <dac_init+0x4c>)
   8036c:	685a      	ldr	r2, [r3, #4]
   8036e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80372:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80376:	605a      	str	r2, [r3, #4]
	
	//enable channel 1 
	DACC->DACC_CHER |= DACC_CHER_CH1;
   80378:	691a      	ldr	r2, [r3, #16]
   8037a:	f042 0202 	orr.w	r2, r2, #2
   8037e:	611a      	str	r2, [r3, #16]
	
	//enable clock for DAC
	PMC->PMC_PCR |= (1<<28) | (38);
   80380:	490d      	ldr	r1, [pc, #52]	; (803b8 <dac_init+0x50>)
   80382:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
   80386:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   8038a:	f042 0226 	orr.w	r2, r2, #38	; 0x26
   8038e:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
	
	// enable power adc 
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   80392:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   80396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8039a:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	
	if (!(DACC->DACC_CHSR)) {
   8039e:	699b      	ldr	r3, [r3, #24]
   803a0:	b10b      	cbz	r3, 803a6 <dac_init+0x3e>
		printf("ERROR: Channel not enabled");
		return -1;
	}
	return 0;
   803a2:	2000      	movs	r0, #0
}
   803a4:	bd08      	pop	{r3, pc}
		printf("ERROR: Channel not enabled");
   803a6:	4805      	ldr	r0, [pc, #20]	; (803bc <dac_init+0x54>)
   803a8:	4b05      	ldr	r3, [pc, #20]	; (803c0 <dac_init+0x58>)
   803aa:	4798      	blx	r3
		return -1;
   803ac:	f04f 30ff 	mov.w	r0, #4294967295
   803b0:	bd08      	pop	{r3, pc}
   803b2:	bf00      	nop
   803b4:	400c8000 	.word	0x400c8000
   803b8:	400e0600 	.word	0x400e0600
   803bc:	00081c7c 	.word	0x00081c7c
   803c0:	00080b0d 	.word	0x00080b0d

000803c4 <SysTick_Handler>:
#include "sam.h"


volatile float milliseconds = 0;

void SysTick_Handler(void) {
   803c4:	b510      	push	{r4, lr}
	milliseconds++;
   803c6:	4c04      	ldr	r4, [pc, #16]	; (803d8 <SysTick_Handler+0x14>)
   803c8:	6820      	ldr	r0, [r4, #0]
   803ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   803ce:	4b03      	ldr	r3, [pc, #12]	; (803dc <SysTick_Handler+0x18>)
   803d0:	4798      	blx	r3
   803d2:	6020      	str	r0, [r4, #0]
   803d4:	bd10      	pop	{r4, pc}
   803d6:	bf00      	nop
   803d8:	20000450 	.word	0x20000450
   803dc:	000814f9 	.word	0x000814f9

000803e0 <delay_ms>:
}

void delay_ms(float ms) {
   803e0:	b538      	push	{r3, r4, r5, lr}
   803e2:	4605      	mov	r5, r0
	float start_time = milliseconds;
   803e4:	4b06      	ldr	r3, [pc, #24]	; (80400 <delay_ms+0x20>)
   803e6:	681c      	ldr	r4, [r3, #0]
	while ((milliseconds - start_time) < ms) {
   803e8:	4b05      	ldr	r3, [pc, #20]	; (80400 <delay_ms+0x20>)
   803ea:	6818      	ldr	r0, [r3, #0]
   803ec:	4621      	mov	r1, r4
   803ee:	4b05      	ldr	r3, [pc, #20]	; (80404 <delay_ms+0x24>)
   803f0:	4798      	blx	r3
   803f2:	4629      	mov	r1, r5
   803f4:	4b04      	ldr	r3, [pc, #16]	; (80408 <delay_ms+0x28>)
   803f6:	4798      	blx	r3
   803f8:	2800      	cmp	r0, #0
   803fa:	d1f5      	bne.n	803e8 <delay_ms+0x8>
		// You can add other tasks or code here; it won't block the delay
	}
   803fc:	bd38      	pop	{r3, r4, r5, pc}
   803fe:	bf00      	nop
   80400:	20000450 	.word	0x20000450
   80404:	000814f5 	.word	0x000814f5
   80408:	00081a45 	.word	0x00081a45

0008040c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8040c:	e7fe      	b.n	8040c <Dummy_Handler>
	...

00080410 <Reset_Handler>:
{
   80410:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80412:	4b11      	ldr	r3, [pc, #68]	; (80458 <Reset_Handler+0x48>)
   80414:	4a11      	ldr	r2, [pc, #68]	; (8045c <Reset_Handler+0x4c>)
   80416:	429a      	cmp	r2, r3
   80418:	d009      	beq.n	8042e <Reset_Handler+0x1e>
   8041a:	4b0f      	ldr	r3, [pc, #60]	; (80458 <Reset_Handler+0x48>)
   8041c:	4a0f      	ldr	r2, [pc, #60]	; (8045c <Reset_Handler+0x4c>)
   8041e:	e003      	b.n	80428 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80420:	6811      	ldr	r1, [r2, #0]
   80422:	6019      	str	r1, [r3, #0]
   80424:	3304      	adds	r3, #4
   80426:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80428:	490d      	ldr	r1, [pc, #52]	; (80460 <Reset_Handler+0x50>)
   8042a:	428b      	cmp	r3, r1
   8042c:	d3f8      	bcc.n	80420 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   8042e:	4b0d      	ldr	r3, [pc, #52]	; (80464 <Reset_Handler+0x54>)
   80430:	e002      	b.n	80438 <Reset_Handler+0x28>
                *pDest++ = 0;
   80432:	2200      	movs	r2, #0
   80434:	601a      	str	r2, [r3, #0]
   80436:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80438:	4a0b      	ldr	r2, [pc, #44]	; (80468 <Reset_Handler+0x58>)
   8043a:	4293      	cmp	r3, r2
   8043c:	d3f9      	bcc.n	80432 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8043e:	4b0b      	ldr	r3, [pc, #44]	; (8046c <Reset_Handler+0x5c>)
   80440:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80444:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80448:	4a09      	ldr	r2, [pc, #36]	; (80470 <Reset_Handler+0x60>)
   8044a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   8044c:	4b09      	ldr	r3, [pc, #36]	; (80474 <Reset_Handler+0x64>)
   8044e:	4798      	blx	r3
        main();
   80450:	4b09      	ldr	r3, [pc, #36]	; (80478 <Reset_Handler+0x68>)
   80452:	4798      	blx	r3
   80454:	e7fe      	b.n	80454 <Reset_Handler+0x44>
   80456:	bf00      	nop
   80458:	20000000 	.word	0x20000000
   8045c:	00081d40 	.word	0x00081d40
   80460:	20000434 	.word	0x20000434
   80464:	20000434 	.word	0x20000434
   80468:	200004e4 	.word	0x200004e4
   8046c:	00080000 	.word	0x00080000
   80470:	e000ed00 	.word	0xe000ed00
   80474:	00081ae1 	.word	0x00081ae1
   80478:	00080561 	.word	0x00080561

0008047c <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8047c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80480:	4a20      	ldr	r2, [pc, #128]	; (80504 <SystemInit+0x88>)
   80482:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80484:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80488:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   8048a:	4b1f      	ldr	r3, [pc, #124]	; (80508 <SystemInit+0x8c>)
   8048c:	6a1b      	ldr	r3, [r3, #32]
   8048e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80492:	d107      	bne.n	804a4 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80494:	4a1d      	ldr	r2, [pc, #116]	; (8050c <SystemInit+0x90>)
   80496:	4b1c      	ldr	r3, [pc, #112]	; (80508 <SystemInit+0x8c>)
   80498:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8049a:	4b1b      	ldr	r3, [pc, #108]	; (80508 <SystemInit+0x8c>)
   8049c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8049e:	f013 0f01 	tst.w	r3, #1
   804a2:	d0fa      	beq.n	8049a <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   804a4:	4a1a      	ldr	r2, [pc, #104]	; (80510 <SystemInit+0x94>)
   804a6:	4b18      	ldr	r3, [pc, #96]	; (80508 <SystemInit+0x8c>)
   804a8:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   804aa:	4b17      	ldr	r3, [pc, #92]	; (80508 <SystemInit+0x8c>)
   804ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   804b2:	d0fa      	beq.n	804aa <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   804b4:	4a14      	ldr	r2, [pc, #80]	; (80508 <SystemInit+0x8c>)
   804b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   804b8:	f023 0303 	bic.w	r3, r3, #3
   804bc:	f043 0301 	orr.w	r3, r3, #1
   804c0:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   804c2:	4b11      	ldr	r3, [pc, #68]	; (80508 <SystemInit+0x8c>)
   804c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c6:	f013 0f08 	tst.w	r3, #8
   804ca:	d0fa      	beq.n	804c2 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   804cc:	4a11      	ldr	r2, [pc, #68]	; (80514 <SystemInit+0x98>)
   804ce:	4b0e      	ldr	r3, [pc, #56]	; (80508 <SystemInit+0x8c>)
   804d0:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   804d2:	4b0d      	ldr	r3, [pc, #52]	; (80508 <SystemInit+0x8c>)
   804d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d6:	f013 0f02 	tst.w	r3, #2
   804da:	d0fa      	beq.n	804d2 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   804dc:	2211      	movs	r2, #17
   804de:	4b0a      	ldr	r3, [pc, #40]	; (80508 <SystemInit+0x8c>)
   804e0:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   804e2:	4b09      	ldr	r3, [pc, #36]	; (80508 <SystemInit+0x8c>)
   804e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804e6:	f013 0f08 	tst.w	r3, #8
   804ea:	d0fa      	beq.n	804e2 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   804ec:	2212      	movs	r2, #18
   804ee:	4b06      	ldr	r3, [pc, #24]	; (80508 <SystemInit+0x8c>)
   804f0:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   804f2:	4b05      	ldr	r3, [pc, #20]	; (80508 <SystemInit+0x8c>)
   804f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f6:	f013 0f08 	tst.w	r3, #8
   804fa:	d0fa      	beq.n	804f2 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   804fc:	4a06      	ldr	r2, [pc, #24]	; (80518 <SystemInit+0x9c>)
   804fe:	4b07      	ldr	r3, [pc, #28]	; (8051c <SystemInit+0xa0>)
   80500:	601a      	str	r2, [r3, #0]
   80502:	4770      	bx	lr
   80504:	400e0a00 	.word	0x400e0a00
   80508:	400e0600 	.word	0x400e0600
   8050c:	00370809 	.word	0x00370809
   80510:	01370809 	.word	0x01370809
   80514:	200d3f01 	.word	0x200d3f01
   80518:	0501bd00 	.word	0x0501bd00
   8051c:	20000000 	.word	0x20000000

00080520 <toggle_led>:
   return 0;
}


void toggle_led(uint8_t count) {
	if (count % 2) {
   80520:	f010 0f01 	tst.w	r0, #1
   80524:	d108      	bne.n	80538 <toggle_led+0x18>
		PIOA->PIO_CODR = PIO_PA19 ;
		PIOA->PIO_SODR |=  PIO_PA20;
	}
	else
	{
		PIOA->PIO_CODR = PIO_PA20;
   80526:	4b09      	ldr	r3, [pc, #36]	; (8054c <toggle_led+0x2c>)
   80528:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   8052c:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_SODR |=  PIO_PA19;
   8052e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80530:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80534:	631a      	str	r2, [r3, #48]	; 0x30
   80536:	4770      	bx	lr
		PIOA->PIO_CODR = PIO_PA19 ;
   80538:	4b04      	ldr	r3, [pc, #16]	; (8054c <toggle_led+0x2c>)
   8053a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8053e:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_SODR |=  PIO_PA20;
   80540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80542:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80546:	631a      	str	r2, [r3, #48]	; 0x30
   80548:	4770      	bx	lr
   8054a:	bf00      	nop
   8054c:	400e0e00 	.word	0x400e0e00

00080550 <led_init>:
	}
}

void led_init() {
	PIOA->PIO_OER |=  PIO_PA19 | PIO_PA20;
   80550:	4a02      	ldr	r2, [pc, #8]	; (8055c <led_init+0xc>)
   80552:	6913      	ldr	r3, [r2, #16]
   80554:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
   80558:	6113      	str	r3, [r2, #16]
   8055a:	4770      	bx	lr
   8055c:	400e0e00 	.word	0x400e0e00

00080560 <main>:
{
   80560:	b510      	push	{r4, lr}
   80562:	b082      	sub	sp, #8
    SystemInit();
   80564:	4b1e      	ldr	r3, [pc, #120]	; (805e0 <main+0x80>)
   80566:	4798      	blx	r3
	SysTick_Config(SystemCoreClock / 1000); //for the delay
   80568:	4b1e      	ldr	r3, [pc, #120]	; (805e4 <main+0x84>)
   8056a:	681b      	ldr	r3, [r3, #0]
   8056c:	4a1e      	ldr	r2, [pc, #120]	; (805e8 <main+0x88>)
   8056e:	fba2 2303 	umull	r2, r3, r2, r3
   80572:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
   80574:	3b01      	subs	r3, #1
   80576:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   8057a:	d209      	bcs.n	80590 <main+0x30>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
   8057c:	4a1b      	ldr	r2, [pc, #108]	; (805ec <main+0x8c>)
   8057e:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80580:	21f0      	movs	r1, #240	; 0xf0
   80582:	4b1b      	ldr	r3, [pc, #108]	; (805f0 <main+0x90>)
   80584:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
   80588:	2300      	movs	r3, #0
   8058a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8058c:	2307      	movs	r3, #7
   8058e:	6013      	str	r3, [r2, #0]
	configure_uart();
   80590:	4b18      	ldr	r3, [pc, #96]	; (805f4 <main+0x94>)
   80592:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15; //watchdog timer off
   80594:	4a18      	ldr	r2, [pc, #96]	; (805f8 <main+0x98>)
   80596:	6853      	ldr	r3, [r2, #4]
   80598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   8059c:	6053      	str	r3, [r2, #4]
	led_init();
   8059e:	4b17      	ldr	r3, [pc, #92]	; (805fc <main+0x9c>)
   805a0:	4798      	blx	r3
	PWM_init();
   805a2:	4b17      	ldr	r3, [pc, #92]	; (80600 <main+0xa0>)
   805a4:	4798      	blx	r3
	motor_init();
   805a6:	4b17      	ldr	r3, [pc, #92]	; (80604 <main+0xa4>)
   805a8:	4798      	blx	r3
	can_init_def_tx_rx_mb(can_br);
   805aa:	4817      	ldr	r0, [pc, #92]	; (80608 <main+0xa8>)
   805ac:	4b17      	ldr	r3, [pc, #92]	; (8060c <main+0xac>)
   805ae:	4798      	blx	r3
	pid_init(1,0.1,1,time_step,1404);
   805b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   805b4:	f240 537c 	movw	r3, #1404	; 0x57c
   805b8:	9300      	str	r3, [sp, #0]
   805ba:	4b15      	ldr	r3, [pc, #84]	; (80610 <main+0xb0>)
   805bc:	4602      	mov	r2, r0
   805be:	4915      	ldr	r1, [pc, #84]	; (80614 <main+0xb4>)
   805c0:	4c15      	ldr	r4, [pc, #84]	; (80618 <main+0xb8>)
   805c2:	47a0      	blx	r4
	uint8_t i = 0;
   805c4:	2400      	movs	r4, #0
		toggle_led(i);
   805c6:	4620      	mov	r0, r4
   805c8:	4b14      	ldr	r3, [pc, #80]	; (8061c <main+0xbc>)
   805ca:	4798      	blx	r3
		delay_ms(20);
   805cc:	4814      	ldr	r0, [pc, #80]	; (80620 <main+0xc0>)
   805ce:	4b15      	ldr	r3, [pc, #84]	; (80624 <main+0xc4>)
   805d0:	4798      	blx	r3
		motor_run(message.data[2]);
   805d2:	4b15      	ldr	r3, [pc, #84]	; (80628 <main+0xc8>)
   805d4:	7958      	ldrb	r0, [r3, #5]
   805d6:	4b15      	ldr	r3, [pc, #84]	; (8062c <main+0xcc>)
   805d8:	4798      	blx	r3
		i++;
   805da:	3401      	adds	r4, #1
   805dc:	b2e4      	uxtb	r4, r4
   805de:	e7f2      	b.n	805c6 <main+0x66>
   805e0:	0008047d 	.word	0x0008047d
   805e4:	20000000 	.word	0x20000000
   805e8:	10624dd3 	.word	0x10624dd3
   805ec:	e000e010 	.word	0xe000e010
   805f0:	e000ed00 	.word	0xe000ed00
   805f4:	00080c25 	.word	0x00080c25
   805f8:	400e1a50 	.word	0x400e1a50
   805fc:	00080551 	.word	0x00080551
   80600:	00080b31 	.word	0x00080b31
   80604:	00080631 	.word	0x00080631
   80608:	00143156 	.word	0x00143156
   8060c:	00080245 	.word	0x00080245
   80610:	3ca3d70a 	.word	0x3ca3d70a
   80614:	3dcccccd 	.word	0x3dcccccd
   80618:	000807a5 	.word	0x000807a5
   8061c:	00080521 	.word	0x00080521
   80620:	41a00000 	.word	0x41a00000
   80624:	000803e1 	.word	0x000803e1
   80628:	20000454 	.word	0x20000454
   8062c:	00080745 	.word	0x00080745

00080630 <motor_init>:
#include <stdio.h>
#include "delay.h"
#include "pid.h"
#include "can_interrupt.h"

int motor_init() {
   80630:	b510      	push	{r4, lr}
	int err = 0;
	err = dac_init();
   80632:	4b15      	ldr	r3, [pc, #84]	; (80688 <motor_init+0x58>)
   80634:	4798      	blx	r3
	if (err) {
   80636:	bb00      	cbnz	r0, 8067a <motor_init+0x4a>
   80638:	4604      	mov	r4, r0
	}
	
	//PMC->PMC_PCR = ID_PIOC;
	//PMC->PMC_PCR = ID_PIOD;
	
	PIOC->PIO_PER |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC7 | PIO_PC8;
   8063a:	4b14      	ldr	r3, [pc, #80]	; (8068c <motor_init+0x5c>)
   8063c:	681a      	ldr	r2, [r3, #0]
   8063e:	f442 72df 	orr.w	r2, r2, #446	; 0x1be
   80642:	601a      	str	r2, [r3, #0]
	PIOC->PIO_ODR |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC7 | PIO_PC8;
   80644:	695a      	ldr	r2, [r3, #20]
   80646:	f442 72df 	orr.w	r2, r2, #446	; 0x1be
   8064a:	615a      	str	r2, [r3, #20]
	
 	PIOD->PIO_PER |= PIO_PD0 | PIO_PD1 | PIO_PD2 | PIO_PD9 | PIO_PD10;
   8064c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80650:	6819      	ldr	r1, [r3, #0]
   80652:	f240 6007 	movw	r0, #1543	; 0x607
   80656:	4301      	orrs	r1, r0
   80658:	6019      	str	r1, [r3, #0]
	PIOD->PIO_OER |= PIO_PD0 | PIO_PD1 | PIO_PD2 | PIO_PD9 | PIO_PD10;
   8065a:	691a      	ldr	r2, [r3, #16]
   8065c:	4302      	orrs	r2, r0
   8065e:	611a      	str	r2, [r3, #16]
	PIOD->PIO_SODR = PIO_PD1;
   80660:	2202      	movs	r2, #2
   80662:	631a      	str	r2, [r3, #48]	; 0x30
	
    PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_PIOC << PMC_PCR_PID_Pos);
   80664:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
   80668:	4a09      	ldr	r2, [pc, #36]	; (80690 <motor_init+0x60>)
   8066a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    PMC->PMC_PCER0 |= 1 << (ID_PIOC);	
   8066e:	691a      	ldr	r2, [r3, #16]
   80670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80674:	611a      	str	r2, [r3, #16]
	
	return 0;
}
   80676:	4620      	mov	r0, r4
   80678:	bd10      	pop	{r4, pc}
		printf("ERROR: motor init failed");
   8067a:	4806      	ldr	r0, [pc, #24]	; (80694 <motor_init+0x64>)
   8067c:	4b06      	ldr	r3, [pc, #24]	; (80698 <motor_init+0x68>)
   8067e:	4798      	blx	r3
		return -1;
   80680:	f04f 34ff 	mov.w	r4, #4294967295
   80684:	e7f7      	b.n	80676 <motor_init+0x46>
   80686:	bf00      	nop
   80688:	00080369 	.word	0x00080369
   8068c:	400e1200 	.word	0x400e1200
   80690:	1000000d 	.word	0x1000000d
   80694:	00081c98 	.word	0x00081c98
   80698:	00080b0d 	.word	0x00080b0d

0008069c <motor_enable>:
		PIOD->PIO_CODR = PIO_PD10; //Left
	}
}

void motor_enable(uint8_t bool) {
	if (bool == 1) {
   8069c:	2801      	cmp	r0, #1
   8069e:	d005      	beq.n	806ac <motor_enable+0x10>
		PIOD->PIO_SODR = PIO_PD9; //Enable motor
	}
	else if (bool == 0) {
   806a0:	b918      	cbnz	r0, 806aa <motor_enable+0xe>
		PIOD->PIO_CODR = PIO_PD9; //Disable motor
   806a2:	f44f 7200 	mov.w	r2, #512	; 0x200
   806a6:	4b04      	ldr	r3, [pc, #16]	; (806b8 <motor_enable+0x1c>)
   806a8:	635a      	str	r2, [r3, #52]	; 0x34
   806aa:	4770      	bx	lr
		PIOD->PIO_SODR = PIO_PD9; //Enable motor
   806ac:	f44f 7200 	mov.w	r2, #512	; 0x200
   806b0:	4b01      	ldr	r3, [pc, #4]	; (806b8 <motor_enable+0x1c>)
   806b2:	631a      	str	r2, [r3, #48]	; 0x30
   806b4:	4770      	bx	lr
   806b6:	bf00      	nop
   806b8:	400e1400 	.word	0x400e1400

000806bc <motor_read_encoder>:
	}
}

int motor_read_encoder() {
   806bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PIOD->PIO_CODR = PIO_PD0; // STOP recording encoder values
   806c0:	4c14      	ldr	r4, [pc, #80]	; (80714 <motor_read_encoder+0x58>)
   806c2:	2601      	movs	r6, #1
   806c4:	6366      	str	r6, [r4, #52]	; 0x34
	PIOD->PIO_CODR = PIO_PD2; // SELECT HIGH BYTE
   806c6:	f04f 0a04 	mov.w	sl, #4
   806ca:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	delay_ms(0.02);
   806ce:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8071c <motor_read_encoder+0x60>
   806d2:	4648      	mov	r0, r9
   806d4:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80720 <motor_read_encoder+0x64>
   806d8:	47c0      	blx	r8
	//PIOD->PIO_CODR = PIO_PD1; //reset encoder value
	//*data = (PIOC->PIO_PDSR & 0b11111111) << 8;
	uint8_t msb = (PIOC->PIO_PDSR & (0xFF << 1)) >> 1;
   806da:	4f0f      	ldr	r7, [pc, #60]	; (80718 <motor_read_encoder+0x5c>)
   806dc:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
   806de:	40f5      	lsrs	r5, r6
	//printf("ENCODER VALUE HIGH: %d \r", (int)PIOC->PIO_PDSR);
	PIOD->PIO_SODR = PIO_PD2; // SELECT LOW BYTE
   806e0:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
	delay_ms(0.02);
   806e4:	4648      	mov	r0, r9
   806e6:	47c0      	blx	r8
	uint8_t lsb = (PIOC->PIO_PDSR & (0xFF << 1)) >> 1;
   806e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   806ea:	f3c3 0347 	ubfx	r3, r3, #1, #8
	//*data = *data + (PIOC->PIO_PDSR & 0b11111111);
	//printf(("ENCODER VALUE LOW: %d \r",PIOC->PIO_PDSR & 0b11111111)); 
	PIOD->PIO_CODR = PIO_PD1; //reset encoder value
   806ee:	2202      	movs	r2, #2
   806f0:	6362      	str	r2, [r4, #52]	; 0x34
	PIOD->PIO_SODR = PIO_PD1; 
   806f2:	6322      	str	r2, [r4, #48]	; 0x30
	
	PIOD->PIO_SODR = PIO_PD0;
   806f4:	6326      	str	r6, [r4, #48]	; 0x30
    uint16_t encoder_data = ((msb << 8) | lsb);
   806f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   806fa:	b21b      	sxth	r3, r3
   806fc:	b298      	uxth	r0, r3
    if (encoder_data & (1 << 15)) {
   806fe:	2b00      	cmp	r3, #0
   80700:	db02      	blt.n	80708 <motor_read_encoder+0x4c>
		 return ((uint16_t) (~encoder_data) + 1);
    }
	else {
	//printf("ENCODER VALUE: %d\r", (-encoder_data));
	}
	return -encoder_data;
   80702:	4240      	negs	r0, r0
    
}
   80704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 return ((uint16_t) (~encoder_data) + 1);
   80708:	43c0      	mvns	r0, r0
   8070a:	b280      	uxth	r0, r0
   8070c:	4430      	add	r0, r6
   8070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80712:	bf00      	nop
   80714:	400e1400 	.word	0x400e1400
   80718:	400e1200 	.word	0x400e1200
   8071c:	3ca3d70a 	.word	0x3ca3d70a
   80720:	000803e1 	.word	0x000803e1

00080724 <scale_slider_output>:

	
	float scale_slider_output(float value) {
   80724:	b508      	push	{r3, lr}
		float scaled_val = value * 1404/255;
   80726:	4903      	ldr	r1, [pc, #12]	; (80734 <scale_slider_output+0x10>)
   80728:	4b03      	ldr	r3, [pc, #12]	; (80738 <scale_slider_output+0x14>)
   8072a:	4798      	blx	r3
   8072c:	4903      	ldr	r1, [pc, #12]	; (8073c <scale_slider_output+0x18>)
   8072e:	4b04      	ldr	r3, [pc, #16]	; (80740 <scale_slider_output+0x1c>)
   80730:	4798      	blx	r3
		return scaled_val;
	}
   80732:	bd08      	pop	{r3, pc}
   80734:	44af8000 	.word	0x44af8000
   80738:	00081709 	.word	0x00081709
   8073c:	437f0000 	.word	0x437f0000
   80740:	00081871 	.word	0x00081871

00080744 <motor_run>:
	
	
	//eencoder - 0-1404
	//joystick - 0-256 midtpunkt 160

void motor_run(uint8_t dir) {
   80744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80746:	4604      	mov	r4, r0
	
	
	////PID
	
	
	int encoder_output = motor_read_encoder();
   80748:	4b0d      	ldr	r3, [pc, #52]	; (80780 <motor_run+0x3c>)
   8074a:	4798      	blx	r3
   8074c:	4607      	mov	r7, r0
	int slider_pos =  (int) scale_slider_output(dir);
   8074e:	4620      	mov	r0, r4
   80750:	4b0c      	ldr	r3, [pc, #48]	; (80784 <motor_run+0x40>)
   80752:	4798      	blx	r3
   80754:	4b0c      	ldr	r3, [pc, #48]	; (80788 <motor_run+0x44>)
   80756:	4798      	blx	r3
   80758:	4c0c      	ldr	r4, [pc, #48]	; (8078c <motor_run+0x48>)
   8075a:	47a0      	blx	r4

	//printf("slider_pos:  %d\t", slider_pos);
	//printf("enocer_pos: %d\r\n", encoder_output);
	
	
	float control_input = pid_regulator(slider_pos, encoder_output);
   8075c:	4d0c      	ldr	r5, [pc, #48]	; (80790 <motor_run+0x4c>)
   8075e:	47a8      	blx	r5
   80760:	4606      	mov	r6, r0
   80762:	4638      	mov	r0, r7
   80764:	47a8      	blx	r5
   80766:	4601      	mov	r1, r0
   80768:	4630      	mov	r0, r6
   8076a:	4b0a      	ldr	r3, [pc, #40]	; (80794 <motor_run+0x50>)
   8076c:	4798      	blx	r3
	
	printf("C_u: %d\t", (int)control_input);
   8076e:	47a0      	blx	r4
   80770:	4601      	mov	r1, r0
   80772:	4809      	ldr	r0, [pc, #36]	; (80798 <motor_run+0x54>)
   80774:	4b09      	ldr	r3, [pc, #36]	; (8079c <motor_run+0x58>)
   80776:	4798      	blx	r3
	//else {
		//enable = 0;
	//}
	
	
	motor_enable(enable);
   80778:	2000      	movs	r0, #0
   8077a:	4b09      	ldr	r3, [pc, #36]	; (807a0 <motor_run+0x5c>)
   8077c:	4798      	blx	r3
   8077e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80780:	000806bd 	.word	0x000806bd
   80784:	00081659 	.word	0x00081659
   80788:	00080725 	.word	0x00080725
   8078c:	00081a95 	.word	0x00081a95
   80790:	00081661 	.word	0x00081661
   80794:	000807c9 	.word	0x000807c9
   80798:	00081cb4 	.word	0x00081cb4
   8079c:	00080b0d 	.word	0x00080b0d
   807a0:	0008069d 	.word	0x0008069d

000807a4 <pid_init>:

struct PID_struct_type PID;


//Init PID
void pid_init(float k_p, float k_i, float k_d, float time_step, int max_control_input) {
   807a4:	b510      	push	{r4, lr}
    PID.K_p = k_p;
   807a6:	4c06      	ldr	r4, [pc, #24]	; (807c0 <pid_init+0x1c>)
   807a8:	6020      	str	r0, [r4, #0]
    PID.K_i = k_i;
   807aa:	6061      	str	r1, [r4, #4]
    PID.K_d = k_d;
   807ac:	60a2      	str	r2, [r4, #8]
    PID.Time_step = time_step;
   807ae:	60e3      	str	r3, [r4, #12]
    PID.Max_control_input = max_control_input;
   807b0:	9802      	ldr	r0, [sp, #8]
   807b2:	4b04      	ldr	r3, [pc, #16]	; (807c4 <pid_init+0x20>)
   807b4:	4798      	blx	r3
   807b6:	6120      	str	r0, [r4, #16]
    PID.error_sum = 0;
   807b8:	2300      	movs	r3, #0
   807ba:	6163      	str	r3, [r4, #20]
    PID.previous_error = 0;
   807bc:	61a3      	str	r3, [r4, #24]
   807be:	bd10      	pop	{r4, pc}
   807c0:	20000460 	.word	0x20000460
   807c4:	00081661 	.word	0x00081661

000807c8 <pid_regulator>:
}

//Regulator
float pid_regulator(float reference, float current_value) {
   807c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   807cc:	b083      	sub	sp, #12
   807ce:	4681      	mov	r9, r0
   807d0:	468a      	mov	sl, r1
	
    float error  = reference - current_value;
   807d2:	4b1f      	ldr	r3, [pc, #124]	; (80850 <pid_regulator+0x88>)
   807d4:	4798      	blx	r3
   807d6:	4606      	mov	r6, r0
    PID.error_sum += error;
   807d8:	4c1e      	ldr	r4, [pc, #120]	; (80854 <pid_regulator+0x8c>)
   807da:	4d1f      	ldr	r5, [pc, #124]	; (80858 <pid_regulator+0x90>)
   807dc:	6961      	ldr	r1, [r4, #20]
   807de:	47a8      	blx	r5
   807e0:	4680      	mov	r8, r0
   807e2:	6160      	str	r0, [r4, #20]

    float p_gain = PID.K_p * error;
   807e4:	4f1d      	ldr	r7, [pc, #116]	; (8085c <pid_regulator+0x94>)
   807e6:	6821      	ldr	r1, [r4, #0]
   807e8:	4630      	mov	r0, r6
   807ea:	47b8      	blx	r7
   807ec:	4683      	mov	fp, r0
    float i_gain = PID.K_i * PID.error_sum;
   807ee:	6861      	ldr	r1, [r4, #4]
   807f0:	4640      	mov	r0, r8
   807f2:	47b8      	blx	r7
   807f4:	9001      	str	r0, [sp, #4]
    //float d_gain = PID.K_d * (error - PID.previous_error)/PID.Time_step;
	
	printf("I_gain: %d\t", i_gain);
   807f6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80878 <pid_regulator+0xb0>
   807fa:	47c0      	blx	r8
   807fc:	4602      	mov	r2, r0
   807fe:	460b      	mov	r3, r1
   80800:	4817      	ldr	r0, [pc, #92]	; (80860 <pid_regulator+0x98>)
   80802:	4f18      	ldr	r7, [pc, #96]	; (80864 <pid_regulator+0x9c>)
   80804:	47b8      	blx	r7
	printf("PID_error_sum: %d\r", PID.error_sum);
   80806:	6960      	ldr	r0, [r4, #20]
   80808:	47c0      	blx	r8
   8080a:	4602      	mov	r2, r0
   8080c:	460b      	mov	r3, r1
   8080e:	4816      	ldr	r0, [pc, #88]	; (80868 <pid_regulator+0xa0>)
   80810:	47b8      	blx	r7

    //updating previous error
    PID.previous_error = error;
   80812:	61a6      	str	r6, [r4, #24]

    float control_input = p_gain + i_gain; // + d_gain;
   80814:	9901      	ldr	r1, [sp, #4]
   80816:	4658      	mov	r0, fp
   80818:	47a8      	blx	r5
   8081a:	4605      	mov	r5, r0

    //enabling saturation so the controller doesn't go crazy
    if (control_input > PID.Max_control_input) 
   8081c:	6924      	ldr	r4, [r4, #16]
   8081e:	4621      	mov	r1, r4
   80820:	4b12      	ldr	r3, [pc, #72]	; (8086c <pid_regulator+0xa4>)
   80822:	4798      	blx	r3
   80824:	b928      	cbnz	r0, 80832 <pid_regulator+0x6a>
    {
        control_input = PID.Max_control_input;
    }
    else if (control_input < 0) 
   80826:	2100      	movs	r1, #0
   80828:	4628      	mov	r0, r5
   8082a:	4b11      	ldr	r3, [pc, #68]	; (80870 <pid_regulator+0xa8>)
   8082c:	4798      	blx	r3
   8082e:	b960      	cbnz	r0, 8084a <pid_regulator+0x82>
    float control_input = p_gain + i_gain; // + d_gain;
   80830:	462c      	mov	r4, r5
    {
        control_input = -PID.Max_control_input;
    }
	
	if (reference == current_value) {
   80832:	4651      	mov	r1, sl
   80834:	4648      	mov	r0, r9
   80836:	4b0f      	ldr	r3, [pc, #60]	; (80874 <pid_regulator+0xac>)
   80838:	4798      	blx	r3
   8083a:	b110      	cbz	r0, 80842 <pid_regulator+0x7a>
		PID.error_sum = 0;
   8083c:	2200      	movs	r2, #0
   8083e:	4b05      	ldr	r3, [pc, #20]	; (80854 <pid_regulator+0x8c>)
   80840:	615a      	str	r2, [r3, #20]
		error = 0;
	}
	
	
    return control_input;
   80842:	4620      	mov	r0, r4
   80844:	b003      	add	sp, #12
   80846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        control_input = -PID.Max_control_input;
   8084a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
   8084e:	e7f0      	b.n	80832 <pid_regulator+0x6a>
   80850:	000814f5 	.word	0x000814f5
   80854:	20000460 	.word	0x20000460
   80858:	000814f9 	.word	0x000814f9
   8085c:	00081709 	.word	0x00081709
   80860:	00081cc0 	.word	0x00081cc0
   80864:	00080b0d 	.word	0x00080b0d
   80868:	00081ccc 	.word	0x00081ccc
   8086c:	00081a81 	.word	0x00081a81
   80870:	00081a45 	.word	0x00081a45
   80874:	00081a31 	.word	0x00081a31
   80878:	00080fe1 	.word	0x00080fe1

0008087c <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   8087c:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   8087e:	b2c8      	uxtb	r0, r1
   80880:	4b01      	ldr	r3, [pc, #4]	; (80888 <printchar+0xc>)
   80882:	4798      	blx	r3
   80884:	bd08      	pop	{r3, pc}
   80886:	bf00      	nop
   80888:	00080c8d 	.word	0x00080c8d

0008088c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   8088c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80890:	4607      	mov	r7, r0
   80892:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80894:	1e15      	subs	r5, r2, #0
   80896:	dd02      	ble.n	8089e <prints+0x12>
   80898:	460a      	mov	r2, r1
   8089a:	2100      	movs	r1, #0
   8089c:	e004      	b.n	808a8 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   8089e:	f04f 0820 	mov.w	r8, #32
   808a2:	e00e      	b.n	808c2 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   808a4:	3101      	adds	r1, #1
   808a6:	3201      	adds	r2, #1
   808a8:	7810      	ldrb	r0, [r2, #0]
   808aa:	2800      	cmp	r0, #0
   808ac:	d1fa      	bne.n	808a4 <prints+0x18>
		if (len >= width) width = 0;
   808ae:	42a9      	cmp	r1, r5
   808b0:	da01      	bge.n	808b6 <prints+0x2a>
		else width -= len;
   808b2:	1a6d      	subs	r5, r5, r1
   808b4:	e000      	b.n	808b8 <prints+0x2c>
		if (len >= width) width = 0;
   808b6:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   808b8:	f013 0f02 	tst.w	r3, #2
   808bc:	d106      	bne.n	808cc <prints+0x40>
	register int pc = 0, padchar = ' ';
   808be:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   808c2:	f013 0401 	ands.w	r4, r3, #1
   808c6:	d00a      	beq.n	808de <prints+0x52>
	register int pc = 0, padchar = ' ';
   808c8:	2400      	movs	r4, #0
   808ca:	e010      	b.n	808ee <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   808cc:	f04f 0830 	mov.w	r8, #48	; 0x30
   808d0:	e7f7      	b.n	808c2 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   808d2:	4641      	mov	r1, r8
   808d4:	4638      	mov	r0, r7
   808d6:	4b0d      	ldr	r3, [pc, #52]	; (8090c <prints+0x80>)
   808d8:	4798      	blx	r3
			++pc;
   808da:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   808dc:	3d01      	subs	r5, #1
   808de:	2d00      	cmp	r5, #0
   808e0:	dcf7      	bgt.n	808d2 <prints+0x46>
   808e2:	e004      	b.n	808ee <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   808e4:	4638      	mov	r0, r7
   808e6:	4b09      	ldr	r3, [pc, #36]	; (8090c <prints+0x80>)
   808e8:	4798      	blx	r3
		++pc;
   808ea:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   808ec:	3601      	adds	r6, #1
   808ee:	7831      	ldrb	r1, [r6, #0]
   808f0:	2900      	cmp	r1, #0
   808f2:	d1f7      	bne.n	808e4 <prints+0x58>
   808f4:	e005      	b.n	80902 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   808f6:	4641      	mov	r1, r8
   808f8:	4638      	mov	r0, r7
   808fa:	4b04      	ldr	r3, [pc, #16]	; (8090c <prints+0x80>)
   808fc:	4798      	blx	r3
		++pc;
   808fe:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80900:	3d01      	subs	r5, #1
   80902:	2d00      	cmp	r5, #0
   80904:	dcf7      	bgt.n	808f6 <prints+0x6a>
	}

	return pc;
}
   80906:	4620      	mov	r0, r4
   80908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8090c:	0008087d 	.word	0x0008087d

00080910 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80910:	b5f0      	push	{r4, r5, r6, r7, lr}
   80912:	b085      	sub	sp, #20
   80914:	4607      	mov	r7, r0
   80916:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80918:	b151      	cbz	r1, 80930 <printi+0x20>
   8091a:	461e      	mov	r6, r3
   8091c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   8091e:	b113      	cbz	r3, 80926 <printi+0x16>
   80920:	2a0a      	cmp	r2, #10
   80922:	d012      	beq.n	8094a <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80924:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80926:	ad04      	add	r5, sp, #16
   80928:	2300      	movs	r3, #0
   8092a:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   8092e:	e018      	b.n	80962 <printi+0x52>
		print_buf[0] = '0';
   80930:	2330      	movs	r3, #48	; 0x30
   80932:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80936:	2300      	movs	r3, #0
   80938:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   8093c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8093e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80940:	a901      	add	r1, sp, #4
   80942:	4638      	mov	r0, r7
   80944:	4c1b      	ldr	r4, [pc, #108]	; (809b4 <printi+0xa4>)
   80946:	47a0      	blx	r4
   80948:	e029      	b.n	8099e <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   8094a:	2900      	cmp	r1, #0
   8094c:	db01      	blt.n	80952 <printi+0x42>
	register int t, neg = 0, pc = 0;
   8094e:	2600      	movs	r6, #0
   80950:	e7e9      	b.n	80926 <printi+0x16>
		u = -i;
   80952:	424c      	negs	r4, r1
		neg = 1;
   80954:	2601      	movs	r6, #1
   80956:	e7e6      	b.n	80926 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80958:	3330      	adds	r3, #48	; 0x30
   8095a:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   8095e:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80962:	b14c      	cbz	r4, 80978 <printi+0x68>
		t = u % b;
   80964:	fbb4 f3f2 	udiv	r3, r4, r2
   80968:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   8096c:	2b09      	cmp	r3, #9
   8096e:	ddf3      	ble.n	80958 <printi+0x48>
			t += letbase - '0' - 10;
   80970:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80974:	440b      	add	r3, r1
   80976:	e7ef      	b.n	80958 <printi+0x48>
	}

	if (neg) {
   80978:	b156      	cbz	r6, 80990 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   8097a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8097c:	b11b      	cbz	r3, 80986 <printi+0x76>
   8097e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80980:	f013 0f02 	tst.w	r3, #2
   80984:	d10d      	bne.n	809a2 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80986:	232d      	movs	r3, #45	; 0x2d
   80988:	f805 3c01 	strb.w	r3, [r5, #-1]
   8098c:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   8098e:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80994:	4629      	mov	r1, r5
   80996:	4638      	mov	r0, r7
   80998:	4c06      	ldr	r4, [pc, #24]	; (809b4 <printi+0xa4>)
   8099a:	47a0      	blx	r4
   8099c:	4430      	add	r0, r6
}
   8099e:	b005      	add	sp, #20
   809a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   809a2:	212d      	movs	r1, #45	; 0x2d
   809a4:	4638      	mov	r0, r7
   809a6:	4b04      	ldr	r3, [pc, #16]	; (809b8 <printi+0xa8>)
   809a8:	4798      	blx	r3
			--width;
   809aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   809ac:	3b01      	subs	r3, #1
   809ae:	930a      	str	r3, [sp, #40]	; 0x28
   809b0:	e7ee      	b.n	80990 <printi+0x80>
   809b2:	bf00      	nop
   809b4:	0008088d 	.word	0x0008088d
   809b8:	0008087d 	.word	0x0008087d

000809bc <print>:

static int print( char **out, const char *format, va_list args )
{
   809bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   809be:	b089      	sub	sp, #36	; 0x24
   809c0:	4606      	mov	r6, r0
   809c2:	460c      	mov	r4, r1
   809c4:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   809c6:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   809c8:	e081      	b.n	80ace <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   809ca:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   809cc:	2301      	movs	r3, #1
   809ce:	e08b      	b.n	80ae8 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   809d0:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   809d2:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   809d6:	7822      	ldrb	r2, [r4, #0]
   809d8:	2a30      	cmp	r2, #48	; 0x30
   809da:	d0f9      	beq.n	809d0 <print+0x14>
   809dc:	2200      	movs	r2, #0
   809de:	e006      	b.n	809ee <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   809e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   809e4:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   809e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   809ea:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   809ec:	3401      	adds	r4, #1
   809ee:	7821      	ldrb	r1, [r4, #0]
   809f0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   809f4:	b2c0      	uxtb	r0, r0
   809f6:	2809      	cmp	r0, #9
   809f8:	d9f2      	bls.n	809e0 <print+0x24>
			}
			if( *format == 's' ) {
   809fa:	2973      	cmp	r1, #115	; 0x73
   809fc:	d018      	beq.n	80a30 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   809fe:	2964      	cmp	r1, #100	; 0x64
   80a00:	d022      	beq.n	80a48 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80a02:	2978      	cmp	r1, #120	; 0x78
   80a04:	d02f      	beq.n	80a66 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80a06:	2958      	cmp	r1, #88	; 0x58
   80a08:	d03c      	beq.n	80a84 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80a0a:	2975      	cmp	r1, #117	; 0x75
   80a0c:	d049      	beq.n	80aa2 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80a0e:	2963      	cmp	r1, #99	; 0x63
   80a10:	d15c      	bne.n	80acc <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80a12:	9905      	ldr	r1, [sp, #20]
   80a14:	1d08      	adds	r0, r1, #4
   80a16:	9005      	str	r0, [sp, #20]
   80a18:	7809      	ldrb	r1, [r1, #0]
   80a1a:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80a1e:	2100      	movs	r1, #0
   80a20:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80a24:	a907      	add	r1, sp, #28
   80a26:	4630      	mov	r0, r6
   80a28:	4f34      	ldr	r7, [pc, #208]	; (80afc <print+0x140>)
   80a2a:	47b8      	blx	r7
   80a2c:	4405      	add	r5, r0
				continue;
   80a2e:	e04d      	b.n	80acc <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80a30:	9905      	ldr	r1, [sp, #20]
   80a32:	1d08      	adds	r0, r1, #4
   80a34:	9005      	str	r0, [sp, #20]
   80a36:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80a38:	b121      	cbz	r1, 80a44 <print+0x88>
   80a3a:	4630      	mov	r0, r6
   80a3c:	4f2f      	ldr	r7, [pc, #188]	; (80afc <print+0x140>)
   80a3e:	47b8      	blx	r7
   80a40:	4405      	add	r5, r0
				continue;
   80a42:	e043      	b.n	80acc <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80a44:	492e      	ldr	r1, [pc, #184]	; (80b00 <print+0x144>)
   80a46:	e7f8      	b.n	80a3a <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80a48:	9905      	ldr	r1, [sp, #20]
   80a4a:	1d08      	adds	r0, r1, #4
   80a4c:	9005      	str	r0, [sp, #20]
   80a4e:	6809      	ldr	r1, [r1, #0]
   80a50:	2061      	movs	r0, #97	; 0x61
   80a52:	9002      	str	r0, [sp, #8]
   80a54:	9301      	str	r3, [sp, #4]
   80a56:	9200      	str	r2, [sp, #0]
   80a58:	2301      	movs	r3, #1
   80a5a:	220a      	movs	r2, #10
   80a5c:	4630      	mov	r0, r6
   80a5e:	4f29      	ldr	r7, [pc, #164]	; (80b04 <print+0x148>)
   80a60:	47b8      	blx	r7
   80a62:	4405      	add	r5, r0
				continue;
   80a64:	e032      	b.n	80acc <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80a66:	9905      	ldr	r1, [sp, #20]
   80a68:	1d08      	adds	r0, r1, #4
   80a6a:	9005      	str	r0, [sp, #20]
   80a6c:	6809      	ldr	r1, [r1, #0]
   80a6e:	2061      	movs	r0, #97	; 0x61
   80a70:	9002      	str	r0, [sp, #8]
   80a72:	9301      	str	r3, [sp, #4]
   80a74:	9200      	str	r2, [sp, #0]
   80a76:	2300      	movs	r3, #0
   80a78:	2210      	movs	r2, #16
   80a7a:	4630      	mov	r0, r6
   80a7c:	4f21      	ldr	r7, [pc, #132]	; (80b04 <print+0x148>)
   80a7e:	47b8      	blx	r7
   80a80:	4405      	add	r5, r0
				continue;
   80a82:	e023      	b.n	80acc <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80a84:	9905      	ldr	r1, [sp, #20]
   80a86:	1d08      	adds	r0, r1, #4
   80a88:	9005      	str	r0, [sp, #20]
   80a8a:	6809      	ldr	r1, [r1, #0]
   80a8c:	2041      	movs	r0, #65	; 0x41
   80a8e:	9002      	str	r0, [sp, #8]
   80a90:	9301      	str	r3, [sp, #4]
   80a92:	9200      	str	r2, [sp, #0]
   80a94:	2300      	movs	r3, #0
   80a96:	2210      	movs	r2, #16
   80a98:	4630      	mov	r0, r6
   80a9a:	4f1a      	ldr	r7, [pc, #104]	; (80b04 <print+0x148>)
   80a9c:	47b8      	blx	r7
   80a9e:	4405      	add	r5, r0
				continue;
   80aa0:	e014      	b.n	80acc <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80aa2:	9905      	ldr	r1, [sp, #20]
   80aa4:	1d08      	adds	r0, r1, #4
   80aa6:	9005      	str	r0, [sp, #20]
   80aa8:	6809      	ldr	r1, [r1, #0]
   80aaa:	2061      	movs	r0, #97	; 0x61
   80aac:	9002      	str	r0, [sp, #8]
   80aae:	9301      	str	r3, [sp, #4]
   80ab0:	9200      	str	r2, [sp, #0]
   80ab2:	2300      	movs	r3, #0
   80ab4:	220a      	movs	r2, #10
   80ab6:	4630      	mov	r0, r6
   80ab8:	4f12      	ldr	r7, [pc, #72]	; (80b04 <print+0x148>)
   80aba:	47b8      	blx	r7
   80abc:	4405      	add	r5, r0
				continue;
   80abe:	e005      	b.n	80acc <print+0x110>
			++format;
   80ac0:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80ac2:	7821      	ldrb	r1, [r4, #0]
   80ac4:	4630      	mov	r0, r6
   80ac6:	4b10      	ldr	r3, [pc, #64]	; (80b08 <print+0x14c>)
   80ac8:	4798      	blx	r3
			++pc;
   80aca:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80acc:	3401      	adds	r4, #1
   80ace:	7823      	ldrb	r3, [r4, #0]
   80ad0:	b163      	cbz	r3, 80aec <print+0x130>
		if (*format == '%') {
   80ad2:	2b25      	cmp	r3, #37	; 0x25
   80ad4:	d1f5      	bne.n	80ac2 <print+0x106>
			++format;
   80ad6:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80ad8:	7863      	ldrb	r3, [r4, #1]
   80ada:	b13b      	cbz	r3, 80aec <print+0x130>
			if (*format == '%') goto out;
   80adc:	2b25      	cmp	r3, #37	; 0x25
   80ade:	d0ef      	beq.n	80ac0 <print+0x104>
			if (*format == '-') {
   80ae0:	2b2d      	cmp	r3, #45	; 0x2d
   80ae2:	f43f af72 	beq.w	809ca <print+0xe>
			width = pad = 0;
   80ae6:	2300      	movs	r3, #0
   80ae8:	4614      	mov	r4, r2
   80aea:	e774      	b.n	809d6 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80aec:	b116      	cbz	r6, 80af4 <print+0x138>
   80aee:	6833      	ldr	r3, [r6, #0]
   80af0:	2200      	movs	r2, #0
   80af2:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80af4:	4628      	mov	r0, r5
   80af6:	b009      	add	sp, #36	; 0x24
   80af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80afa:	bf00      	nop
   80afc:	0008088d 	.word	0x0008088d
   80b00:	00081ce0 	.word	0x00081ce0
   80b04:	00080911 	.word	0x00080911
   80b08:	0008087d 	.word	0x0008087d

00080b0c <printf>:

int printf(const char *format, ...)
{
   80b0c:	b40f      	push	{r0, r1, r2, r3}
   80b0e:	b500      	push	{lr}
   80b10:	b083      	sub	sp, #12
   80b12:	aa04      	add	r2, sp, #16
   80b14:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80b18:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80b1a:	2000      	movs	r0, #0
   80b1c:	4b03      	ldr	r3, [pc, #12]	; (80b2c <printf+0x20>)
   80b1e:	4798      	blx	r3
}
   80b20:	b003      	add	sp, #12
   80b22:	f85d eb04 	ldr.w	lr, [sp], #4
   80b26:	b004      	add	sp, #16
   80b28:	4770      	bx	lr
   80b2a:	bf00      	nop
   80b2c:	000809bd 	.word	0x000809bd

00080b30 <PWM_init>:

#define max_duty_cycle_value 180
#define min_duty_cycle_value 80
#define mean_duty_cycle_value 127

void PWM_init(void){
   80b30:	b508      	push	{r3, lr}
	printf("PWM init...\r");
   80b32:	4817      	ldr	r0, [pc, #92]	; (80b90 <PWM_init+0x60>)
   80b34:	4b17      	ldr	r3, [pc, #92]	; (80b94 <PWM_init+0x64>)
   80b36:	4798      	blx	r3
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;// Peripheral Clock Enable PWM
   80b38:	4b17      	ldr	r3, [pc, #92]	; (80b98 <PWM_init+0x68>)
   80b3a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   80b3e:	f042 0210 	orr.w	r2, r2, #16
   80b42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	PIOC->PIO_PDR |= PIO_PDR_P19;// Disable Register
   80b46:	4a15      	ldr	r2, [pc, #84]	; (80b9c <PWM_init+0x6c>)
   80b48:	6851      	ldr	r1, [r2, #4]
   80b4a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80b4e:	6051      	str	r1, [r2, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;// Peripheral Select
   80b50:	6f11      	ldr	r1, [r2, #112]	; 0x70
   80b52:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80b56:	6711      	str	r1, [r2, #112]	; 0x70

	PMC->PMC_PCR |= PMC_PCR_EN;
   80b58:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   80b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80b60:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	/* PWM Clock Register*/
	PWM->PWM_CLK |= 1 << PWM_CLK_DIVA_Pos;
   80b64:	4b0e      	ldr	r3, [pc, #56]	; (80ba0 <PWM_init+0x70>)
   80b66:	681a      	ldr	r2, [r3, #0]
   80b68:	f042 0201 	orr.w	r2, r2, #1
   80b6c:	601a      	str	r2, [r3, #0]
	PWM->PWM_SCM |= PWM_SCM_UPDM_MODE0;
   80b6e:	6a1a      	ldr	r2, [r3, #32]
   80b70:	621a      	str	r2, [r3, #32]

	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPRE_MCK_DIV_1024 | PWM_CMR_CPOL;
   80b72:	f240 220a 	movw	r2, #522	; 0x20a
   80b76:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[5].PWM_CPRD = 1641;
   80b7a:	f240 6269 	movw	r2, #1641	; 0x669
   80b7e:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = (uint32_t)((180 + 80) / 2); /// 180 is max value, 80 min value 
   80b82:	2282      	movs	r2, #130	; 0x82
   80b84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	PWM->PWM_ENA = PWM_ENA_CHID5;// Enable PWM channel 5.
   80b88:	2220      	movs	r2, #32
   80b8a:	605a      	str	r2, [r3, #4]
   80b8c:	bd08      	pop	{r3, pc}
   80b8e:	bf00      	nop
   80b90:	00081ce8 	.word	0x00081ce8
   80b94:	00080b0d 	.word	0x00080b0d
   80b98:	400e0600 	.word	0x400e0600
   80b9c:	400e1200 	.word	0x400e1200
   80ba0:	40094000 	.word	0x40094000
   80ba4:	00000000 	.word	0x00000000

00080ba8 <pwm_set_duty_cycle>:
}


void pwm_set_duty_cycle(uint32_t joystick_pos) {
   80ba8:	b510      	push	{r4, lr}
	
	uint32_t duty_cycle = (uint32_t)(0.38*(float)joystick_pos + 80.0);
   80baa:	4b17      	ldr	r3, [pc, #92]	; (80c08 <pwm_set_duty_cycle+0x60>)
   80bac:	4798      	blx	r3
   80bae:	4b17      	ldr	r3, [pc, #92]	; (80c0c <pwm_set_duty_cycle+0x64>)
   80bb0:	4798      	blx	r3
   80bb2:	a313      	add	r3, pc, #76	; (adr r3, 80c00 <pwm_set_duty_cycle+0x58>)
   80bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   80bb8:	4c15      	ldr	r4, [pc, #84]	; (80c10 <pwm_set_duty_cycle+0x68>)
   80bba:	47a0      	blx	r4
   80bbc:	2200      	movs	r2, #0
   80bbe:	4b15      	ldr	r3, [pc, #84]	; (80c14 <pwm_set_duty_cycle+0x6c>)
   80bc0:	4c15      	ldr	r4, [pc, #84]	; (80c18 <pwm_set_duty_cycle+0x70>)
   80bc2:	47a0      	blx	r4
   80bc4:	4b15      	ldr	r3, [pc, #84]	; (80c1c <pwm_set_duty_cycle+0x74>)
   80bc6:	4798      	blx	r3
	if (duty_cycle > max_duty_cycle_value) {
   80bc8:	28b4      	cmp	r0, #180	; 0xb4
   80bca:	d809      	bhi.n	80be0 <pwm_set_duty_cycle+0x38>
		PWM->PWM_CH_NUM[5].PWM_CDTY = max_duty_cycle_value;
	}
	else if (duty_cycle < min_duty_cycle_value) {
   80bcc:	284f      	cmp	r0, #79	; 0x4f
   80bce:	d90c      	bls.n	80bea <pwm_set_duty_cycle+0x42>
		PWM->PWM_CH_NUM[5].PWM_CDTY = min_duty_cycle_value;
	}
	else if (duty_cycle > 135 && duty_cycle < 145) {
   80bd0:	f1a0 0388 	sub.w	r3, r0, #136	; 0x88
   80bd4:	2b08      	cmp	r3, #8
   80bd6:	d90d      	bls.n	80bf4 <pwm_set_duty_cycle+0x4c>
		PWM->PWM_CH_NUM[5].PWM_CDTY = mean_duty_cycle_value;
	}
	else {
		PWM->PWM_CH_NUM[5].PWM_CDTY = duty_cycle;
   80bd8:	4b11      	ldr	r3, [pc, #68]	; (80c20 <pwm_set_duty_cycle+0x78>)
   80bda:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   80bde:	bd10      	pop	{r4, pc}
		PWM->PWM_CH_NUM[5].PWM_CDTY = max_duty_cycle_value;
   80be0:	22b4      	movs	r2, #180	; 0xb4
   80be2:	4b0f      	ldr	r3, [pc, #60]	; (80c20 <pwm_set_duty_cycle+0x78>)
   80be4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80be8:	bd10      	pop	{r4, pc}
		PWM->PWM_CH_NUM[5].PWM_CDTY = min_duty_cycle_value;
   80bea:	2250      	movs	r2, #80	; 0x50
   80bec:	4b0c      	ldr	r3, [pc, #48]	; (80c20 <pwm_set_duty_cycle+0x78>)
   80bee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80bf2:	bd10      	pop	{r4, pc}
		PWM->PWM_CH_NUM[5].PWM_CDTY = mean_duty_cycle_value;
   80bf4:	227f      	movs	r2, #127	; 0x7f
   80bf6:	4b0a      	ldr	r3, [pc, #40]	; (80c20 <pwm_set_duty_cycle+0x78>)
   80bf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80bfc:	bd10      	pop	{r4, pc}
   80bfe:	bf00      	nop
   80c00:	851eb852 	.word	0x851eb852
   80c04:	3fd851eb 	.word	0x3fd851eb
   80c08:	00081659 	.word	0x00081659
   80c0c:	00080fe1 	.word	0x00080fe1
   80c10:	00081089 	.word	0x00081089
   80c14:	40540000 	.word	0x40540000
   80c18:	00080d25 	.word	0x00080d25
   80c1c:	000814ad 	.word	0x000814ad
   80c20:	40094000 	.word	0x40094000

00080c24 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80c24:	4b16      	ldr	r3, [pc, #88]	; (80c80 <configure_uart+0x5c>)
   80c26:	2200      	movs	r2, #0
   80c28:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80c2a:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c2c:	4b15      	ldr	r3, [pc, #84]	; (80c84 <configure_uart+0x60>)
   80c2e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80c32:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c34:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80c38:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80c3a:	4002      	ands	r2, r0
   80c3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80c40:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c42:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80c44:	f44f 7280 	mov.w	r2, #256	; 0x100
   80c48:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80c4c:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80c4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80c52:	21ac      	movs	r1, #172	; 0xac
   80c54:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80c56:	f240 2123 	movw	r1, #547	; 0x223
   80c5a:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80c5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80c60:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80c62:	f240 2102 	movw	r1, #514	; 0x202
   80c66:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80c6a:	f04f 31ff 	mov.w	r1, #4294967295
   80c6e:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80c70:	21e1      	movs	r1, #225	; 0xe1
   80c72:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80c74:	4904      	ldr	r1, [pc, #16]	; (80c88 <configure_uart+0x64>)
   80c76:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80c78:	2250      	movs	r2, #80	; 0x50
   80c7a:	601a      	str	r2, [r3, #0]
   80c7c:	4770      	bx	lr
   80c7e:	bf00      	nop
   80c80:	2000047c 	.word	0x2000047c
   80c84:	400e0e00 	.word	0x400e0e00
   80c88:	e000e100 	.word	0xe000e100

00080c8c <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80c8c:	4b07      	ldr	r3, [pc, #28]	; (80cac <uart_putchar+0x20>)
   80c8e:	695b      	ldr	r3, [r3, #20]
   80c90:	f013 0f02 	tst.w	r3, #2
   80c94:	d008      	beq.n	80ca8 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80c96:	4b05      	ldr	r3, [pc, #20]	; (80cac <uart_putchar+0x20>)
   80c98:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80c9a:	4b04      	ldr	r3, [pc, #16]	; (80cac <uart_putchar+0x20>)
   80c9c:	695b      	ldr	r3, [r3, #20]
   80c9e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ca2:	d0fa      	beq.n	80c9a <uart_putchar+0xe>
	return 0;
   80ca4:	2000      	movs	r0, #0
   80ca6:	4770      	bx	lr
	return 1;
   80ca8:	2001      	movs	r0, #1
}
   80caa:	4770      	bx	lr
   80cac:	400e0800 	.word	0x400e0800

00080cb0 <UART_Handler>:

void UART_Handler(void)
{
   80cb0:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80cb2:	4b15      	ldr	r3, [pc, #84]	; (80d08 <UART_Handler+0x58>)
   80cb4:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80cb6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80cba:	d003      	beq.n	80cc4 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80cbc:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80cc0:	4a11      	ldr	r2, [pc, #68]	; (80d08 <UART_Handler+0x58>)
   80cc2:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80cc4:	f013 0f01 	tst.w	r3, #1
   80cc8:	d012      	beq.n	80cf0 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80cca:	4810      	ldr	r0, [pc, #64]	; (80d0c <UART_Handler+0x5c>)
   80ccc:	7842      	ldrb	r2, [r0, #1]
   80cce:	1c53      	adds	r3, r2, #1
   80cd0:	4259      	negs	r1, r3
   80cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80cd6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80cda:	bf58      	it	pl
   80cdc:	424b      	negpl	r3, r1
   80cde:	7801      	ldrb	r1, [r0, #0]
   80ce0:	428b      	cmp	r3, r1
   80ce2:	d006      	beq.n	80cf2 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80ce4:	4908      	ldr	r1, [pc, #32]	; (80d08 <UART_Handler+0x58>)
   80ce6:	6988      	ldr	r0, [r1, #24]
   80ce8:	4908      	ldr	r1, [pc, #32]	; (80d0c <UART_Handler+0x5c>)
   80cea:	440a      	add	r2, r1
   80cec:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80cee:	704b      	strb	r3, [r1, #1]
   80cf0:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80cf2:	4807      	ldr	r0, [pc, #28]	; (80d10 <UART_Handler+0x60>)
   80cf4:	4b07      	ldr	r3, [pc, #28]	; (80d14 <UART_Handler+0x64>)
   80cf6:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80cf8:	4b04      	ldr	r3, [pc, #16]	; (80d0c <UART_Handler+0x5c>)
   80cfa:	7859      	ldrb	r1, [r3, #1]
   80cfc:	4a02      	ldr	r2, [pc, #8]	; (80d08 <UART_Handler+0x58>)
   80cfe:	6992      	ldr	r2, [r2, #24]
   80d00:	440b      	add	r3, r1
   80d02:	709a      	strb	r2, [r3, #2]
			return;
   80d04:	bd08      	pop	{r3, pc}
   80d06:	bf00      	nop
   80d08:	400e0800 	.word	0x400e0800
   80d0c:	2000047c 	.word	0x2000047c
   80d10:	00081cf8 	.word	0x00081cf8
   80d14:	00080b0d 	.word	0x00080b0d

00080d18 <__aeabi_drsub>:
   80d18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80d1c:	e002      	b.n	80d24 <__adddf3>
   80d1e:	bf00      	nop

00080d20 <__aeabi_dsub>:
   80d20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080d24 <__adddf3>:
   80d24:	b530      	push	{r4, r5, lr}
   80d26:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80d2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80d2e:	ea94 0f05 	teq	r4, r5
   80d32:	bf08      	it	eq
   80d34:	ea90 0f02 	teqeq	r0, r2
   80d38:	bf1f      	itttt	ne
   80d3a:	ea54 0c00 	orrsne.w	ip, r4, r0
   80d3e:	ea55 0c02 	orrsne.w	ip, r5, r2
   80d42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80d46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80d4a:	f000 80e2 	beq.w	80f12 <__adddf3+0x1ee>
   80d4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80d52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80d56:	bfb8      	it	lt
   80d58:	426d      	neglt	r5, r5
   80d5a:	dd0c      	ble.n	80d76 <__adddf3+0x52>
   80d5c:	442c      	add	r4, r5
   80d5e:	ea80 0202 	eor.w	r2, r0, r2
   80d62:	ea81 0303 	eor.w	r3, r1, r3
   80d66:	ea82 0000 	eor.w	r0, r2, r0
   80d6a:	ea83 0101 	eor.w	r1, r3, r1
   80d6e:	ea80 0202 	eor.w	r2, r0, r2
   80d72:	ea81 0303 	eor.w	r3, r1, r3
   80d76:	2d36      	cmp	r5, #54	; 0x36
   80d78:	bf88      	it	hi
   80d7a:	bd30      	pophi	{r4, r5, pc}
   80d7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80d80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80d84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80d88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80d8c:	d002      	beq.n	80d94 <__adddf3+0x70>
   80d8e:	4240      	negs	r0, r0
   80d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80d94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80d98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80d9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80da0:	d002      	beq.n	80da8 <__adddf3+0x84>
   80da2:	4252      	negs	r2, r2
   80da4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80da8:	ea94 0f05 	teq	r4, r5
   80dac:	f000 80a7 	beq.w	80efe <__adddf3+0x1da>
   80db0:	f1a4 0401 	sub.w	r4, r4, #1
   80db4:	f1d5 0e20 	rsbs	lr, r5, #32
   80db8:	db0d      	blt.n	80dd6 <__adddf3+0xb2>
   80dba:	fa02 fc0e 	lsl.w	ip, r2, lr
   80dbe:	fa22 f205 	lsr.w	r2, r2, r5
   80dc2:	1880      	adds	r0, r0, r2
   80dc4:	f141 0100 	adc.w	r1, r1, #0
   80dc8:	fa03 f20e 	lsl.w	r2, r3, lr
   80dcc:	1880      	adds	r0, r0, r2
   80dce:	fa43 f305 	asr.w	r3, r3, r5
   80dd2:	4159      	adcs	r1, r3
   80dd4:	e00e      	b.n	80df4 <__adddf3+0xd0>
   80dd6:	f1a5 0520 	sub.w	r5, r5, #32
   80dda:	f10e 0e20 	add.w	lr, lr, #32
   80dde:	2a01      	cmp	r2, #1
   80de0:	fa03 fc0e 	lsl.w	ip, r3, lr
   80de4:	bf28      	it	cs
   80de6:	f04c 0c02 	orrcs.w	ip, ip, #2
   80dea:	fa43 f305 	asr.w	r3, r3, r5
   80dee:	18c0      	adds	r0, r0, r3
   80df0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80df4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80df8:	d507      	bpl.n	80e0a <__adddf3+0xe6>
   80dfa:	f04f 0e00 	mov.w	lr, #0
   80dfe:	f1dc 0c00 	rsbs	ip, ip, #0
   80e02:	eb7e 0000 	sbcs.w	r0, lr, r0
   80e06:	eb6e 0101 	sbc.w	r1, lr, r1
   80e0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80e0e:	d31b      	bcc.n	80e48 <__adddf3+0x124>
   80e10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80e14:	d30c      	bcc.n	80e30 <__adddf3+0x10c>
   80e16:	0849      	lsrs	r1, r1, #1
   80e18:	ea5f 0030 	movs.w	r0, r0, rrx
   80e1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80e20:	f104 0401 	add.w	r4, r4, #1
   80e24:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80e28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80e2c:	f080 809a 	bcs.w	80f64 <__adddf3+0x240>
   80e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80e34:	bf08      	it	eq
   80e36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80e3a:	f150 0000 	adcs.w	r0, r0, #0
   80e3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80e42:	ea41 0105 	orr.w	r1, r1, r5
   80e46:	bd30      	pop	{r4, r5, pc}
   80e48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80e4c:	4140      	adcs	r0, r0
   80e4e:	eb41 0101 	adc.w	r1, r1, r1
   80e52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80e56:	f1a4 0401 	sub.w	r4, r4, #1
   80e5a:	d1e9      	bne.n	80e30 <__adddf3+0x10c>
   80e5c:	f091 0f00 	teq	r1, #0
   80e60:	bf04      	itt	eq
   80e62:	4601      	moveq	r1, r0
   80e64:	2000      	moveq	r0, #0
   80e66:	fab1 f381 	clz	r3, r1
   80e6a:	bf08      	it	eq
   80e6c:	3320      	addeq	r3, #32
   80e6e:	f1a3 030b 	sub.w	r3, r3, #11
   80e72:	f1b3 0220 	subs.w	r2, r3, #32
   80e76:	da0c      	bge.n	80e92 <__adddf3+0x16e>
   80e78:	320c      	adds	r2, #12
   80e7a:	dd08      	ble.n	80e8e <__adddf3+0x16a>
   80e7c:	f102 0c14 	add.w	ip, r2, #20
   80e80:	f1c2 020c 	rsb	r2, r2, #12
   80e84:	fa01 f00c 	lsl.w	r0, r1, ip
   80e88:	fa21 f102 	lsr.w	r1, r1, r2
   80e8c:	e00c      	b.n	80ea8 <__adddf3+0x184>
   80e8e:	f102 0214 	add.w	r2, r2, #20
   80e92:	bfd8      	it	le
   80e94:	f1c2 0c20 	rsble	ip, r2, #32
   80e98:	fa01 f102 	lsl.w	r1, r1, r2
   80e9c:	fa20 fc0c 	lsr.w	ip, r0, ip
   80ea0:	bfdc      	itt	le
   80ea2:	ea41 010c 	orrle.w	r1, r1, ip
   80ea6:	4090      	lslle	r0, r2
   80ea8:	1ae4      	subs	r4, r4, r3
   80eaa:	bfa2      	ittt	ge
   80eac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80eb0:	4329      	orrge	r1, r5
   80eb2:	bd30      	popge	{r4, r5, pc}
   80eb4:	ea6f 0404 	mvn.w	r4, r4
   80eb8:	3c1f      	subs	r4, #31
   80eba:	da1c      	bge.n	80ef6 <__adddf3+0x1d2>
   80ebc:	340c      	adds	r4, #12
   80ebe:	dc0e      	bgt.n	80ede <__adddf3+0x1ba>
   80ec0:	f104 0414 	add.w	r4, r4, #20
   80ec4:	f1c4 0220 	rsb	r2, r4, #32
   80ec8:	fa20 f004 	lsr.w	r0, r0, r4
   80ecc:	fa01 f302 	lsl.w	r3, r1, r2
   80ed0:	ea40 0003 	orr.w	r0, r0, r3
   80ed4:	fa21 f304 	lsr.w	r3, r1, r4
   80ed8:	ea45 0103 	orr.w	r1, r5, r3
   80edc:	bd30      	pop	{r4, r5, pc}
   80ede:	f1c4 040c 	rsb	r4, r4, #12
   80ee2:	f1c4 0220 	rsb	r2, r4, #32
   80ee6:	fa20 f002 	lsr.w	r0, r0, r2
   80eea:	fa01 f304 	lsl.w	r3, r1, r4
   80eee:	ea40 0003 	orr.w	r0, r0, r3
   80ef2:	4629      	mov	r1, r5
   80ef4:	bd30      	pop	{r4, r5, pc}
   80ef6:	fa21 f004 	lsr.w	r0, r1, r4
   80efa:	4629      	mov	r1, r5
   80efc:	bd30      	pop	{r4, r5, pc}
   80efe:	f094 0f00 	teq	r4, #0
   80f02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80f06:	bf06      	itte	eq
   80f08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80f0c:	3401      	addeq	r4, #1
   80f0e:	3d01      	subne	r5, #1
   80f10:	e74e      	b.n	80db0 <__adddf3+0x8c>
   80f12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80f16:	bf18      	it	ne
   80f18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80f1c:	d029      	beq.n	80f72 <__adddf3+0x24e>
   80f1e:	ea94 0f05 	teq	r4, r5
   80f22:	bf08      	it	eq
   80f24:	ea90 0f02 	teqeq	r0, r2
   80f28:	d005      	beq.n	80f36 <__adddf3+0x212>
   80f2a:	ea54 0c00 	orrs.w	ip, r4, r0
   80f2e:	bf04      	itt	eq
   80f30:	4619      	moveq	r1, r3
   80f32:	4610      	moveq	r0, r2
   80f34:	bd30      	pop	{r4, r5, pc}
   80f36:	ea91 0f03 	teq	r1, r3
   80f3a:	bf1e      	ittt	ne
   80f3c:	2100      	movne	r1, #0
   80f3e:	2000      	movne	r0, #0
   80f40:	bd30      	popne	{r4, r5, pc}
   80f42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80f46:	d105      	bne.n	80f54 <__adddf3+0x230>
   80f48:	0040      	lsls	r0, r0, #1
   80f4a:	4149      	adcs	r1, r1
   80f4c:	bf28      	it	cs
   80f4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80f52:	bd30      	pop	{r4, r5, pc}
   80f54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80f58:	bf3c      	itt	cc
   80f5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80f5e:	bd30      	popcc	{r4, r5, pc}
   80f60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80f68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80f6c:	f04f 0000 	mov.w	r0, #0
   80f70:	bd30      	pop	{r4, r5, pc}
   80f72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80f76:	bf1a      	itte	ne
   80f78:	4619      	movne	r1, r3
   80f7a:	4610      	movne	r0, r2
   80f7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80f80:	bf1c      	itt	ne
   80f82:	460b      	movne	r3, r1
   80f84:	4602      	movne	r2, r0
   80f86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80f8a:	bf06      	itte	eq
   80f8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80f90:	ea91 0f03 	teqeq	r1, r3
   80f94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80f98:	bd30      	pop	{r4, r5, pc}
   80f9a:	bf00      	nop

00080f9c <__aeabi_ui2d>:
   80f9c:	f090 0f00 	teq	r0, #0
   80fa0:	bf04      	itt	eq
   80fa2:	2100      	moveq	r1, #0
   80fa4:	4770      	bxeq	lr
   80fa6:	b530      	push	{r4, r5, lr}
   80fa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80fac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80fb0:	f04f 0500 	mov.w	r5, #0
   80fb4:	f04f 0100 	mov.w	r1, #0
   80fb8:	e750      	b.n	80e5c <__adddf3+0x138>
   80fba:	bf00      	nop

00080fbc <__aeabi_i2d>:
   80fbc:	f090 0f00 	teq	r0, #0
   80fc0:	bf04      	itt	eq
   80fc2:	2100      	moveq	r1, #0
   80fc4:	4770      	bxeq	lr
   80fc6:	b530      	push	{r4, r5, lr}
   80fc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80fcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80fd0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80fd4:	bf48      	it	mi
   80fd6:	4240      	negmi	r0, r0
   80fd8:	f04f 0100 	mov.w	r1, #0
   80fdc:	e73e      	b.n	80e5c <__adddf3+0x138>
   80fde:	bf00      	nop

00080fe0 <__aeabi_f2d>:
   80fe0:	0042      	lsls	r2, r0, #1
   80fe2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80fe6:	ea4f 0131 	mov.w	r1, r1, rrx
   80fea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80fee:	bf1f      	itttt	ne
   80ff0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80ff4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80ff8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80ffc:	4770      	bxne	lr
   80ffe:	f092 0f00 	teq	r2, #0
   81002:	bf14      	ite	ne
   81004:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81008:	4770      	bxeq	lr
   8100a:	b530      	push	{r4, r5, lr}
   8100c:	f44f 7460 	mov.w	r4, #896	; 0x380
   81010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81018:	e720      	b.n	80e5c <__adddf3+0x138>
   8101a:	bf00      	nop

0008101c <__aeabi_ul2d>:
   8101c:	ea50 0201 	orrs.w	r2, r0, r1
   81020:	bf08      	it	eq
   81022:	4770      	bxeq	lr
   81024:	b530      	push	{r4, r5, lr}
   81026:	f04f 0500 	mov.w	r5, #0
   8102a:	e00a      	b.n	81042 <__aeabi_l2d+0x16>

0008102c <__aeabi_l2d>:
   8102c:	ea50 0201 	orrs.w	r2, r0, r1
   81030:	bf08      	it	eq
   81032:	4770      	bxeq	lr
   81034:	b530      	push	{r4, r5, lr}
   81036:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8103a:	d502      	bpl.n	81042 <__aeabi_l2d+0x16>
   8103c:	4240      	negs	r0, r0
   8103e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81042:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81046:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8104a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8104e:	f43f aedc 	beq.w	80e0a <__adddf3+0xe6>
   81052:	f04f 0203 	mov.w	r2, #3
   81056:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8105a:	bf18      	it	ne
   8105c:	3203      	addne	r2, #3
   8105e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81062:	bf18      	it	ne
   81064:	3203      	addne	r2, #3
   81066:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8106a:	f1c2 0320 	rsb	r3, r2, #32
   8106e:	fa00 fc03 	lsl.w	ip, r0, r3
   81072:	fa20 f002 	lsr.w	r0, r0, r2
   81076:	fa01 fe03 	lsl.w	lr, r1, r3
   8107a:	ea40 000e 	orr.w	r0, r0, lr
   8107e:	fa21 f102 	lsr.w	r1, r1, r2
   81082:	4414      	add	r4, r2
   81084:	e6c1      	b.n	80e0a <__adddf3+0xe6>
   81086:	bf00      	nop

00081088 <__aeabi_dmul>:
   81088:	b570      	push	{r4, r5, r6, lr}
   8108a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8108e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81092:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81096:	bf1d      	ittte	ne
   81098:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8109c:	ea94 0f0c 	teqne	r4, ip
   810a0:	ea95 0f0c 	teqne	r5, ip
   810a4:	f000 f8de 	bleq	81264 <__aeabi_dmul+0x1dc>
   810a8:	442c      	add	r4, r5
   810aa:	ea81 0603 	eor.w	r6, r1, r3
   810ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   810b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   810b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   810ba:	bf18      	it	ne
   810bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   810c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   810c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   810c8:	d038      	beq.n	8113c <__aeabi_dmul+0xb4>
   810ca:	fba0 ce02 	umull	ip, lr, r0, r2
   810ce:	f04f 0500 	mov.w	r5, #0
   810d2:	fbe1 e502 	umlal	lr, r5, r1, r2
   810d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   810da:	fbe0 e503 	umlal	lr, r5, r0, r3
   810de:	f04f 0600 	mov.w	r6, #0
   810e2:	fbe1 5603 	umlal	r5, r6, r1, r3
   810e6:	f09c 0f00 	teq	ip, #0
   810ea:	bf18      	it	ne
   810ec:	f04e 0e01 	orrne.w	lr, lr, #1
   810f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   810f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   810f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   810fc:	d204      	bcs.n	81108 <__aeabi_dmul+0x80>
   810fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81102:	416d      	adcs	r5, r5
   81104:	eb46 0606 	adc.w	r6, r6, r6
   81108:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8110c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81110:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81114:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81118:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8111c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81120:	bf88      	it	hi
   81122:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81126:	d81e      	bhi.n	81166 <__aeabi_dmul+0xde>
   81128:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8112c:	bf08      	it	eq
   8112e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81132:	f150 0000 	adcs.w	r0, r0, #0
   81136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8113a:	bd70      	pop	{r4, r5, r6, pc}
   8113c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81140:	ea46 0101 	orr.w	r1, r6, r1
   81144:	ea40 0002 	orr.w	r0, r0, r2
   81148:	ea81 0103 	eor.w	r1, r1, r3
   8114c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81150:	bfc2      	ittt	gt
   81152:	ebd4 050c 	rsbsgt	r5, r4, ip
   81156:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8115a:	bd70      	popgt	{r4, r5, r6, pc}
   8115c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81160:	f04f 0e00 	mov.w	lr, #0
   81164:	3c01      	subs	r4, #1
   81166:	f300 80ab 	bgt.w	812c0 <__aeabi_dmul+0x238>
   8116a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8116e:	bfde      	ittt	le
   81170:	2000      	movle	r0, #0
   81172:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81176:	bd70      	pople	{r4, r5, r6, pc}
   81178:	f1c4 0400 	rsb	r4, r4, #0
   8117c:	3c20      	subs	r4, #32
   8117e:	da35      	bge.n	811ec <__aeabi_dmul+0x164>
   81180:	340c      	adds	r4, #12
   81182:	dc1b      	bgt.n	811bc <__aeabi_dmul+0x134>
   81184:	f104 0414 	add.w	r4, r4, #20
   81188:	f1c4 0520 	rsb	r5, r4, #32
   8118c:	fa00 f305 	lsl.w	r3, r0, r5
   81190:	fa20 f004 	lsr.w	r0, r0, r4
   81194:	fa01 f205 	lsl.w	r2, r1, r5
   81198:	ea40 0002 	orr.w	r0, r0, r2
   8119c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   811a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   811a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   811a8:	fa21 f604 	lsr.w	r6, r1, r4
   811ac:	eb42 0106 	adc.w	r1, r2, r6
   811b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   811b4:	bf08      	it	eq
   811b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   811ba:	bd70      	pop	{r4, r5, r6, pc}
   811bc:	f1c4 040c 	rsb	r4, r4, #12
   811c0:	f1c4 0520 	rsb	r5, r4, #32
   811c4:	fa00 f304 	lsl.w	r3, r0, r4
   811c8:	fa20 f005 	lsr.w	r0, r0, r5
   811cc:	fa01 f204 	lsl.w	r2, r1, r4
   811d0:	ea40 0002 	orr.w	r0, r0, r2
   811d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   811d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   811dc:	f141 0100 	adc.w	r1, r1, #0
   811e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   811e4:	bf08      	it	eq
   811e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   811ea:	bd70      	pop	{r4, r5, r6, pc}
   811ec:	f1c4 0520 	rsb	r5, r4, #32
   811f0:	fa00 f205 	lsl.w	r2, r0, r5
   811f4:	ea4e 0e02 	orr.w	lr, lr, r2
   811f8:	fa20 f304 	lsr.w	r3, r0, r4
   811fc:	fa01 f205 	lsl.w	r2, r1, r5
   81200:	ea43 0302 	orr.w	r3, r3, r2
   81204:	fa21 f004 	lsr.w	r0, r1, r4
   81208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8120c:	fa21 f204 	lsr.w	r2, r1, r4
   81210:	ea20 0002 	bic.w	r0, r0, r2
   81214:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81218:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8121c:	bf08      	it	eq
   8121e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81222:	bd70      	pop	{r4, r5, r6, pc}
   81224:	f094 0f00 	teq	r4, #0
   81228:	d10f      	bne.n	8124a <__aeabi_dmul+0x1c2>
   8122a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8122e:	0040      	lsls	r0, r0, #1
   81230:	eb41 0101 	adc.w	r1, r1, r1
   81234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81238:	bf08      	it	eq
   8123a:	3c01      	subeq	r4, #1
   8123c:	d0f7      	beq.n	8122e <__aeabi_dmul+0x1a6>
   8123e:	ea41 0106 	orr.w	r1, r1, r6
   81242:	f095 0f00 	teq	r5, #0
   81246:	bf18      	it	ne
   81248:	4770      	bxne	lr
   8124a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8124e:	0052      	lsls	r2, r2, #1
   81250:	eb43 0303 	adc.w	r3, r3, r3
   81254:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81258:	bf08      	it	eq
   8125a:	3d01      	subeq	r5, #1
   8125c:	d0f7      	beq.n	8124e <__aeabi_dmul+0x1c6>
   8125e:	ea43 0306 	orr.w	r3, r3, r6
   81262:	4770      	bx	lr
   81264:	ea94 0f0c 	teq	r4, ip
   81268:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8126c:	bf18      	it	ne
   8126e:	ea95 0f0c 	teqne	r5, ip
   81272:	d00c      	beq.n	8128e <__aeabi_dmul+0x206>
   81274:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81278:	bf18      	it	ne
   8127a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8127e:	d1d1      	bne.n	81224 <__aeabi_dmul+0x19c>
   81280:	ea81 0103 	eor.w	r1, r1, r3
   81284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81288:	f04f 0000 	mov.w	r0, #0
   8128c:	bd70      	pop	{r4, r5, r6, pc}
   8128e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81292:	bf06      	itte	eq
   81294:	4610      	moveq	r0, r2
   81296:	4619      	moveq	r1, r3
   81298:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8129c:	d019      	beq.n	812d2 <__aeabi_dmul+0x24a>
   8129e:	ea94 0f0c 	teq	r4, ip
   812a2:	d102      	bne.n	812aa <__aeabi_dmul+0x222>
   812a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   812a8:	d113      	bne.n	812d2 <__aeabi_dmul+0x24a>
   812aa:	ea95 0f0c 	teq	r5, ip
   812ae:	d105      	bne.n	812bc <__aeabi_dmul+0x234>
   812b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   812b4:	bf1c      	itt	ne
   812b6:	4610      	movne	r0, r2
   812b8:	4619      	movne	r1, r3
   812ba:	d10a      	bne.n	812d2 <__aeabi_dmul+0x24a>
   812bc:	ea81 0103 	eor.w	r1, r1, r3
   812c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   812c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   812cc:	f04f 0000 	mov.w	r0, #0
   812d0:	bd70      	pop	{r4, r5, r6, pc}
   812d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   812d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   812da:	bd70      	pop	{r4, r5, r6, pc}

000812dc <__aeabi_ddiv>:
   812dc:	b570      	push	{r4, r5, r6, lr}
   812de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   812e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   812e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   812ea:	bf1d      	ittte	ne
   812ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   812f0:	ea94 0f0c 	teqne	r4, ip
   812f4:	ea95 0f0c 	teqne	r5, ip
   812f8:	f000 f8a7 	bleq	8144a <__aeabi_ddiv+0x16e>
   812fc:	eba4 0405 	sub.w	r4, r4, r5
   81300:	ea81 0e03 	eor.w	lr, r1, r3
   81304:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81308:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8130c:	f000 8088 	beq.w	81420 <__aeabi_ddiv+0x144>
   81310:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81314:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81318:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8131c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81320:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81324:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81328:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8132c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81330:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81334:	429d      	cmp	r5, r3
   81336:	bf08      	it	eq
   81338:	4296      	cmpeq	r6, r2
   8133a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8133e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81342:	d202      	bcs.n	8134a <__aeabi_ddiv+0x6e>
   81344:	085b      	lsrs	r3, r3, #1
   81346:	ea4f 0232 	mov.w	r2, r2, rrx
   8134a:	1ab6      	subs	r6, r6, r2
   8134c:	eb65 0503 	sbc.w	r5, r5, r3
   81350:	085b      	lsrs	r3, r3, #1
   81352:	ea4f 0232 	mov.w	r2, r2, rrx
   81356:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8135a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8135e:	ebb6 0e02 	subs.w	lr, r6, r2
   81362:	eb75 0e03 	sbcs.w	lr, r5, r3
   81366:	bf22      	ittt	cs
   81368:	1ab6      	subcs	r6, r6, r2
   8136a:	4675      	movcs	r5, lr
   8136c:	ea40 000c 	orrcs.w	r0, r0, ip
   81370:	085b      	lsrs	r3, r3, #1
   81372:	ea4f 0232 	mov.w	r2, r2, rrx
   81376:	ebb6 0e02 	subs.w	lr, r6, r2
   8137a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8137e:	bf22      	ittt	cs
   81380:	1ab6      	subcs	r6, r6, r2
   81382:	4675      	movcs	r5, lr
   81384:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81388:	085b      	lsrs	r3, r3, #1
   8138a:	ea4f 0232 	mov.w	r2, r2, rrx
   8138e:	ebb6 0e02 	subs.w	lr, r6, r2
   81392:	eb75 0e03 	sbcs.w	lr, r5, r3
   81396:	bf22      	ittt	cs
   81398:	1ab6      	subcs	r6, r6, r2
   8139a:	4675      	movcs	r5, lr
   8139c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   813a0:	085b      	lsrs	r3, r3, #1
   813a2:	ea4f 0232 	mov.w	r2, r2, rrx
   813a6:	ebb6 0e02 	subs.w	lr, r6, r2
   813aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   813ae:	bf22      	ittt	cs
   813b0:	1ab6      	subcs	r6, r6, r2
   813b2:	4675      	movcs	r5, lr
   813b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   813b8:	ea55 0e06 	orrs.w	lr, r5, r6
   813bc:	d018      	beq.n	813f0 <__aeabi_ddiv+0x114>
   813be:	ea4f 1505 	mov.w	r5, r5, lsl #4
   813c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   813c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   813ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   813ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   813d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   813d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   813da:	d1c0      	bne.n	8135e <__aeabi_ddiv+0x82>
   813dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813e0:	d10b      	bne.n	813fa <__aeabi_ddiv+0x11e>
   813e2:	ea41 0100 	orr.w	r1, r1, r0
   813e6:	f04f 0000 	mov.w	r0, #0
   813ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   813ee:	e7b6      	b.n	8135e <__aeabi_ddiv+0x82>
   813f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813f4:	bf04      	itt	eq
   813f6:	4301      	orreq	r1, r0
   813f8:	2000      	moveq	r0, #0
   813fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   813fe:	bf88      	it	hi
   81400:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81404:	f63f aeaf 	bhi.w	81166 <__aeabi_dmul+0xde>
   81408:	ebb5 0c03 	subs.w	ip, r5, r3
   8140c:	bf04      	itt	eq
   8140e:	ebb6 0c02 	subseq.w	ip, r6, r2
   81412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81416:	f150 0000 	adcs.w	r0, r0, #0
   8141a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8141e:	bd70      	pop	{r4, r5, r6, pc}
   81420:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81424:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81428:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8142c:	bfc2      	ittt	gt
   8142e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81432:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81436:	bd70      	popgt	{r4, r5, r6, pc}
   81438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8143c:	f04f 0e00 	mov.w	lr, #0
   81440:	3c01      	subs	r4, #1
   81442:	e690      	b.n	81166 <__aeabi_dmul+0xde>
   81444:	ea45 0e06 	orr.w	lr, r5, r6
   81448:	e68d      	b.n	81166 <__aeabi_dmul+0xde>
   8144a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8144e:	ea94 0f0c 	teq	r4, ip
   81452:	bf08      	it	eq
   81454:	ea95 0f0c 	teqeq	r5, ip
   81458:	f43f af3b 	beq.w	812d2 <__aeabi_dmul+0x24a>
   8145c:	ea94 0f0c 	teq	r4, ip
   81460:	d10a      	bne.n	81478 <__aeabi_ddiv+0x19c>
   81462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81466:	f47f af34 	bne.w	812d2 <__aeabi_dmul+0x24a>
   8146a:	ea95 0f0c 	teq	r5, ip
   8146e:	f47f af25 	bne.w	812bc <__aeabi_dmul+0x234>
   81472:	4610      	mov	r0, r2
   81474:	4619      	mov	r1, r3
   81476:	e72c      	b.n	812d2 <__aeabi_dmul+0x24a>
   81478:	ea95 0f0c 	teq	r5, ip
   8147c:	d106      	bne.n	8148c <__aeabi_ddiv+0x1b0>
   8147e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81482:	f43f aefd 	beq.w	81280 <__aeabi_dmul+0x1f8>
   81486:	4610      	mov	r0, r2
   81488:	4619      	mov	r1, r3
   8148a:	e722      	b.n	812d2 <__aeabi_dmul+0x24a>
   8148c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81490:	bf18      	it	ne
   81492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81496:	f47f aec5 	bne.w	81224 <__aeabi_dmul+0x19c>
   8149a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8149e:	f47f af0d 	bne.w	812bc <__aeabi_dmul+0x234>
   814a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   814a6:	f47f aeeb 	bne.w	81280 <__aeabi_dmul+0x1f8>
   814aa:	e712      	b.n	812d2 <__aeabi_dmul+0x24a>

000814ac <__aeabi_d2uiz>:
   814ac:	004a      	lsls	r2, r1, #1
   814ae:	d211      	bcs.n	814d4 <__aeabi_d2uiz+0x28>
   814b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   814b4:	d211      	bcs.n	814da <__aeabi_d2uiz+0x2e>
   814b6:	d50d      	bpl.n	814d4 <__aeabi_d2uiz+0x28>
   814b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   814bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   814c0:	d40e      	bmi.n	814e0 <__aeabi_d2uiz+0x34>
   814c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   814c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   814ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   814ce:	fa23 f002 	lsr.w	r0, r3, r2
   814d2:	4770      	bx	lr
   814d4:	f04f 0000 	mov.w	r0, #0
   814d8:	4770      	bx	lr
   814da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   814de:	d102      	bne.n	814e6 <__aeabi_d2uiz+0x3a>
   814e0:	f04f 30ff 	mov.w	r0, #4294967295
   814e4:	4770      	bx	lr
   814e6:	f04f 0000 	mov.w	r0, #0
   814ea:	4770      	bx	lr

000814ec <__aeabi_frsub>:
   814ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   814f0:	e002      	b.n	814f8 <__addsf3>
   814f2:	bf00      	nop

000814f4 <__aeabi_fsub>:
   814f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000814f8 <__addsf3>:
   814f8:	0042      	lsls	r2, r0, #1
   814fa:	bf1f      	itttt	ne
   814fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81500:	ea92 0f03 	teqne	r2, r3
   81504:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81508:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8150c:	d06a      	beq.n	815e4 <__addsf3+0xec>
   8150e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   81512:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   81516:	bfc1      	itttt	gt
   81518:	18d2      	addgt	r2, r2, r3
   8151a:	4041      	eorgt	r1, r0
   8151c:	4048      	eorgt	r0, r1
   8151e:	4041      	eorgt	r1, r0
   81520:	bfb8      	it	lt
   81522:	425b      	neglt	r3, r3
   81524:	2b19      	cmp	r3, #25
   81526:	bf88      	it	hi
   81528:	4770      	bxhi	lr
   8152a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8152e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81532:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81536:	bf18      	it	ne
   81538:	4240      	negne	r0, r0
   8153a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8153e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   81542:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   81546:	bf18      	it	ne
   81548:	4249      	negne	r1, r1
   8154a:	ea92 0f03 	teq	r2, r3
   8154e:	d03f      	beq.n	815d0 <__addsf3+0xd8>
   81550:	f1a2 0201 	sub.w	r2, r2, #1
   81554:	fa41 fc03 	asr.w	ip, r1, r3
   81558:	eb10 000c 	adds.w	r0, r0, ip
   8155c:	f1c3 0320 	rsb	r3, r3, #32
   81560:	fa01 f103 	lsl.w	r1, r1, r3
   81564:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81568:	d502      	bpl.n	81570 <__addsf3+0x78>
   8156a:	4249      	negs	r1, r1
   8156c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81570:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81574:	d313      	bcc.n	8159e <__addsf3+0xa6>
   81576:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8157a:	d306      	bcc.n	8158a <__addsf3+0x92>
   8157c:	0840      	lsrs	r0, r0, #1
   8157e:	ea4f 0131 	mov.w	r1, r1, rrx
   81582:	f102 0201 	add.w	r2, r2, #1
   81586:	2afe      	cmp	r2, #254	; 0xfe
   81588:	d251      	bcs.n	8162e <__addsf3+0x136>
   8158a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8158e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81592:	bf08      	it	eq
   81594:	f020 0001 	biceq.w	r0, r0, #1
   81598:	ea40 0003 	orr.w	r0, r0, r3
   8159c:	4770      	bx	lr
   8159e:	0049      	lsls	r1, r1, #1
   815a0:	eb40 0000 	adc.w	r0, r0, r0
   815a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   815a8:	f1a2 0201 	sub.w	r2, r2, #1
   815ac:	d1ed      	bne.n	8158a <__addsf3+0x92>
   815ae:	fab0 fc80 	clz	ip, r0
   815b2:	f1ac 0c08 	sub.w	ip, ip, #8
   815b6:	ebb2 020c 	subs.w	r2, r2, ip
   815ba:	fa00 f00c 	lsl.w	r0, r0, ip
   815be:	bfaa      	itet	ge
   815c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   815c4:	4252      	neglt	r2, r2
   815c6:	4318      	orrge	r0, r3
   815c8:	bfbc      	itt	lt
   815ca:	40d0      	lsrlt	r0, r2
   815cc:	4318      	orrlt	r0, r3
   815ce:	4770      	bx	lr
   815d0:	f092 0f00 	teq	r2, #0
   815d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   815d8:	bf06      	itte	eq
   815da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   815de:	3201      	addeq	r2, #1
   815e0:	3b01      	subne	r3, #1
   815e2:	e7b5      	b.n	81550 <__addsf3+0x58>
   815e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   815e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   815ec:	bf18      	it	ne
   815ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   815f2:	d021      	beq.n	81638 <__addsf3+0x140>
   815f4:	ea92 0f03 	teq	r2, r3
   815f8:	d004      	beq.n	81604 <__addsf3+0x10c>
   815fa:	f092 0f00 	teq	r2, #0
   815fe:	bf08      	it	eq
   81600:	4608      	moveq	r0, r1
   81602:	4770      	bx	lr
   81604:	ea90 0f01 	teq	r0, r1
   81608:	bf1c      	itt	ne
   8160a:	2000      	movne	r0, #0
   8160c:	4770      	bxne	lr
   8160e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   81612:	d104      	bne.n	8161e <__addsf3+0x126>
   81614:	0040      	lsls	r0, r0, #1
   81616:	bf28      	it	cs
   81618:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   8161c:	4770      	bx	lr
   8161e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81622:	bf3c      	itt	cc
   81624:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   81628:	4770      	bxcc	lr
   8162a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8162e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81636:	4770      	bx	lr
   81638:	ea7f 6222 	mvns.w	r2, r2, asr #24
   8163c:	bf16      	itet	ne
   8163e:	4608      	movne	r0, r1
   81640:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81644:	4601      	movne	r1, r0
   81646:	0242      	lsls	r2, r0, #9
   81648:	bf06      	itte	eq
   8164a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8164e:	ea90 0f01 	teqeq	r0, r1
   81652:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81656:	4770      	bx	lr

00081658 <__aeabi_ui2f>:
   81658:	f04f 0300 	mov.w	r3, #0
   8165c:	e004      	b.n	81668 <__aeabi_i2f+0x8>
   8165e:	bf00      	nop

00081660 <__aeabi_i2f>:
   81660:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81664:	bf48      	it	mi
   81666:	4240      	negmi	r0, r0
   81668:	ea5f 0c00 	movs.w	ip, r0
   8166c:	bf08      	it	eq
   8166e:	4770      	bxeq	lr
   81670:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81674:	4601      	mov	r1, r0
   81676:	f04f 0000 	mov.w	r0, #0
   8167a:	e01c      	b.n	816b6 <__aeabi_l2f+0x2a>

0008167c <__aeabi_ul2f>:
   8167c:	ea50 0201 	orrs.w	r2, r0, r1
   81680:	bf08      	it	eq
   81682:	4770      	bxeq	lr
   81684:	f04f 0300 	mov.w	r3, #0
   81688:	e00a      	b.n	816a0 <__aeabi_l2f+0x14>
   8168a:	bf00      	nop

0008168c <__aeabi_l2f>:
   8168c:	ea50 0201 	orrs.w	r2, r0, r1
   81690:	bf08      	it	eq
   81692:	4770      	bxeq	lr
   81694:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81698:	d502      	bpl.n	816a0 <__aeabi_l2f+0x14>
   8169a:	4240      	negs	r0, r0
   8169c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   816a0:	ea5f 0c01 	movs.w	ip, r1
   816a4:	bf02      	ittt	eq
   816a6:	4684      	moveq	ip, r0
   816a8:	4601      	moveq	r1, r0
   816aa:	2000      	moveq	r0, #0
   816ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   816b0:	bf08      	it	eq
   816b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   816b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   816ba:	fabc f28c 	clz	r2, ip
   816be:	3a08      	subs	r2, #8
   816c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   816c4:	db10      	blt.n	816e8 <__aeabi_l2f+0x5c>
   816c6:	fa01 fc02 	lsl.w	ip, r1, r2
   816ca:	4463      	add	r3, ip
   816cc:	fa00 fc02 	lsl.w	ip, r0, r2
   816d0:	f1c2 0220 	rsb	r2, r2, #32
   816d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   816d8:	fa20 f202 	lsr.w	r2, r0, r2
   816dc:	eb43 0002 	adc.w	r0, r3, r2
   816e0:	bf08      	it	eq
   816e2:	f020 0001 	biceq.w	r0, r0, #1
   816e6:	4770      	bx	lr
   816e8:	f102 0220 	add.w	r2, r2, #32
   816ec:	fa01 fc02 	lsl.w	ip, r1, r2
   816f0:	f1c2 0220 	rsb	r2, r2, #32
   816f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   816f8:	fa21 f202 	lsr.w	r2, r1, r2
   816fc:	eb43 0002 	adc.w	r0, r3, r2
   81700:	bf08      	it	eq
   81702:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81706:	4770      	bx	lr

00081708 <__aeabi_fmul>:
   81708:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8170c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81710:	bf1e      	ittt	ne
   81712:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81716:	ea92 0f0c 	teqne	r2, ip
   8171a:	ea93 0f0c 	teqne	r3, ip
   8171e:	d06f      	beq.n	81800 <__aeabi_fmul+0xf8>
   81720:	441a      	add	r2, r3
   81722:	ea80 0c01 	eor.w	ip, r0, r1
   81726:	0240      	lsls	r0, r0, #9
   81728:	bf18      	it	ne
   8172a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8172e:	d01e      	beq.n	8176e <__aeabi_fmul+0x66>
   81730:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81734:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81738:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   8173c:	fba0 3101 	umull	r3, r1, r0, r1
   81740:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81744:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81748:	bf3e      	ittt	cc
   8174a:	0049      	lslcc	r1, r1, #1
   8174c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81750:	005b      	lslcc	r3, r3, #1
   81752:	ea40 0001 	orr.w	r0, r0, r1
   81756:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8175a:	2afd      	cmp	r2, #253	; 0xfd
   8175c:	d81d      	bhi.n	8179a <__aeabi_fmul+0x92>
   8175e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81762:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81766:	bf08      	it	eq
   81768:	f020 0001 	biceq.w	r0, r0, #1
   8176c:	4770      	bx	lr
   8176e:	f090 0f00 	teq	r0, #0
   81772:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81776:	bf08      	it	eq
   81778:	0249      	lsleq	r1, r1, #9
   8177a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8177e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81782:	3a7f      	subs	r2, #127	; 0x7f
   81784:	bfc2      	ittt	gt
   81786:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8178a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8178e:	4770      	bxgt	lr
   81790:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81794:	f04f 0300 	mov.w	r3, #0
   81798:	3a01      	subs	r2, #1
   8179a:	dc5d      	bgt.n	81858 <__aeabi_fmul+0x150>
   8179c:	f112 0f19 	cmn.w	r2, #25
   817a0:	bfdc      	itt	le
   817a2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   817a6:	4770      	bxle	lr
   817a8:	f1c2 0200 	rsb	r2, r2, #0
   817ac:	0041      	lsls	r1, r0, #1
   817ae:	fa21 f102 	lsr.w	r1, r1, r2
   817b2:	f1c2 0220 	rsb	r2, r2, #32
   817b6:	fa00 fc02 	lsl.w	ip, r0, r2
   817ba:	ea5f 0031 	movs.w	r0, r1, rrx
   817be:	f140 0000 	adc.w	r0, r0, #0
   817c2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   817c6:	bf08      	it	eq
   817c8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   817cc:	4770      	bx	lr
   817ce:	f092 0f00 	teq	r2, #0
   817d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   817d6:	bf02      	ittt	eq
   817d8:	0040      	lsleq	r0, r0, #1
   817da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   817de:	3a01      	subeq	r2, #1
   817e0:	d0f9      	beq.n	817d6 <__aeabi_fmul+0xce>
   817e2:	ea40 000c 	orr.w	r0, r0, ip
   817e6:	f093 0f00 	teq	r3, #0
   817ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   817ee:	bf02      	ittt	eq
   817f0:	0049      	lsleq	r1, r1, #1
   817f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   817f6:	3b01      	subeq	r3, #1
   817f8:	d0f9      	beq.n	817ee <__aeabi_fmul+0xe6>
   817fa:	ea41 010c 	orr.w	r1, r1, ip
   817fe:	e78f      	b.n	81720 <__aeabi_fmul+0x18>
   81800:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81804:	ea92 0f0c 	teq	r2, ip
   81808:	bf18      	it	ne
   8180a:	ea93 0f0c 	teqne	r3, ip
   8180e:	d00a      	beq.n	81826 <__aeabi_fmul+0x11e>
   81810:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81814:	bf18      	it	ne
   81816:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8181a:	d1d8      	bne.n	817ce <__aeabi_fmul+0xc6>
   8181c:	ea80 0001 	eor.w	r0, r0, r1
   81820:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81824:	4770      	bx	lr
   81826:	f090 0f00 	teq	r0, #0
   8182a:	bf17      	itett	ne
   8182c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81830:	4608      	moveq	r0, r1
   81832:	f091 0f00 	teqne	r1, #0
   81836:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   8183a:	d014      	beq.n	81866 <__aeabi_fmul+0x15e>
   8183c:	ea92 0f0c 	teq	r2, ip
   81840:	d101      	bne.n	81846 <__aeabi_fmul+0x13e>
   81842:	0242      	lsls	r2, r0, #9
   81844:	d10f      	bne.n	81866 <__aeabi_fmul+0x15e>
   81846:	ea93 0f0c 	teq	r3, ip
   8184a:	d103      	bne.n	81854 <__aeabi_fmul+0x14c>
   8184c:	024b      	lsls	r3, r1, #9
   8184e:	bf18      	it	ne
   81850:	4608      	movne	r0, r1
   81852:	d108      	bne.n	81866 <__aeabi_fmul+0x15e>
   81854:	ea80 0001 	eor.w	r0, r0, r1
   81858:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8185c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81860:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81864:	4770      	bx	lr
   81866:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8186a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8186e:	4770      	bx	lr

00081870 <__aeabi_fdiv>:
   81870:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81874:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81878:	bf1e      	ittt	ne
   8187a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8187e:	ea92 0f0c 	teqne	r2, ip
   81882:	ea93 0f0c 	teqne	r3, ip
   81886:	d069      	beq.n	8195c <__aeabi_fdiv+0xec>
   81888:	eba2 0203 	sub.w	r2, r2, r3
   8188c:	ea80 0c01 	eor.w	ip, r0, r1
   81890:	0249      	lsls	r1, r1, #9
   81892:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81896:	d037      	beq.n	81908 <__aeabi_fdiv+0x98>
   81898:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8189c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   818a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   818a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   818a8:	428b      	cmp	r3, r1
   818aa:	bf38      	it	cc
   818ac:	005b      	lslcc	r3, r3, #1
   818ae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   818b2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   818b6:	428b      	cmp	r3, r1
   818b8:	bf24      	itt	cs
   818ba:	1a5b      	subcs	r3, r3, r1
   818bc:	ea40 000c 	orrcs.w	r0, r0, ip
   818c0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   818c4:	bf24      	itt	cs
   818c6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   818ca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   818ce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   818d2:	bf24      	itt	cs
   818d4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   818d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   818dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   818e0:	bf24      	itt	cs
   818e2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   818e6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   818ea:	011b      	lsls	r3, r3, #4
   818ec:	bf18      	it	ne
   818ee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   818f2:	d1e0      	bne.n	818b6 <__aeabi_fdiv+0x46>
   818f4:	2afd      	cmp	r2, #253	; 0xfd
   818f6:	f63f af50 	bhi.w	8179a <__aeabi_fmul+0x92>
   818fa:	428b      	cmp	r3, r1
   818fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81900:	bf08      	it	eq
   81902:	f020 0001 	biceq.w	r0, r0, #1
   81906:	4770      	bx	lr
   81908:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8190c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81910:	327f      	adds	r2, #127	; 0x7f
   81912:	bfc2      	ittt	gt
   81914:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81918:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8191c:	4770      	bxgt	lr
   8191e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81922:	f04f 0300 	mov.w	r3, #0
   81926:	3a01      	subs	r2, #1
   81928:	e737      	b.n	8179a <__aeabi_fmul+0x92>
   8192a:	f092 0f00 	teq	r2, #0
   8192e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81932:	bf02      	ittt	eq
   81934:	0040      	lsleq	r0, r0, #1
   81936:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8193a:	3a01      	subeq	r2, #1
   8193c:	d0f9      	beq.n	81932 <__aeabi_fdiv+0xc2>
   8193e:	ea40 000c 	orr.w	r0, r0, ip
   81942:	f093 0f00 	teq	r3, #0
   81946:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8194a:	bf02      	ittt	eq
   8194c:	0049      	lsleq	r1, r1, #1
   8194e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81952:	3b01      	subeq	r3, #1
   81954:	d0f9      	beq.n	8194a <__aeabi_fdiv+0xda>
   81956:	ea41 010c 	orr.w	r1, r1, ip
   8195a:	e795      	b.n	81888 <__aeabi_fdiv+0x18>
   8195c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81960:	ea92 0f0c 	teq	r2, ip
   81964:	d108      	bne.n	81978 <__aeabi_fdiv+0x108>
   81966:	0242      	lsls	r2, r0, #9
   81968:	f47f af7d 	bne.w	81866 <__aeabi_fmul+0x15e>
   8196c:	ea93 0f0c 	teq	r3, ip
   81970:	f47f af70 	bne.w	81854 <__aeabi_fmul+0x14c>
   81974:	4608      	mov	r0, r1
   81976:	e776      	b.n	81866 <__aeabi_fmul+0x15e>
   81978:	ea93 0f0c 	teq	r3, ip
   8197c:	d104      	bne.n	81988 <__aeabi_fdiv+0x118>
   8197e:	024b      	lsls	r3, r1, #9
   81980:	f43f af4c 	beq.w	8181c <__aeabi_fmul+0x114>
   81984:	4608      	mov	r0, r1
   81986:	e76e      	b.n	81866 <__aeabi_fmul+0x15e>
   81988:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8198c:	bf18      	it	ne
   8198e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81992:	d1ca      	bne.n	8192a <__aeabi_fdiv+0xba>
   81994:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81998:	f47f af5c 	bne.w	81854 <__aeabi_fmul+0x14c>
   8199c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   819a0:	f47f af3c 	bne.w	8181c <__aeabi_fmul+0x114>
   819a4:	e75f      	b.n	81866 <__aeabi_fmul+0x15e>
   819a6:	bf00      	nop

000819a8 <__gesf2>:
   819a8:	f04f 3cff 	mov.w	ip, #4294967295
   819ac:	e006      	b.n	819bc <__cmpsf2+0x4>
   819ae:	bf00      	nop

000819b0 <__lesf2>:
   819b0:	f04f 0c01 	mov.w	ip, #1
   819b4:	e002      	b.n	819bc <__cmpsf2+0x4>
   819b6:	bf00      	nop

000819b8 <__cmpsf2>:
   819b8:	f04f 0c01 	mov.w	ip, #1
   819bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   819c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   819c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   819c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   819cc:	bf18      	it	ne
   819ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   819d2:	d011      	beq.n	819f8 <__cmpsf2+0x40>
   819d4:	b001      	add	sp, #4
   819d6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   819da:	bf18      	it	ne
   819dc:	ea90 0f01 	teqne	r0, r1
   819e0:	bf58      	it	pl
   819e2:	ebb2 0003 	subspl.w	r0, r2, r3
   819e6:	bf88      	it	hi
   819e8:	17c8      	asrhi	r0, r1, #31
   819ea:	bf38      	it	cc
   819ec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   819f0:	bf18      	it	ne
   819f2:	f040 0001 	orrne.w	r0, r0, #1
   819f6:	4770      	bx	lr
   819f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   819fc:	d102      	bne.n	81a04 <__cmpsf2+0x4c>
   819fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81a02:	d105      	bne.n	81a10 <__cmpsf2+0x58>
   81a04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81a08:	d1e4      	bne.n	819d4 <__cmpsf2+0x1c>
   81a0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81a0e:	d0e1      	beq.n	819d4 <__cmpsf2+0x1c>
   81a10:	f85d 0b04 	ldr.w	r0, [sp], #4
   81a14:	4770      	bx	lr
   81a16:	bf00      	nop

00081a18 <__aeabi_cfrcmple>:
   81a18:	4684      	mov	ip, r0
   81a1a:	4608      	mov	r0, r1
   81a1c:	4661      	mov	r1, ip
   81a1e:	e7ff      	b.n	81a20 <__aeabi_cfcmpeq>

00081a20 <__aeabi_cfcmpeq>:
   81a20:	b50f      	push	{r0, r1, r2, r3, lr}
   81a22:	f7ff ffc9 	bl	819b8 <__cmpsf2>
   81a26:	2800      	cmp	r0, #0
   81a28:	bf48      	it	mi
   81a2a:	f110 0f00 	cmnmi.w	r0, #0
   81a2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081a30 <__aeabi_fcmpeq>:
   81a30:	f84d ed08 	str.w	lr, [sp, #-8]!
   81a34:	f7ff fff4 	bl	81a20 <__aeabi_cfcmpeq>
   81a38:	bf0c      	ite	eq
   81a3a:	2001      	moveq	r0, #1
   81a3c:	2000      	movne	r0, #0
   81a3e:	f85d fb08 	ldr.w	pc, [sp], #8
   81a42:	bf00      	nop

00081a44 <__aeabi_fcmplt>:
   81a44:	f84d ed08 	str.w	lr, [sp, #-8]!
   81a48:	f7ff ffea 	bl	81a20 <__aeabi_cfcmpeq>
   81a4c:	bf34      	ite	cc
   81a4e:	2001      	movcc	r0, #1
   81a50:	2000      	movcs	r0, #0
   81a52:	f85d fb08 	ldr.w	pc, [sp], #8
   81a56:	bf00      	nop

00081a58 <__aeabi_fcmple>:
   81a58:	f84d ed08 	str.w	lr, [sp, #-8]!
   81a5c:	f7ff ffe0 	bl	81a20 <__aeabi_cfcmpeq>
   81a60:	bf94      	ite	ls
   81a62:	2001      	movls	r0, #1
   81a64:	2000      	movhi	r0, #0
   81a66:	f85d fb08 	ldr.w	pc, [sp], #8
   81a6a:	bf00      	nop

00081a6c <__aeabi_fcmpge>:
   81a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81a70:	f7ff ffd2 	bl	81a18 <__aeabi_cfrcmple>
   81a74:	bf94      	ite	ls
   81a76:	2001      	movls	r0, #1
   81a78:	2000      	movhi	r0, #0
   81a7a:	f85d fb08 	ldr.w	pc, [sp], #8
   81a7e:	bf00      	nop

00081a80 <__aeabi_fcmpgt>:
   81a80:	f84d ed08 	str.w	lr, [sp, #-8]!
   81a84:	f7ff ffc8 	bl	81a18 <__aeabi_cfrcmple>
   81a88:	bf34      	ite	cc
   81a8a:	2001      	movcc	r0, #1
   81a8c:	2000      	movcs	r0, #0
   81a8e:	f85d fb08 	ldr.w	pc, [sp], #8
   81a92:	bf00      	nop

00081a94 <__aeabi_f2iz>:
   81a94:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81a98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81a9c:	d30f      	bcc.n	81abe <__aeabi_f2iz+0x2a>
   81a9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81aa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81aa6:	d90d      	bls.n	81ac4 <__aeabi_f2iz+0x30>
   81aa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81ab0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81ab4:	fa23 f002 	lsr.w	r0, r3, r2
   81ab8:	bf18      	it	ne
   81aba:	4240      	negne	r0, r0
   81abc:	4770      	bx	lr
   81abe:	f04f 0000 	mov.w	r0, #0
   81ac2:	4770      	bx	lr
   81ac4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81ac8:	d101      	bne.n	81ace <__aeabi_f2iz+0x3a>
   81aca:	0242      	lsls	r2, r0, #9
   81acc:	d105      	bne.n	81ada <__aeabi_f2iz+0x46>
   81ace:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81ad2:	bf08      	it	eq
   81ad4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81ad8:	4770      	bx	lr
   81ada:	f04f 0000 	mov.w	r0, #0
   81ade:	4770      	bx	lr

00081ae0 <__libc_init_array>:
   81ae0:	b570      	push	{r4, r5, r6, lr}
   81ae2:	4e0f      	ldr	r6, [pc, #60]	; (81b20 <__libc_init_array+0x40>)
   81ae4:	4d0f      	ldr	r5, [pc, #60]	; (81b24 <__libc_init_array+0x44>)
   81ae6:	1b76      	subs	r6, r6, r5
   81ae8:	10b6      	asrs	r6, r6, #2
   81aea:	bf18      	it	ne
   81aec:	2400      	movne	r4, #0
   81aee:	d005      	beq.n	81afc <__libc_init_array+0x1c>
   81af0:	3401      	adds	r4, #1
   81af2:	f855 3b04 	ldr.w	r3, [r5], #4
   81af6:	4798      	blx	r3
   81af8:	42a6      	cmp	r6, r4
   81afa:	d1f9      	bne.n	81af0 <__libc_init_array+0x10>
   81afc:	4e0a      	ldr	r6, [pc, #40]	; (81b28 <__libc_init_array+0x48>)
   81afe:	4d0b      	ldr	r5, [pc, #44]	; (81b2c <__libc_init_array+0x4c>)
   81b00:	f000 f90c 	bl	81d1c <_init>
   81b04:	1b76      	subs	r6, r6, r5
   81b06:	10b6      	asrs	r6, r6, #2
   81b08:	bf18      	it	ne
   81b0a:	2400      	movne	r4, #0
   81b0c:	d006      	beq.n	81b1c <__libc_init_array+0x3c>
   81b0e:	3401      	adds	r4, #1
   81b10:	f855 3b04 	ldr.w	r3, [r5], #4
   81b14:	4798      	blx	r3
   81b16:	42a6      	cmp	r6, r4
   81b18:	d1f9      	bne.n	81b0e <__libc_init_array+0x2e>
   81b1a:	bd70      	pop	{r4, r5, r6, pc}
   81b1c:	bd70      	pop	{r4, r5, r6, pc}
   81b1e:	bf00      	nop
   81b20:	00081d28 	.word	0x00081d28
   81b24:	00081d28 	.word	0x00081d28
   81b28:	00081d30 	.word	0x00081d30
   81b2c:	00081d28 	.word	0x00081d28

00081b30 <register_fini>:
   81b30:	4b02      	ldr	r3, [pc, #8]	; (81b3c <register_fini+0xc>)
   81b32:	b113      	cbz	r3, 81b3a <register_fini+0xa>
   81b34:	4802      	ldr	r0, [pc, #8]	; (81b40 <register_fini+0x10>)
   81b36:	f000 b805 	b.w	81b44 <atexit>
   81b3a:	4770      	bx	lr
   81b3c:	00000000 	.word	0x00000000
   81b40:	00081b51 	.word	0x00081b51

00081b44 <atexit>:
   81b44:	2300      	movs	r3, #0
   81b46:	4601      	mov	r1, r0
   81b48:	461a      	mov	r2, r3
   81b4a:	4618      	mov	r0, r3
   81b4c:	f000 b81e 	b.w	81b8c <__register_exitproc>

00081b50 <__libc_fini_array>:
   81b50:	b538      	push	{r3, r4, r5, lr}
   81b52:	4c0a      	ldr	r4, [pc, #40]	; (81b7c <__libc_fini_array+0x2c>)
   81b54:	4d0a      	ldr	r5, [pc, #40]	; (81b80 <__libc_fini_array+0x30>)
   81b56:	1b64      	subs	r4, r4, r5
   81b58:	10a4      	asrs	r4, r4, #2
   81b5a:	d00a      	beq.n	81b72 <__libc_fini_array+0x22>
   81b5c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81b60:	3b01      	subs	r3, #1
   81b62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81b66:	3c01      	subs	r4, #1
   81b68:	f855 3904 	ldr.w	r3, [r5], #-4
   81b6c:	4798      	blx	r3
   81b6e:	2c00      	cmp	r4, #0
   81b70:	d1f9      	bne.n	81b66 <__libc_fini_array+0x16>
   81b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81b76:	f000 b8db 	b.w	81d30 <_fini>
   81b7a:	bf00      	nop
   81b7c:	00081d40 	.word	0x00081d40
   81b80:	00081d3c 	.word	0x00081d3c

00081b84 <__retarget_lock_acquire_recursive>:
   81b84:	4770      	bx	lr
   81b86:	bf00      	nop

00081b88 <__retarget_lock_release_recursive>:
   81b88:	4770      	bx	lr
   81b8a:	bf00      	nop

00081b8c <__register_exitproc>:
   81b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81b90:	4d2c      	ldr	r5, [pc, #176]	; (81c44 <__register_exitproc+0xb8>)
   81b92:	4606      	mov	r6, r0
   81b94:	6828      	ldr	r0, [r5, #0]
   81b96:	4698      	mov	r8, r3
   81b98:	460f      	mov	r7, r1
   81b9a:	4691      	mov	r9, r2
   81b9c:	f7ff fff2 	bl	81b84 <__retarget_lock_acquire_recursive>
   81ba0:	4b29      	ldr	r3, [pc, #164]	; (81c48 <__register_exitproc+0xbc>)
   81ba2:	681c      	ldr	r4, [r3, #0]
   81ba4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81ba8:	2b00      	cmp	r3, #0
   81baa:	d03e      	beq.n	81c2a <__register_exitproc+0x9e>
   81bac:	685a      	ldr	r2, [r3, #4]
   81bae:	2a1f      	cmp	r2, #31
   81bb0:	dc1c      	bgt.n	81bec <__register_exitproc+0x60>
   81bb2:	f102 0e01 	add.w	lr, r2, #1
   81bb6:	b176      	cbz	r6, 81bd6 <__register_exitproc+0x4a>
   81bb8:	2101      	movs	r1, #1
   81bba:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81bbe:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81bc2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81bc6:	4091      	lsls	r1, r2
   81bc8:	4308      	orrs	r0, r1
   81bca:	2e02      	cmp	r6, #2
   81bcc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81bd0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81bd4:	d023      	beq.n	81c1e <__register_exitproc+0x92>
   81bd6:	3202      	adds	r2, #2
   81bd8:	f8c3 e004 	str.w	lr, [r3, #4]
   81bdc:	6828      	ldr	r0, [r5, #0]
   81bde:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81be2:	f7ff ffd1 	bl	81b88 <__retarget_lock_release_recursive>
   81be6:	2000      	movs	r0, #0
   81be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81bec:	4b17      	ldr	r3, [pc, #92]	; (81c4c <__register_exitproc+0xc0>)
   81bee:	b30b      	cbz	r3, 81c34 <__register_exitproc+0xa8>
   81bf0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81bf4:	f3af 8000 	nop.w
   81bf8:	4603      	mov	r3, r0
   81bfa:	b1d8      	cbz	r0, 81c34 <__register_exitproc+0xa8>
   81bfc:	2000      	movs	r0, #0
   81bfe:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81c02:	f04f 0e01 	mov.w	lr, #1
   81c06:	6058      	str	r0, [r3, #4]
   81c08:	6019      	str	r1, [r3, #0]
   81c0a:	4602      	mov	r2, r0
   81c0c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c10:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81c14:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81c18:	2e00      	cmp	r6, #0
   81c1a:	d0dc      	beq.n	81bd6 <__register_exitproc+0x4a>
   81c1c:	e7cc      	b.n	81bb8 <__register_exitproc+0x2c>
   81c1e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81c22:	4301      	orrs	r1, r0
   81c24:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81c28:	e7d5      	b.n	81bd6 <__register_exitproc+0x4a>
   81c2a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81c2e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c32:	e7bb      	b.n	81bac <__register_exitproc+0x20>
   81c34:	6828      	ldr	r0, [r5, #0]
   81c36:	f7ff ffa7 	bl	81b88 <__retarget_lock_release_recursive>
   81c3a:	f04f 30ff 	mov.w	r0, #4294967295
   81c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c42:	bf00      	nop
   81c44:	20000430 	.word	0x20000430
   81c48:	00081d18 	.word	0x00081d18
   81c4c:	00000000 	.word	0x00000000
   81c50:	304e4143 	.word	0x304e4143
   81c54:	73656d20 	.word	0x73656d20
   81c58:	65676173 	.word	0x65676173
   81c5c:	72726120 	.word	0x72726120
   81c60:	64657669 	.word	0x64657669
   81c64:	206e6920 	.word	0x206e6920
   81c68:	2d6e6f6e 	.word	0x2d6e6f6e
   81c6c:	64657375 	.word	0x64657375
   81c70:	69616d20 	.word	0x69616d20
   81c74:	786f626c 	.word	0x786f626c
   81c78:	00000d0a 	.word	0x00000d0a
   81c7c:	4f525245 	.word	0x4f525245
   81c80:	43203a52 	.word	0x43203a52
   81c84:	6e6e6168 	.word	0x6e6e6168
   81c88:	6e206c65 	.word	0x6e206c65
   81c8c:	6520746f 	.word	0x6520746f
   81c90:	6c62616e 	.word	0x6c62616e
   81c94:	00006465 	.word	0x00006465
   81c98:	4f525245 	.word	0x4f525245
   81c9c:	6d203a52 	.word	0x6d203a52
   81ca0:	726f746f 	.word	0x726f746f
   81ca4:	696e6920 	.word	0x696e6920
   81ca8:	61662074 	.word	0x61662074
   81cac:	64656c69 	.word	0x64656c69
   81cb0:	00000000 	.word	0x00000000
   81cb4:	3a755f43 	.word	0x3a755f43
   81cb8:	09642520 	.word	0x09642520
   81cbc:	00000000 	.word	0x00000000
   81cc0:	61675f49 	.word	0x61675f49
   81cc4:	203a6e69 	.word	0x203a6e69
   81cc8:	00096425 	.word	0x00096425
   81ccc:	5f444950 	.word	0x5f444950
   81cd0:	6f727265 	.word	0x6f727265
   81cd4:	75735f72 	.word	0x75735f72
   81cd8:	25203a6d 	.word	0x25203a6d
   81cdc:	00000d64 	.word	0x00000d64
   81ce0:	6c756e28 	.word	0x6c756e28
   81ce4:	0000296c 	.word	0x0000296c
   81ce8:	204d5750 	.word	0x204d5750
   81cec:	74696e69 	.word	0x74696e69
   81cf0:	0d2e2e2e 	.word	0x0d2e2e2e
   81cf4:	00000000 	.word	0x00000000
   81cf8:	3a525245 	.word	0x3a525245
   81cfc:	52415520 	.word	0x52415520
   81d00:	58522054 	.word	0x58522054
   81d04:	66756220 	.word	0x66756220
   81d08:	20726566 	.word	0x20726566
   81d0c:	66207369 	.word	0x66207369
   81d10:	0a6c6c75 	.word	0x0a6c6c75
   81d14:	0000000d 	.word	0x0000000d

00081d18 <_global_impure_ptr>:
   81d18:	20000008                                ... 

00081d1c <_init>:
   81d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d1e:	bf00      	nop
   81d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d22:	bc08      	pop	{r3}
   81d24:	469e      	mov	lr, r3
   81d26:	4770      	bx	lr

00081d28 <__init_array_start>:
   81d28:	00081b31 	.word	0x00081b31

00081d2c <__frame_dummy_init_array_entry>:
   81d2c:	00080119                                ....

00081d30 <_fini>:
   81d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d32:	bf00      	nop
   81d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d36:	bc08      	pop	{r3}
   81d38:	469e      	mov	lr, r3
   81d3a:	4770      	bx	lr

00081d3c <__fini_array_start>:
   81d3c:	000800f5 	.word	0x000800f5
