
uart-driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000104  00800100  00000cdc  00000d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800204  00800204  00000e74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b48  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000931  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ee  00000000  00000000  00002425  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00002a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000490  00000000  00000000  00002b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000259  00000000  00000000  00002fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ed       	ldi	r30, 0xDC	; 220
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 30       	cpi	r26, 0x0E	; 14
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f e3       	ldi	r18, 0x3F	; 63
  b0:	8d e0       	ldi	r24, 0x0D	; 13
  b2:	93 e0       	ldi	r25, 0x03	; 3
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x6>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x10>
  be:	00 00       	nop

int main(void)
{
	int sleep_time = 1000;
    _delay_ms(sleep_time);
	usart_init(MYUBRR);
  c0:	8f e1       	ldi	r24, 0x1F	; 31
  c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <usart_init>
	

	xmem_init();
  c6:	0e 94 01 01 	call	0x202	; 0x202 <xmem_init>

	//DDRA = 0;

	SRAM_test();
  ca:	0e 94 71 00 	call	0xe2	; 0xe2 <SRAM_test>
  ce:	2f e7       	ldi	r18, 0x7F	; 127
  d0:	8a e1       	ldi	r24, 0x1A	; 26
  d2:	96 e0       	ldi	r25, 0x06	; 6
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x26>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x30>
  de:	00 00       	nop
  e0:	f6 cf       	rjmp	.-20     	; 0xce <main+0x20>

000000e2 <SRAM_test>:
#include "sram_test.h"

#include <stdlib.h>
#include <stdint.h>
void SRAM_test(void)
{
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\r\n");
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 cd 01 	call	0x39a	; 0x39a <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
  f6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
  fa:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
  fc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdint.h>
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
 104:	00 e0       	ldi	r16, 0x00	; 0
 106:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 108:	20 c0       	rjmp	.+64     	; 0x14a <SRAM_test+0x68>
		uint8_t some_value = rand();
 10a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
		ext_ram[i] = some_value;
 10e:	fe 01       	movw	r30, r28
 110:	f8 5e       	subi	r31, 0xE8	; 232
 112:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
 114:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 116:	28 17       	cp	r18, r24
 118:	b9 f0       	breq	.+46     	; 0x148 <SRAM_test+0x66>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
 11a:	99 27       	eor	r25, r25
 11c:	9f 93       	push	r25
 11e:	8f 93       	push	r24
 120:	1f 92       	push	r1
 122:	2f 93       	push	r18
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	81 e2       	ldi	r24, 0x21	; 33
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	9f 93       	push	r25
 12e:	8f 93       	push	r24
 130:	0e 94 b7 01 	call	0x36e	; 0x36e <printf>
			write_errors++;
 134:	0f 5f       	subi	r16, 0xFF	; 255
 136:	1f 4f       	sbci	r17, 0xFF	; 255
 138:	8d b7       	in	r24, 0x3d	; 61
 13a:	9e b7       	in	r25, 0x3e	; 62
 13c:	08 96       	adiw	r24, 0x08	; 8
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	9e bf       	out	0x3e, r25	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	c1 15       	cp	r28, r1
 14c:	98 e0       	ldi	r25, 0x08	; 8
 14e:	d9 07       	cpc	r29, r25
 150:	e0 f2       	brcs	.-72     	; 0x10a <SRAM_test+0x28>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
 152:	c7 01       	movw	r24, r14
 154:	0e 94 61 01 	call	0x2c2	; 0x2c2 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 15c:	e1 2c       	mov	r14, r1
 15e:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 160:	20 c0       	rjmp	.+64     	; 0x1a2 <SRAM_test+0xc0>
		uint8_t some_value = rand();
 162:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
		uint8_t retreived_value = ext_ram[i];
 166:	fe 01       	movw	r30, r28
 168:	f8 5e       	subi	r31, 0xE8	; 232
 16a:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 16c:	28 17       	cp	r18, r24
 16e:	c1 f0       	breq	.+48     	; 0x1a0 <SRAM_test+0xbe>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
 170:	99 27       	eor	r25, r25
 172:	9f 93       	push	r25
 174:	8f 93       	push	r24
 176:	1f 92       	push	r1
 178:	2f 93       	push	r18
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	8b e5       	ldi	r24, 0x5B	; 91
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	9f 93       	push	r25
 184:	8f 93       	push	r24
 186:	0e 94 b7 01 	call	0x36e	; 0x36e <printf>
			retrieval_errors++;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	e8 1a       	sub	r14, r24
 18e:	f8 0a       	sbc	r15, r24
 190:	8d b7       	in	r24, 0x3d	; 61
 192:	9e b7       	in	r25, 0x3e	; 62
 194:	08 96       	adiw	r24, 0x08	; 8
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	9e bf       	out	0x3e, r25	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	c1 15       	cp	r28, r1
 1a4:	98 e0       	ldi	r25, 0x08	; 8
 1a6:	d9 07       	cpc	r29, r25
 1a8:	e0 f2       	brcs	.-72     	; 0x162 <SRAM_test+0x80>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \r\n%4d errors in write phase and \r\n%4d errors in retrieval phase\r\n\r\n", write_errors, retrieval_errors);
 1aa:	ff 92       	push	r15
 1ac:	ef 92       	push	r14
 1ae:	1f 93       	push	r17
 1b0:	0f 93       	push	r16
 1b2:	89 e9       	ldi	r24, 0x99	; 153
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9f 93       	push	r25
 1b8:	8f 93       	push	r24
 1ba:	0e 94 b7 01 	call	0x36e	; 0x36e <printf>
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	08 95       	ret

000001d8 <usart_transmit>:
	fdevopen(usart_transmit, usart_receive);
}

void usart_transmit(unsigned char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) {	
 1d8:	5d 9b       	sbis	0x0b, 5	; 11
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <usart_transmit>
	}
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1dc:	8c b9       	out	0x0c, r24	; 12
 1de:	08 95       	ret

000001e0 <usart_receive>:
}

unsigned char usart_receive(void) {
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) ) {
 1e0:	5f 9b       	sbis	0x0b, 7	; 11
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <usart_receive>
	}
	/* Get and return received data from buffer */
	return UDR0;
 1e4:	8c b1       	in	r24, 0x0c	; 12
}
 1e6:	08 95       	ret

000001e8 <usart_init>:
#include <avr/io.h>
#include "uart_driver.h"

void usart_init(uint8_t ubrr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 1e8:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)ubrr;
 1ea:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1ec:	88 e1       	ldi	r24, 0x18	; 24
 1ee:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
 1f0:	86 e8       	ldi	r24, 0x86	; 134
 1f2:	80 bd       	out	0x20, r24	; 32
	fdevopen(usart_transmit, usart_receive);
 1f4:	60 ef       	ldi	r22, 0xF0	; 240
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	8c ee       	ldi	r24, 0xEC	; 236
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <fdevopen>
 200:	08 95       	ret

00000202 <xmem_init>:
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1 << SRE); //enable XMEM
 202:	85 b7       	in	r24, 0x35	; 53
 204:	80 68       	ori	r24, 0x80	; 128
 206:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); //bit masking
 208:	80 b7       	in	r24, 0x30	; 48
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	80 bf       	out	0x30, r24	; 48
	printf("init.....   ");
 20e:	86 ef       	ldi	r24, 0xF6	; 246
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	9f 93       	push	r25
 214:	8f 93       	push	r24
 216:	0e 94 b7 01 	call	0x36e	; 0x36e <printf>
	
	
	
}
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	08 95       	ret

00000220 <do_rand>:
 220:	8f 92       	push	r8
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	68 81       	ld	r22, Y
 238:	79 81       	ldd	r23, Y+1	; 0x01
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	9b 81       	ldd	r25, Y+3	; 0x03
 23e:	61 15       	cp	r22, r1
 240:	71 05       	cpc	r23, r1
 242:	81 05       	cpc	r24, r1
 244:	91 05       	cpc	r25, r1
 246:	21 f4       	brne	.+8      	; 0x250 <do_rand+0x30>
 248:	64 e2       	ldi	r22, 0x24	; 36
 24a:	79 ed       	ldi	r23, 0xD9	; 217
 24c:	8b e5       	ldi	r24, 0x5B	; 91
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	2d e1       	ldi	r18, 0x1D	; 29
 252:	33 ef       	ldi	r19, 0xF3	; 243
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	0e 94 d2 05 	call	0xba4	; 0xba4 <__divmodsi4>
 25c:	49 01       	movw	r8, r18
 25e:	5a 01       	movw	r10, r20
 260:	9b 01       	movw	r18, r22
 262:	ac 01       	movw	r20, r24
 264:	a7 ea       	ldi	r26, 0xA7	; 167
 266:	b1 e4       	ldi	r27, 0x41	; 65
 268:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__muluhisi3>
 26c:	6b 01       	movw	r12, r22
 26e:	7c 01       	movw	r14, r24
 270:	ac ee       	ldi	r26, 0xEC	; 236
 272:	b4 ef       	ldi	r27, 0xF4	; 244
 274:	a5 01       	movw	r20, r10
 276:	94 01       	movw	r18, r8
 278:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__mulohisi3>
 27c:	dc 01       	movw	r26, r24
 27e:	cb 01       	movw	r24, r22
 280:	8c 0d       	add	r24, r12
 282:	9d 1d       	adc	r25, r13
 284:	ae 1d       	adc	r26, r14
 286:	bf 1d       	adc	r27, r15
 288:	b7 ff       	sbrs	r27, 7
 28a:	03 c0       	rjmp	.+6      	; 0x292 <do_rand+0x72>
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	a1 09       	sbc	r26, r1
 290:	b0 48       	sbci	r27, 0x80	; 128
 292:	88 83       	st	Y, r24
 294:	99 83       	std	Y+1, r25	; 0x01
 296:	aa 83       	std	Y+2, r26	; 0x02
 298:	bb 83       	std	Y+3, r27	; 0x03
 29a:	9f 77       	andi	r25, 0x7F	; 127
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	af 90       	pop	r10
 2ac:	9f 90       	pop	r9
 2ae:	8f 90       	pop	r8
 2b0:	08 95       	ret

000002b2 <rand_r>:
 2b2:	0e 94 10 01 	call	0x220	; 0x220 <do_rand>
 2b6:	08 95       	ret

000002b8 <rand>:
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 10 01 	call	0x220	; 0x220 <do_rand>
 2c0:	08 95       	ret

000002c2 <srand>:
 2c2:	a0 e0       	ldi	r26, 0x00	; 0
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ce:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2d2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2d6:	08 95       	ret

000002d8 <fdevopen>:
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	31 f4       	brne	.+12     	; 0x2f0 <fdevopen+0x18>
 2e4:	61 15       	cp	r22, r1
 2e6:	71 05       	cpc	r23, r1
 2e8:	19 f4       	brne	.+6      	; 0x2f0 <fdevopen+0x18>
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	3a c0       	rjmp	.+116    	; 0x364 <fdevopen+0x8c>
 2f0:	8b 01       	movw	r16, r22
 2f2:	ec 01       	movw	r28, r24
 2f4:	6e e0       	ldi	r22, 0x0E	; 14
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 de 03 	call	0x7bc	; 0x7bc <calloc>
 300:	fc 01       	movw	r30, r24
 302:	89 2b       	or	r24, r25
 304:	91 f3       	breq	.-28     	; 0x2ea <fdevopen+0x12>
 306:	80 e8       	ldi	r24, 0x80	; 128
 308:	83 83       	std	Z+3, r24	; 0x03
 30a:	01 15       	cp	r16, r1
 30c:	11 05       	cpc	r17, r1
 30e:	71 f0       	breq	.+28     	; 0x32c <fdevopen+0x54>
 310:	13 87       	std	Z+11, r17	; 0x0b
 312:	02 87       	std	Z+10, r16	; 0x0a
 314:	81 e8       	ldi	r24, 0x81	; 129
 316:	83 83       	std	Z+3, r24	; 0x03
 318:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 31c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
 320:	89 2b       	or	r24, r25
 322:	21 f4       	brne	.+8      	; 0x32c <fdevopen+0x54>
 324:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <__data_end+0x1>
 328:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <__data_end>
 32c:	20 97       	sbiw	r28, 0x00	; 0
 32e:	c9 f0       	breq	.+50     	; 0x362 <fdevopen+0x8a>
 330:	d1 87       	std	Z+9, r29	; 0x09
 332:	c0 87       	std	Z+8, r28	; 0x08
 334:	83 81       	ldd	r24, Z+3	; 0x03
 336:	82 60       	ori	r24, 0x02	; 2
 338:	83 83       	std	Z+3, r24	; 0x03
 33a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end+0x2>
 33e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x3>
 342:	89 2b       	or	r24, r25
 344:	71 f4       	brne	.+28     	; 0x362 <fdevopen+0x8a>
 346:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x3>
 34a:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end+0x2>
 34e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end+0x4>
 352:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x5>
 356:	89 2b       	or	r24, r25
 358:	21 f4       	brne	.+8      	; 0x362 <fdevopen+0x8a>
 35a:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__data_end+0x5>
 35e:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__data_end+0x4>
 362:	cf 01       	movw	r24, r30
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <printf>:
 36e:	a0 e0       	ldi	r26, 0x00	; 0
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	ed eb       	ldi	r30, 0xBD	; 189
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__prologue_saves__+0x20>
 37a:	ae 01       	movw	r20, r28
 37c:	4b 5f       	subi	r20, 0xFB	; 251
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	fa 01       	movw	r30, r20
 382:	61 91       	ld	r22, Z+
 384:	71 91       	ld	r23, Z+
 386:	af 01       	movw	r20, r30
 388:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end+0x2>
 38c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x3>
 390:	0e 94 fd 01 	call	0x3fa	; 0x3fa <vfprintf>
 394:	e2 e0       	ldi	r30, 0x02	; 2
 396:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__epilogue_restores__+0x20>

0000039a <puts>:
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end+0x2>
 3a6:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x3>
 3aa:	23 81       	ldd	r18, Z+3	; 0x03
 3ac:	21 ff       	sbrs	r18, 1
 3ae:	1b c0       	rjmp	.+54     	; 0x3e6 <puts+0x4c>
 3b0:	8c 01       	movw	r16, r24
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
 3b6:	f8 01       	movw	r30, r16
 3b8:	81 91       	ld	r24, Z+
 3ba:	8f 01       	movw	r16, r30
 3bc:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
 3c0:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
 3c4:	db 01       	movw	r26, r22
 3c6:	18 96       	adiw	r26, 0x08	; 8
 3c8:	ed 91       	ld	r30, X+
 3ca:	fc 91       	ld	r31, X
 3cc:	19 97       	sbiw	r26, 0x09	; 9
 3ce:	88 23       	and	r24, r24
 3d0:	31 f0       	breq	.+12     	; 0x3de <puts+0x44>
 3d2:	09 95       	icall
 3d4:	89 2b       	or	r24, r25
 3d6:	79 f3       	breq	.-34     	; 0x3b6 <puts+0x1c>
 3d8:	df ef       	ldi	r29, 0xFF	; 255
 3da:	cf ef       	ldi	r28, 0xFF	; 255
 3dc:	ec cf       	rjmp	.-40     	; 0x3b6 <puts+0x1c>
 3de:	8a e0       	ldi	r24, 0x0A	; 10
 3e0:	09 95       	icall
 3e2:	89 2b       	or	r24, r25
 3e4:	19 f0       	breq	.+6      	; 0x3ec <puts+0x52>
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	9f ef       	ldi	r25, 0xFF	; 255
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <puts+0x56>
 3ec:	8d 2f       	mov	r24, r29
 3ee:	9c 2f       	mov	r25, r28
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <vfprintf>:
 3fa:	ab e0       	ldi	r26, 0x0B	; 11
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	e3 e0       	ldi	r30, 0x03	; 3
 400:	f2 e0       	ldi	r31, 0x02	; 2
 402:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__prologue_saves__>
 406:	6c 01       	movw	r12, r24
 408:	7b 01       	movw	r14, r22
 40a:	8a 01       	movw	r16, r20
 40c:	fc 01       	movw	r30, r24
 40e:	17 82       	std	Z+7, r1	; 0x07
 410:	16 82       	std	Z+6, r1	; 0x06
 412:	83 81       	ldd	r24, Z+3	; 0x03
 414:	81 ff       	sbrs	r24, 1
 416:	cc c1       	rjmp	.+920    	; 0x7b0 <__stack+0x2b1>
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	3c 01       	movw	r6, r24
 41e:	f6 01       	movw	r30, r12
 420:	93 81       	ldd	r25, Z+3	; 0x03
 422:	f7 01       	movw	r30, r14
 424:	93 fd       	sbrc	r25, 3
 426:	85 91       	lpm	r24, Z+
 428:	93 ff       	sbrs	r25, 3
 42a:	81 91       	ld	r24, Z+
 42c:	7f 01       	movw	r14, r30
 42e:	88 23       	and	r24, r24
 430:	09 f4       	brne	.+2      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 432:	ba c1       	rjmp	.+884    	; 0x7a8 <__stack+0x2a9>
 434:	85 32       	cpi	r24, 0x25	; 37
 436:	39 f4       	brne	.+14     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 438:	93 fd       	sbrc	r25, 3
 43a:	85 91       	lpm	r24, Z+
 43c:	93 ff       	sbrs	r25, 3
 43e:	81 91       	ld	r24, Z+
 440:	7f 01       	movw	r14, r30
 442:	85 32       	cpi	r24, 0x25	; 37
 444:	29 f4       	brne	.+10     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 446:	b6 01       	movw	r22, r12
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 44e:	e7 cf       	rjmp	.-50     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 450:	91 2c       	mov	r9, r1
 452:	21 2c       	mov	r2, r1
 454:	31 2c       	mov	r3, r1
 456:	ff e1       	ldi	r31, 0x1F	; 31
 458:	f3 15       	cp	r31, r3
 45a:	d8 f0       	brcs	.+54     	; 0x492 <__DATA_REGION_LENGTH__+0x92>
 45c:	8b 32       	cpi	r24, 0x2B	; 43
 45e:	79 f0       	breq	.+30     	; 0x47e <__DATA_REGION_LENGTH__+0x7e>
 460:	38 f4       	brcc	.+14     	; 0x470 <__DATA_REGION_LENGTH__+0x70>
 462:	80 32       	cpi	r24, 0x20	; 32
 464:	79 f0       	breq	.+30     	; 0x484 <__DATA_REGION_LENGTH__+0x84>
 466:	83 32       	cpi	r24, 0x23	; 35
 468:	a1 f4       	brne	.+40     	; 0x492 <__DATA_REGION_LENGTH__+0x92>
 46a:	23 2d       	mov	r18, r3
 46c:	20 61       	ori	r18, 0x10	; 16
 46e:	1d c0       	rjmp	.+58     	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
 470:	8d 32       	cpi	r24, 0x2D	; 45
 472:	61 f0       	breq	.+24     	; 0x48c <__DATA_REGION_LENGTH__+0x8c>
 474:	80 33       	cpi	r24, 0x30	; 48
 476:	69 f4       	brne	.+26     	; 0x492 <__DATA_REGION_LENGTH__+0x92>
 478:	23 2d       	mov	r18, r3
 47a:	21 60       	ori	r18, 0x01	; 1
 47c:	16 c0       	rjmp	.+44     	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
 47e:	83 2d       	mov	r24, r3
 480:	82 60       	ori	r24, 0x02	; 2
 482:	38 2e       	mov	r3, r24
 484:	e3 2d       	mov	r30, r3
 486:	e4 60       	ori	r30, 0x04	; 4
 488:	3e 2e       	mov	r3, r30
 48a:	2a c0       	rjmp	.+84     	; 0x4e0 <__DATA_REGION_LENGTH__+0xe0>
 48c:	f3 2d       	mov	r31, r3
 48e:	f8 60       	ori	r31, 0x08	; 8
 490:	1d c0       	rjmp	.+58     	; 0x4cc <__DATA_REGION_LENGTH__+0xcc>
 492:	37 fc       	sbrc	r3, 7
 494:	2d c0       	rjmp	.+90     	; 0x4f0 <__DATA_REGION_LENGTH__+0xf0>
 496:	20 ed       	ldi	r18, 0xD0	; 208
 498:	28 0f       	add	r18, r24
 49a:	2a 30       	cpi	r18, 0x0A	; 10
 49c:	40 f0       	brcs	.+16     	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
 49e:	8e 32       	cpi	r24, 0x2E	; 46
 4a0:	b9 f4       	brne	.+46     	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
 4a2:	36 fc       	sbrc	r3, 6
 4a4:	81 c1       	rjmp	.+770    	; 0x7a8 <__stack+0x2a9>
 4a6:	23 2d       	mov	r18, r3
 4a8:	20 64       	ori	r18, 0x40	; 64
 4aa:	32 2e       	mov	r3, r18
 4ac:	19 c0       	rjmp	.+50     	; 0x4e0 <__DATA_REGION_LENGTH__+0xe0>
 4ae:	36 fe       	sbrs	r3, 6
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
 4b2:	8a e0       	ldi	r24, 0x0A	; 10
 4b4:	98 9e       	mul	r9, r24
 4b6:	20 0d       	add	r18, r0
 4b8:	11 24       	eor	r1, r1
 4ba:	92 2e       	mov	r9, r18
 4bc:	11 c0       	rjmp	.+34     	; 0x4e0 <__DATA_REGION_LENGTH__+0xe0>
 4be:	ea e0       	ldi	r30, 0x0A	; 10
 4c0:	2e 9e       	mul	r2, r30
 4c2:	20 0d       	add	r18, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	22 2e       	mov	r2, r18
 4c8:	f3 2d       	mov	r31, r3
 4ca:	f0 62       	ori	r31, 0x20	; 32
 4cc:	3f 2e       	mov	r3, r31
 4ce:	08 c0       	rjmp	.+16     	; 0x4e0 <__DATA_REGION_LENGTH__+0xe0>
 4d0:	8c 36       	cpi	r24, 0x6C	; 108
 4d2:	21 f4       	brne	.+8      	; 0x4dc <__DATA_REGION_LENGTH__+0xdc>
 4d4:	83 2d       	mov	r24, r3
 4d6:	80 68       	ori	r24, 0x80	; 128
 4d8:	38 2e       	mov	r3, r24
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__DATA_REGION_LENGTH__+0xe0>
 4dc:	88 36       	cpi	r24, 0x68	; 104
 4de:	41 f4       	brne	.+16     	; 0x4f0 <__DATA_REGION_LENGTH__+0xf0>
 4e0:	f7 01       	movw	r30, r14
 4e2:	93 fd       	sbrc	r25, 3
 4e4:	85 91       	lpm	r24, Z+
 4e6:	93 ff       	sbrs	r25, 3
 4e8:	81 91       	ld	r24, Z+
 4ea:	7f 01       	movw	r14, r30
 4ec:	81 11       	cpse	r24, r1
 4ee:	b3 cf       	rjmp	.-154    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 4f0:	98 2f       	mov	r25, r24
 4f2:	9f 7d       	andi	r25, 0xDF	; 223
 4f4:	95 54       	subi	r25, 0x45	; 69
 4f6:	93 30       	cpi	r25, 0x03	; 3
 4f8:	28 f4       	brcc	.+10     	; 0x504 <__stack+0x5>
 4fa:	0c 5f       	subi	r16, 0xFC	; 252
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	9f e3       	ldi	r25, 0x3F	; 63
 500:	99 83       	std	Y+1, r25	; 0x01
 502:	0d c0       	rjmp	.+26     	; 0x51e <__stack+0x1f>
 504:	83 36       	cpi	r24, 0x63	; 99
 506:	31 f0       	breq	.+12     	; 0x514 <__stack+0x15>
 508:	83 37       	cpi	r24, 0x73	; 115
 50a:	71 f0       	breq	.+28     	; 0x528 <__stack+0x29>
 50c:	83 35       	cpi	r24, 0x53	; 83
 50e:	09 f0       	breq	.+2      	; 0x512 <__stack+0x13>
 510:	59 c0       	rjmp	.+178    	; 0x5c4 <__stack+0xc5>
 512:	21 c0       	rjmp	.+66     	; 0x556 <__stack+0x57>
 514:	f8 01       	movw	r30, r16
 516:	80 81       	ld	r24, Z
 518:	89 83       	std	Y+1, r24	; 0x01
 51a:	0e 5f       	subi	r16, 0xFE	; 254
 51c:	1f 4f       	sbci	r17, 0xFF	; 255
 51e:	88 24       	eor	r8, r8
 520:	83 94       	inc	r8
 522:	91 2c       	mov	r9, r1
 524:	53 01       	movw	r10, r6
 526:	13 c0       	rjmp	.+38     	; 0x54e <__stack+0x4f>
 528:	28 01       	movw	r4, r16
 52a:	f2 e0       	ldi	r31, 0x02	; 2
 52c:	4f 0e       	add	r4, r31
 52e:	51 1c       	adc	r5, r1
 530:	f8 01       	movw	r30, r16
 532:	a0 80       	ld	r10, Z
 534:	b1 80       	ldd	r11, Z+1	; 0x01
 536:	36 fe       	sbrs	r3, 6
 538:	03 c0       	rjmp	.+6      	; 0x540 <__stack+0x41>
 53a:	69 2d       	mov	r22, r9
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <__stack+0x45>
 540:	6f ef       	ldi	r22, 0xFF	; 255
 542:	7f ef       	ldi	r23, 0xFF	; 255
 544:	c5 01       	movw	r24, r10
 546:	0e 94 2d 05 	call	0xa5a	; 0xa5a <strnlen>
 54a:	4c 01       	movw	r8, r24
 54c:	82 01       	movw	r16, r4
 54e:	f3 2d       	mov	r31, r3
 550:	ff 77       	andi	r31, 0x7F	; 127
 552:	3f 2e       	mov	r3, r31
 554:	16 c0       	rjmp	.+44     	; 0x582 <__stack+0x83>
 556:	28 01       	movw	r4, r16
 558:	22 e0       	ldi	r18, 0x02	; 2
 55a:	42 0e       	add	r4, r18
 55c:	51 1c       	adc	r5, r1
 55e:	f8 01       	movw	r30, r16
 560:	a0 80       	ld	r10, Z
 562:	b1 80       	ldd	r11, Z+1	; 0x01
 564:	36 fe       	sbrs	r3, 6
 566:	03 c0       	rjmp	.+6      	; 0x56e <__stack+0x6f>
 568:	69 2d       	mov	r22, r9
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <__stack+0x73>
 56e:	6f ef       	ldi	r22, 0xFF	; 255
 570:	7f ef       	ldi	r23, 0xFF	; 255
 572:	c5 01       	movw	r24, r10
 574:	0e 94 1b 05 	call	0xa36	; 0xa36 <strnlen_P>
 578:	4c 01       	movw	r8, r24
 57a:	f3 2d       	mov	r31, r3
 57c:	f0 68       	ori	r31, 0x80	; 128
 57e:	3f 2e       	mov	r3, r31
 580:	82 01       	movw	r16, r4
 582:	33 fc       	sbrc	r3, 3
 584:	1b c0       	rjmp	.+54     	; 0x5bc <__stack+0xbd>
 586:	82 2d       	mov	r24, r2
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	88 16       	cp	r8, r24
 58c:	99 06       	cpc	r9, r25
 58e:	b0 f4       	brcc	.+44     	; 0x5bc <__stack+0xbd>
 590:	b6 01       	movw	r22, r12
 592:	80 e2       	ldi	r24, 0x20	; 32
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 59a:	2a 94       	dec	r2
 59c:	f4 cf       	rjmp	.-24     	; 0x586 <__stack+0x87>
 59e:	f5 01       	movw	r30, r10
 5a0:	37 fc       	sbrc	r3, 7
 5a2:	85 91       	lpm	r24, Z+
 5a4:	37 fe       	sbrs	r3, 7
 5a6:	81 91       	ld	r24, Z+
 5a8:	5f 01       	movw	r10, r30
 5aa:	b6 01       	movw	r22, r12
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 5b2:	21 10       	cpse	r2, r1
 5b4:	2a 94       	dec	r2
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	82 1a       	sub	r8, r18
 5ba:	91 08       	sbc	r9, r1
 5bc:	81 14       	cp	r8, r1
 5be:	91 04       	cpc	r9, r1
 5c0:	71 f7       	brne	.-36     	; 0x59e <__stack+0x9f>
 5c2:	e8 c0       	rjmp	.+464    	; 0x794 <__stack+0x295>
 5c4:	84 36       	cpi	r24, 0x64	; 100
 5c6:	11 f0       	breq	.+4      	; 0x5cc <__stack+0xcd>
 5c8:	89 36       	cpi	r24, 0x69	; 105
 5ca:	41 f5       	brne	.+80     	; 0x61c <__stack+0x11d>
 5cc:	f8 01       	movw	r30, r16
 5ce:	37 fe       	sbrs	r3, 7
 5d0:	07 c0       	rjmp	.+14     	; 0x5e0 <__stack+0xe1>
 5d2:	60 81       	ld	r22, Z
 5d4:	71 81       	ldd	r23, Z+1	; 0x01
 5d6:	82 81       	ldd	r24, Z+2	; 0x02
 5d8:	93 81       	ldd	r25, Z+3	; 0x03
 5da:	0c 5f       	subi	r16, 0xFC	; 252
 5dc:	1f 4f       	sbci	r17, 0xFF	; 255
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <__stack+0xf1>
 5e0:	60 81       	ld	r22, Z
 5e2:	71 81       	ldd	r23, Z+1	; 0x01
 5e4:	07 2e       	mov	r0, r23
 5e6:	00 0c       	add	r0, r0
 5e8:	88 0b       	sbc	r24, r24
 5ea:	99 0b       	sbc	r25, r25
 5ec:	0e 5f       	subi	r16, 0xFE	; 254
 5ee:	1f 4f       	sbci	r17, 0xFF	; 255
 5f0:	f3 2d       	mov	r31, r3
 5f2:	ff 76       	andi	r31, 0x6F	; 111
 5f4:	3f 2e       	mov	r3, r31
 5f6:	97 ff       	sbrs	r25, 7
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <__stack+0x10d>
 5fa:	90 95       	com	r25
 5fc:	80 95       	com	r24
 5fe:	70 95       	com	r23
 600:	61 95       	neg	r22
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	f0 68       	ori	r31, 0x80	; 128
 60a:	3f 2e       	mov	r3, r31
 60c:	2a e0       	ldi	r18, 0x0A	; 10
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	a3 01       	movw	r20, r6
 612:	0e 94 74 05 	call	0xae8	; 0xae8 <__ultoa_invert>
 616:	88 2e       	mov	r8, r24
 618:	86 18       	sub	r8, r6
 61a:	45 c0       	rjmp	.+138    	; 0x6a6 <__stack+0x1a7>
 61c:	85 37       	cpi	r24, 0x75	; 117
 61e:	31 f4       	brne	.+12     	; 0x62c <__stack+0x12d>
 620:	23 2d       	mov	r18, r3
 622:	2f 7e       	andi	r18, 0xEF	; 239
 624:	b2 2e       	mov	r11, r18
 626:	2a e0       	ldi	r18, 0x0A	; 10
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	25 c0       	rjmp	.+74     	; 0x676 <__stack+0x177>
 62c:	93 2d       	mov	r25, r3
 62e:	99 7f       	andi	r25, 0xF9	; 249
 630:	b9 2e       	mov	r11, r25
 632:	8f 36       	cpi	r24, 0x6F	; 111
 634:	c1 f0       	breq	.+48     	; 0x666 <__stack+0x167>
 636:	18 f4       	brcc	.+6      	; 0x63e <__stack+0x13f>
 638:	88 35       	cpi	r24, 0x58	; 88
 63a:	79 f0       	breq	.+30     	; 0x65a <__stack+0x15b>
 63c:	b5 c0       	rjmp	.+362    	; 0x7a8 <__stack+0x2a9>
 63e:	80 37       	cpi	r24, 0x70	; 112
 640:	19 f0       	breq	.+6      	; 0x648 <__stack+0x149>
 642:	88 37       	cpi	r24, 0x78	; 120
 644:	21 f0       	breq	.+8      	; 0x64e <__stack+0x14f>
 646:	b0 c0       	rjmp	.+352    	; 0x7a8 <__stack+0x2a9>
 648:	e9 2f       	mov	r30, r25
 64a:	e0 61       	ori	r30, 0x10	; 16
 64c:	be 2e       	mov	r11, r30
 64e:	b4 fe       	sbrs	r11, 4
 650:	0d c0       	rjmp	.+26     	; 0x66c <__stack+0x16d>
 652:	fb 2d       	mov	r31, r11
 654:	f4 60       	ori	r31, 0x04	; 4
 656:	bf 2e       	mov	r11, r31
 658:	09 c0       	rjmp	.+18     	; 0x66c <__stack+0x16d>
 65a:	34 fe       	sbrs	r3, 4
 65c:	0a c0       	rjmp	.+20     	; 0x672 <__stack+0x173>
 65e:	29 2f       	mov	r18, r25
 660:	26 60       	ori	r18, 0x06	; 6
 662:	b2 2e       	mov	r11, r18
 664:	06 c0       	rjmp	.+12     	; 0x672 <__stack+0x173>
 666:	28 e0       	ldi	r18, 0x08	; 8
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	05 c0       	rjmp	.+10     	; 0x676 <__stack+0x177>
 66c:	20 e1       	ldi	r18, 0x10	; 16
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <__stack+0x177>
 672:	20 e1       	ldi	r18, 0x10	; 16
 674:	32 e0       	ldi	r19, 0x02	; 2
 676:	f8 01       	movw	r30, r16
 678:	b7 fe       	sbrs	r11, 7
 67a:	07 c0       	rjmp	.+14     	; 0x68a <__stack+0x18b>
 67c:	60 81       	ld	r22, Z
 67e:	71 81       	ldd	r23, Z+1	; 0x01
 680:	82 81       	ldd	r24, Z+2	; 0x02
 682:	93 81       	ldd	r25, Z+3	; 0x03
 684:	0c 5f       	subi	r16, 0xFC	; 252
 686:	1f 4f       	sbci	r17, 0xFF	; 255
 688:	06 c0       	rjmp	.+12     	; 0x696 <__stack+0x197>
 68a:	60 81       	ld	r22, Z
 68c:	71 81       	ldd	r23, Z+1	; 0x01
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 5f       	subi	r16, 0xFE	; 254
 694:	1f 4f       	sbci	r17, 0xFF	; 255
 696:	a3 01       	movw	r20, r6
 698:	0e 94 74 05 	call	0xae8	; 0xae8 <__ultoa_invert>
 69c:	88 2e       	mov	r8, r24
 69e:	86 18       	sub	r8, r6
 6a0:	fb 2d       	mov	r31, r11
 6a2:	ff 77       	andi	r31, 0x7F	; 127
 6a4:	3f 2e       	mov	r3, r31
 6a6:	36 fe       	sbrs	r3, 6
 6a8:	0d c0       	rjmp	.+26     	; 0x6c4 <__stack+0x1c5>
 6aa:	23 2d       	mov	r18, r3
 6ac:	2e 7f       	andi	r18, 0xFE	; 254
 6ae:	a2 2e       	mov	r10, r18
 6b0:	89 14       	cp	r8, r9
 6b2:	58 f4       	brcc	.+22     	; 0x6ca <__stack+0x1cb>
 6b4:	34 fe       	sbrs	r3, 4
 6b6:	0b c0       	rjmp	.+22     	; 0x6ce <__stack+0x1cf>
 6b8:	32 fc       	sbrc	r3, 2
 6ba:	09 c0       	rjmp	.+18     	; 0x6ce <__stack+0x1cf>
 6bc:	83 2d       	mov	r24, r3
 6be:	8e 7e       	andi	r24, 0xEE	; 238
 6c0:	a8 2e       	mov	r10, r24
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <__stack+0x1cf>
 6c4:	b8 2c       	mov	r11, r8
 6c6:	a3 2c       	mov	r10, r3
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <__stack+0x1d1>
 6ca:	b8 2c       	mov	r11, r8
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <__stack+0x1d1>
 6ce:	b9 2c       	mov	r11, r9
 6d0:	a4 fe       	sbrs	r10, 4
 6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <__stack+0x1f3>
 6d4:	fe 01       	movw	r30, r28
 6d6:	e8 0d       	add	r30, r8
 6d8:	f1 1d       	adc	r31, r1
 6da:	80 81       	ld	r24, Z
 6dc:	80 33       	cpi	r24, 0x30	; 48
 6de:	21 f4       	brne	.+8      	; 0x6e8 <__stack+0x1e9>
 6e0:	9a 2d       	mov	r25, r10
 6e2:	99 7e       	andi	r25, 0xE9	; 233
 6e4:	a9 2e       	mov	r10, r25
 6e6:	09 c0       	rjmp	.+18     	; 0x6fa <__stack+0x1fb>
 6e8:	a2 fe       	sbrs	r10, 2
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <__stack+0x1f9>
 6ec:	b3 94       	inc	r11
 6ee:	b3 94       	inc	r11
 6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__stack+0x1fb>
 6f2:	8a 2d       	mov	r24, r10
 6f4:	86 78       	andi	r24, 0x86	; 134
 6f6:	09 f0       	breq	.+2      	; 0x6fa <__stack+0x1fb>
 6f8:	b3 94       	inc	r11
 6fa:	a3 fc       	sbrc	r10, 3
 6fc:	11 c0       	rjmp	.+34     	; 0x720 <__stack+0x221>
 6fe:	a0 fe       	sbrs	r10, 0
 700:	06 c0       	rjmp	.+12     	; 0x70e <__stack+0x20f>
 702:	b2 14       	cp	r11, r2
 704:	88 f4       	brcc	.+34     	; 0x728 <__stack+0x229>
 706:	28 0c       	add	r2, r8
 708:	92 2c       	mov	r9, r2
 70a:	9b 18       	sub	r9, r11
 70c:	0e c0       	rjmp	.+28     	; 0x72a <__stack+0x22b>
 70e:	b2 14       	cp	r11, r2
 710:	60 f4       	brcc	.+24     	; 0x72a <__stack+0x22b>
 712:	b6 01       	movw	r22, r12
 714:	80 e2       	ldi	r24, 0x20	; 32
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 71c:	b3 94       	inc	r11
 71e:	f7 cf       	rjmp	.-18     	; 0x70e <__stack+0x20f>
 720:	b2 14       	cp	r11, r2
 722:	18 f4       	brcc	.+6      	; 0x72a <__stack+0x22b>
 724:	2b 18       	sub	r2, r11
 726:	02 c0       	rjmp	.+4      	; 0x72c <__stack+0x22d>
 728:	98 2c       	mov	r9, r8
 72a:	21 2c       	mov	r2, r1
 72c:	a4 fe       	sbrs	r10, 4
 72e:	10 c0       	rjmp	.+32     	; 0x750 <__stack+0x251>
 730:	b6 01       	movw	r22, r12
 732:	80 e3       	ldi	r24, 0x30	; 48
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 73a:	a2 fe       	sbrs	r10, 2
 73c:	17 c0       	rjmp	.+46     	; 0x76c <__stack+0x26d>
 73e:	a1 fc       	sbrc	r10, 1
 740:	03 c0       	rjmp	.+6      	; 0x748 <__stack+0x249>
 742:	88 e7       	ldi	r24, 0x78	; 120
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <__stack+0x24d>
 748:	88 e5       	ldi	r24, 0x58	; 88
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	b6 01       	movw	r22, r12
 74e:	0c c0       	rjmp	.+24     	; 0x768 <__stack+0x269>
 750:	8a 2d       	mov	r24, r10
 752:	86 78       	andi	r24, 0x86	; 134
 754:	59 f0       	breq	.+22     	; 0x76c <__stack+0x26d>
 756:	a1 fe       	sbrs	r10, 1
 758:	02 c0       	rjmp	.+4      	; 0x75e <__stack+0x25f>
 75a:	8b e2       	ldi	r24, 0x2B	; 43
 75c:	01 c0       	rjmp	.+2      	; 0x760 <__stack+0x261>
 75e:	80 e2       	ldi	r24, 0x20	; 32
 760:	a7 fc       	sbrc	r10, 7
 762:	8d e2       	ldi	r24, 0x2D	; 45
 764:	b6 01       	movw	r22, r12
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 76c:	89 14       	cp	r8, r9
 76e:	38 f4       	brcc	.+14     	; 0x77e <__stack+0x27f>
 770:	b6 01       	movw	r22, r12
 772:	80 e3       	ldi	r24, 0x30	; 48
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 77a:	9a 94       	dec	r9
 77c:	f7 cf       	rjmp	.-18     	; 0x76c <__stack+0x26d>
 77e:	8a 94       	dec	r8
 780:	f3 01       	movw	r30, r6
 782:	e8 0d       	add	r30, r8
 784:	f1 1d       	adc	r31, r1
 786:	80 81       	ld	r24, Z
 788:	b6 01       	movw	r22, r12
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 790:	81 10       	cpse	r8, r1
 792:	f5 cf       	rjmp	.-22     	; 0x77e <__stack+0x27f>
 794:	22 20       	and	r2, r2
 796:	09 f4       	brne	.+2      	; 0x79a <__stack+0x29b>
 798:	42 ce       	rjmp	.-892    	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 79a:	b6 01       	movw	r22, r12
 79c:	80 e2       	ldi	r24, 0x20	; 32
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 7a4:	2a 94       	dec	r2
 7a6:	f6 cf       	rjmp	.-20     	; 0x794 <__stack+0x295>
 7a8:	f6 01       	movw	r30, r12
 7aa:	86 81       	ldd	r24, Z+6	; 0x06
 7ac:	97 81       	ldd	r25, Z+7	; 0x07
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <__stack+0x2b5>
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	9f ef       	ldi	r25, 0xFF	; 255
 7b4:	2b 96       	adiw	r28, 0x0b	; 11
 7b6:	e2 e1       	ldi	r30, 0x12	; 18
 7b8:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__epilogue_restores__>

000007bc <calloc>:
 7bc:	0f 93       	push	r16
 7be:	1f 93       	push	r17
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	86 9f       	mul	r24, r22
 7c6:	80 01       	movw	r16, r0
 7c8:	87 9f       	mul	r24, r23
 7ca:	10 0d       	add	r17, r0
 7cc:	96 9f       	mul	r25, r22
 7ce:	10 0d       	add	r17, r0
 7d0:	11 24       	eor	r1, r1
 7d2:	c8 01       	movw	r24, r16
 7d4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <malloc>
 7d8:	ec 01       	movw	r28, r24
 7da:	00 97       	sbiw	r24, 0x00	; 0
 7dc:	29 f0       	breq	.+10     	; 0x7e8 <calloc+0x2c>
 7de:	a8 01       	movw	r20, r16
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	0e 94 26 05 	call	0xa4c	; 0xa4c <memset>
 7e8:	ce 01       	movw	r24, r28
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	08 95       	ret

000007f4 <malloc>:
 7f4:	0f 93       	push	r16
 7f6:	1f 93       	push	r17
 7f8:	cf 93       	push	r28
 7fa:	df 93       	push	r29
 7fc:	82 30       	cpi	r24, 0x02	; 2
 7fe:	91 05       	cpc	r25, r1
 800:	10 f4       	brcc	.+4      	; 0x806 <malloc+0x12>
 802:	82 e0       	ldi	r24, 0x02	; 2
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__flp>
 80a:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__flp+0x1>
 80e:	20 e0       	ldi	r18, 0x00	; 0
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	a0 e0       	ldi	r26, 0x00	; 0
 814:	b0 e0       	ldi	r27, 0x00	; 0
 816:	30 97       	sbiw	r30, 0x00	; 0
 818:	19 f1       	breq	.+70     	; 0x860 <malloc+0x6c>
 81a:	40 81       	ld	r20, Z
 81c:	51 81       	ldd	r21, Z+1	; 0x01
 81e:	02 81       	ldd	r16, Z+2	; 0x02
 820:	13 81       	ldd	r17, Z+3	; 0x03
 822:	48 17       	cp	r20, r24
 824:	59 07       	cpc	r21, r25
 826:	c8 f0       	brcs	.+50     	; 0x85a <malloc+0x66>
 828:	84 17       	cp	r24, r20
 82a:	95 07       	cpc	r25, r21
 82c:	69 f4       	brne	.+26     	; 0x848 <malloc+0x54>
 82e:	10 97       	sbiw	r26, 0x00	; 0
 830:	31 f0       	breq	.+12     	; 0x83e <malloc+0x4a>
 832:	12 96       	adiw	r26, 0x02	; 2
 834:	0c 93       	st	X, r16
 836:	12 97       	sbiw	r26, 0x02	; 2
 838:	13 96       	adiw	r26, 0x03	; 3
 83a:	1c 93       	st	X, r17
 83c:	27 c0       	rjmp	.+78     	; 0x88c <malloc+0x98>
 83e:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <__flp>
 842:	10 93 0d 02 	sts	0x020D, r17	; 0x80020d <__flp+0x1>
 846:	22 c0       	rjmp	.+68     	; 0x88c <malloc+0x98>
 848:	21 15       	cp	r18, r1
 84a:	31 05       	cpc	r19, r1
 84c:	19 f0       	breq	.+6      	; 0x854 <malloc+0x60>
 84e:	42 17       	cp	r20, r18
 850:	53 07       	cpc	r21, r19
 852:	18 f4       	brcc	.+6      	; 0x85a <malloc+0x66>
 854:	9a 01       	movw	r18, r20
 856:	bd 01       	movw	r22, r26
 858:	ef 01       	movw	r28, r30
 85a:	df 01       	movw	r26, r30
 85c:	f8 01       	movw	r30, r16
 85e:	db cf       	rjmp	.-74     	; 0x816 <malloc+0x22>
 860:	21 15       	cp	r18, r1
 862:	31 05       	cpc	r19, r1
 864:	f9 f0       	breq	.+62     	; 0x8a4 <malloc+0xb0>
 866:	28 1b       	sub	r18, r24
 868:	39 0b       	sbc	r19, r25
 86a:	24 30       	cpi	r18, 0x04	; 4
 86c:	31 05       	cpc	r19, r1
 86e:	80 f4       	brcc	.+32     	; 0x890 <malloc+0x9c>
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	9b 81       	ldd	r25, Y+3	; 0x03
 874:	61 15       	cp	r22, r1
 876:	71 05       	cpc	r23, r1
 878:	21 f0       	breq	.+8      	; 0x882 <malloc+0x8e>
 87a:	fb 01       	movw	r30, r22
 87c:	93 83       	std	Z+3, r25	; 0x03
 87e:	82 83       	std	Z+2, r24	; 0x02
 880:	04 c0       	rjmp	.+8      	; 0x88a <malloc+0x96>
 882:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__flp+0x1>
 886:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__flp>
 88a:	fe 01       	movw	r30, r28
 88c:	32 96       	adiw	r30, 0x02	; 2
 88e:	44 c0       	rjmp	.+136    	; 0x918 <malloc+0x124>
 890:	fe 01       	movw	r30, r28
 892:	e2 0f       	add	r30, r18
 894:	f3 1f       	adc	r31, r19
 896:	81 93       	st	Z+, r24
 898:	91 93       	st	Z+, r25
 89a:	22 50       	subi	r18, 0x02	; 2
 89c:	31 09       	sbc	r19, r1
 89e:	39 83       	std	Y+1, r19	; 0x01
 8a0:	28 83       	st	Y, r18
 8a2:	3a c0       	rjmp	.+116    	; 0x918 <malloc+0x124>
 8a4:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__brkval>
 8a8:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__brkval+0x1>
 8ac:	23 2b       	or	r18, r19
 8ae:	41 f4       	brne	.+16     	; 0x8c0 <malloc+0xcc>
 8b0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
 8b4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
 8b8:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <__brkval+0x1>
 8bc:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <__brkval>
 8c0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
 8c4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
 8c8:	21 15       	cp	r18, r1
 8ca:	31 05       	cpc	r19, r1
 8cc:	41 f4       	brne	.+16     	; 0x8de <malloc+0xea>
 8ce:	2d b7       	in	r18, 0x3d	; 61
 8d0:	3e b7       	in	r19, 0x3e	; 62
 8d2:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
 8d6:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
 8da:	24 1b       	sub	r18, r20
 8dc:	35 0b       	sbc	r19, r21
 8de:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__brkval>
 8e2:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__brkval+0x1>
 8e6:	e2 17       	cp	r30, r18
 8e8:	f3 07       	cpc	r31, r19
 8ea:	a0 f4       	brcc	.+40     	; 0x914 <malloc+0x120>
 8ec:	2e 1b       	sub	r18, r30
 8ee:	3f 0b       	sbc	r19, r31
 8f0:	28 17       	cp	r18, r24
 8f2:	39 07       	cpc	r19, r25
 8f4:	78 f0       	brcs	.+30     	; 0x914 <malloc+0x120>
 8f6:	ac 01       	movw	r20, r24
 8f8:	4e 5f       	subi	r20, 0xFE	; 254
 8fa:	5f 4f       	sbci	r21, 0xFF	; 255
 8fc:	24 17       	cp	r18, r20
 8fe:	35 07       	cpc	r19, r21
 900:	48 f0       	brcs	.+18     	; 0x914 <malloc+0x120>
 902:	4e 0f       	add	r20, r30
 904:	5f 1f       	adc	r21, r31
 906:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <__brkval+0x1>
 90a:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <__brkval>
 90e:	81 93       	st	Z+, r24
 910:	91 93       	st	Z+, r25
 912:	02 c0       	rjmp	.+4      	; 0x918 <malloc+0x124>
 914:	e0 e0       	ldi	r30, 0x00	; 0
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	cf 01       	movw	r24, r30
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	1f 91       	pop	r17
 920:	0f 91       	pop	r16
 922:	08 95       	ret

00000924 <free>:
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	00 97       	sbiw	r24, 0x00	; 0
 92a:	09 f4       	brne	.+2      	; 0x92e <free+0xa>
 92c:	81 c0       	rjmp	.+258    	; 0xa30 <free+0x10c>
 92e:	fc 01       	movw	r30, r24
 930:	32 97       	sbiw	r30, 0x02	; 2
 932:	13 82       	std	Z+3, r1	; 0x03
 934:	12 82       	std	Z+2, r1	; 0x02
 936:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <__flp>
 93a:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <__flp+0x1>
 93e:	10 97       	sbiw	r26, 0x00	; 0
 940:	81 f4       	brne	.+32     	; 0x962 <free+0x3e>
 942:	20 81       	ld	r18, Z
 944:	31 81       	ldd	r19, Z+1	; 0x01
 946:	82 0f       	add	r24, r18
 948:	93 1f       	adc	r25, r19
 94a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__brkval>
 94e:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__brkval+0x1>
 952:	28 17       	cp	r18, r24
 954:	39 07       	cpc	r19, r25
 956:	51 f5       	brne	.+84     	; 0x9ac <free+0x88>
 958:	f0 93 0b 02 	sts	0x020B, r31	; 0x80020b <__brkval+0x1>
 95c:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <__brkval>
 960:	67 c0       	rjmp	.+206    	; 0xa30 <free+0x10c>
 962:	ed 01       	movw	r28, r26
 964:	20 e0       	ldi	r18, 0x00	; 0
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	ce 17       	cp	r28, r30
 96a:	df 07       	cpc	r29, r31
 96c:	40 f4       	brcc	.+16     	; 0x97e <free+0x5a>
 96e:	4a 81       	ldd	r20, Y+2	; 0x02
 970:	5b 81       	ldd	r21, Y+3	; 0x03
 972:	9e 01       	movw	r18, r28
 974:	41 15       	cp	r20, r1
 976:	51 05       	cpc	r21, r1
 978:	f1 f0       	breq	.+60     	; 0x9b6 <free+0x92>
 97a:	ea 01       	movw	r28, r20
 97c:	f5 cf       	rjmp	.-22     	; 0x968 <free+0x44>
 97e:	d3 83       	std	Z+3, r29	; 0x03
 980:	c2 83       	std	Z+2, r28	; 0x02
 982:	40 81       	ld	r20, Z
 984:	51 81       	ldd	r21, Z+1	; 0x01
 986:	84 0f       	add	r24, r20
 988:	95 1f       	adc	r25, r21
 98a:	c8 17       	cp	r28, r24
 98c:	d9 07       	cpc	r29, r25
 98e:	59 f4       	brne	.+22     	; 0x9a6 <free+0x82>
 990:	88 81       	ld	r24, Y
 992:	99 81       	ldd	r25, Y+1	; 0x01
 994:	84 0f       	add	r24, r20
 996:	95 1f       	adc	r25, r21
 998:	02 96       	adiw	r24, 0x02	; 2
 99a:	91 83       	std	Z+1, r25	; 0x01
 99c:	80 83       	st	Z, r24
 99e:	8a 81       	ldd	r24, Y+2	; 0x02
 9a0:	9b 81       	ldd	r25, Y+3	; 0x03
 9a2:	93 83       	std	Z+3, r25	; 0x03
 9a4:	82 83       	std	Z+2, r24	; 0x02
 9a6:	21 15       	cp	r18, r1
 9a8:	31 05       	cpc	r19, r1
 9aa:	29 f4       	brne	.+10     	; 0x9b6 <free+0x92>
 9ac:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__flp+0x1>
 9b0:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__flp>
 9b4:	3d c0       	rjmp	.+122    	; 0xa30 <free+0x10c>
 9b6:	e9 01       	movw	r28, r18
 9b8:	fb 83       	std	Y+3, r31	; 0x03
 9ba:	ea 83       	std	Y+2, r30	; 0x02
 9bc:	49 91       	ld	r20, Y+
 9be:	59 91       	ld	r21, Y+
 9c0:	c4 0f       	add	r28, r20
 9c2:	d5 1f       	adc	r29, r21
 9c4:	ec 17       	cp	r30, r28
 9c6:	fd 07       	cpc	r31, r29
 9c8:	61 f4       	brne	.+24     	; 0x9e2 <free+0xbe>
 9ca:	80 81       	ld	r24, Z
 9cc:	91 81       	ldd	r25, Z+1	; 0x01
 9ce:	84 0f       	add	r24, r20
 9d0:	95 1f       	adc	r25, r21
 9d2:	02 96       	adiw	r24, 0x02	; 2
 9d4:	e9 01       	movw	r28, r18
 9d6:	99 83       	std	Y+1, r25	; 0x01
 9d8:	88 83       	st	Y, r24
 9da:	82 81       	ldd	r24, Z+2	; 0x02
 9dc:	93 81       	ldd	r25, Z+3	; 0x03
 9de:	9b 83       	std	Y+3, r25	; 0x03
 9e0:	8a 83       	std	Y+2, r24	; 0x02
 9e2:	e0 e0       	ldi	r30, 0x00	; 0
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	12 96       	adiw	r26, 0x02	; 2
 9e8:	8d 91       	ld	r24, X+
 9ea:	9c 91       	ld	r25, X
 9ec:	13 97       	sbiw	r26, 0x03	; 3
 9ee:	00 97       	sbiw	r24, 0x00	; 0
 9f0:	19 f0       	breq	.+6      	; 0x9f8 <free+0xd4>
 9f2:	fd 01       	movw	r30, r26
 9f4:	dc 01       	movw	r26, r24
 9f6:	f7 cf       	rjmp	.-18     	; 0x9e6 <free+0xc2>
 9f8:	8d 91       	ld	r24, X+
 9fa:	9c 91       	ld	r25, X
 9fc:	11 97       	sbiw	r26, 0x01	; 1
 9fe:	9d 01       	movw	r18, r26
 a00:	2e 5f       	subi	r18, 0xFE	; 254
 a02:	3f 4f       	sbci	r19, 0xFF	; 255
 a04:	82 0f       	add	r24, r18
 a06:	93 1f       	adc	r25, r19
 a08:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__brkval>
 a0c:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__brkval+0x1>
 a10:	28 17       	cp	r18, r24
 a12:	39 07       	cpc	r19, r25
 a14:	69 f4       	brne	.+26     	; 0xa30 <free+0x10c>
 a16:	30 97       	sbiw	r30, 0x00	; 0
 a18:	29 f4       	brne	.+10     	; 0xa24 <free+0x100>
 a1a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__flp+0x1>
 a1e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__flp>
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <free+0x104>
 a24:	13 82       	std	Z+3, r1	; 0x03
 a26:	12 82       	std	Z+2, r1	; 0x02
 a28:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <__brkval+0x1>
 a2c:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <__brkval>
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	08 95       	ret

00000a36 <strnlen_P>:
 a36:	fc 01       	movw	r30, r24
 a38:	05 90       	lpm	r0, Z+
 a3a:	61 50       	subi	r22, 0x01	; 1
 a3c:	70 40       	sbci	r23, 0x00	; 0
 a3e:	01 10       	cpse	r0, r1
 a40:	d8 f7       	brcc	.-10     	; 0xa38 <strnlen_P+0x2>
 a42:	80 95       	com	r24
 a44:	90 95       	com	r25
 a46:	8e 0f       	add	r24, r30
 a48:	9f 1f       	adc	r25, r31
 a4a:	08 95       	ret

00000a4c <memset>:
 a4c:	dc 01       	movw	r26, r24
 a4e:	01 c0       	rjmp	.+2      	; 0xa52 <memset+0x6>
 a50:	6d 93       	st	X+, r22
 a52:	41 50       	subi	r20, 0x01	; 1
 a54:	50 40       	sbci	r21, 0x00	; 0
 a56:	e0 f7       	brcc	.-8      	; 0xa50 <memset+0x4>
 a58:	08 95       	ret

00000a5a <strnlen>:
 a5a:	fc 01       	movw	r30, r24
 a5c:	61 50       	subi	r22, 0x01	; 1
 a5e:	70 40       	sbci	r23, 0x00	; 0
 a60:	01 90       	ld	r0, Z+
 a62:	01 10       	cpse	r0, r1
 a64:	d8 f7       	brcc	.-10     	; 0xa5c <strnlen+0x2>
 a66:	80 95       	com	r24
 a68:	90 95       	com	r25
 a6a:	8e 0f       	add	r24, r30
 a6c:	9f 1f       	adc	r25, r31
 a6e:	08 95       	ret

00000a70 <fputc>:
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	fb 01       	movw	r30, r22
 a7a:	23 81       	ldd	r18, Z+3	; 0x03
 a7c:	21 fd       	sbrc	r18, 1
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <fputc+0x16>
 a80:	8f ef       	ldi	r24, 0xFF	; 255
 a82:	9f ef       	ldi	r25, 0xFF	; 255
 a84:	2c c0       	rjmp	.+88     	; 0xade <fputc+0x6e>
 a86:	22 ff       	sbrs	r18, 2
 a88:	16 c0       	rjmp	.+44     	; 0xab6 <fputc+0x46>
 a8a:	46 81       	ldd	r20, Z+6	; 0x06
 a8c:	57 81       	ldd	r21, Z+7	; 0x07
 a8e:	24 81       	ldd	r18, Z+4	; 0x04
 a90:	35 81       	ldd	r19, Z+5	; 0x05
 a92:	42 17       	cp	r20, r18
 a94:	53 07       	cpc	r21, r19
 a96:	44 f4       	brge	.+16     	; 0xaa8 <fputc+0x38>
 a98:	a0 81       	ld	r26, Z
 a9a:	b1 81       	ldd	r27, Z+1	; 0x01
 a9c:	9d 01       	movw	r18, r26
 a9e:	2f 5f       	subi	r18, 0xFF	; 255
 aa0:	3f 4f       	sbci	r19, 0xFF	; 255
 aa2:	31 83       	std	Z+1, r19	; 0x01
 aa4:	20 83       	st	Z, r18
 aa6:	8c 93       	st	X, r24
 aa8:	26 81       	ldd	r18, Z+6	; 0x06
 aaa:	37 81       	ldd	r19, Z+7	; 0x07
 aac:	2f 5f       	subi	r18, 0xFF	; 255
 aae:	3f 4f       	sbci	r19, 0xFF	; 255
 ab0:	37 83       	std	Z+7, r19	; 0x07
 ab2:	26 83       	std	Z+6, r18	; 0x06
 ab4:	14 c0       	rjmp	.+40     	; 0xade <fputc+0x6e>
 ab6:	8b 01       	movw	r16, r22
 ab8:	ec 01       	movw	r28, r24
 aba:	fb 01       	movw	r30, r22
 abc:	00 84       	ldd	r0, Z+8	; 0x08
 abe:	f1 85       	ldd	r31, Z+9	; 0x09
 ac0:	e0 2d       	mov	r30, r0
 ac2:	09 95       	icall
 ac4:	89 2b       	or	r24, r25
 ac6:	e1 f6       	brne	.-72     	; 0xa80 <fputc+0x10>
 ac8:	d8 01       	movw	r26, r16
 aca:	16 96       	adiw	r26, 0x06	; 6
 acc:	8d 91       	ld	r24, X+
 ace:	9c 91       	ld	r25, X
 ad0:	17 97       	sbiw	r26, 0x07	; 7
 ad2:	01 96       	adiw	r24, 0x01	; 1
 ad4:	17 96       	adiw	r26, 0x07	; 7
 ad6:	9c 93       	st	X, r25
 ad8:	8e 93       	st	-X, r24
 ada:	16 97       	sbiw	r26, 0x06	; 6
 adc:	ce 01       	movw	r24, r28
 ade:	df 91       	pop	r29
 ae0:	cf 91       	pop	r28
 ae2:	1f 91       	pop	r17
 ae4:	0f 91       	pop	r16
 ae6:	08 95       	ret

00000ae8 <__ultoa_invert>:
 ae8:	fa 01       	movw	r30, r20
 aea:	aa 27       	eor	r26, r26
 aec:	28 30       	cpi	r18, 0x08	; 8
 aee:	51 f1       	breq	.+84     	; 0xb44 <__ultoa_invert+0x5c>
 af0:	20 31       	cpi	r18, 0x10	; 16
 af2:	81 f1       	breq	.+96     	; 0xb54 <__ultoa_invert+0x6c>
 af4:	e8 94       	clt
 af6:	6f 93       	push	r22
 af8:	6e 7f       	andi	r22, 0xFE	; 254
 afa:	6e 5f       	subi	r22, 0xFE	; 254
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	af 4f       	sbci	r26, 0xFF	; 255
 b04:	b1 e0       	ldi	r27, 0x01	; 1
 b06:	3e d0       	rcall	.+124    	; 0xb84 <__ultoa_invert+0x9c>
 b08:	b4 e0       	ldi	r27, 0x04	; 4
 b0a:	3c d0       	rcall	.+120    	; 0xb84 <__ultoa_invert+0x9c>
 b0c:	67 0f       	add	r22, r23
 b0e:	78 1f       	adc	r23, r24
 b10:	89 1f       	adc	r24, r25
 b12:	9a 1f       	adc	r25, r26
 b14:	a1 1d       	adc	r26, r1
 b16:	68 0f       	add	r22, r24
 b18:	79 1f       	adc	r23, r25
 b1a:	8a 1f       	adc	r24, r26
 b1c:	91 1d       	adc	r25, r1
 b1e:	a1 1d       	adc	r26, r1
 b20:	6a 0f       	add	r22, r26
 b22:	71 1d       	adc	r23, r1
 b24:	81 1d       	adc	r24, r1
 b26:	91 1d       	adc	r25, r1
 b28:	a1 1d       	adc	r26, r1
 b2a:	20 d0       	rcall	.+64     	; 0xb6c <__ultoa_invert+0x84>
 b2c:	09 f4       	brne	.+2      	; 0xb30 <__ultoa_invert+0x48>
 b2e:	68 94       	set
 b30:	3f 91       	pop	r19
 b32:	2a e0       	ldi	r18, 0x0A	; 10
 b34:	26 9f       	mul	r18, r22
 b36:	11 24       	eor	r1, r1
 b38:	30 19       	sub	r19, r0
 b3a:	30 5d       	subi	r19, 0xD0	; 208
 b3c:	31 93       	st	Z+, r19
 b3e:	de f6       	brtc	.-74     	; 0xaf6 <__ultoa_invert+0xe>
 b40:	cf 01       	movw	r24, r30
 b42:	08 95       	ret
 b44:	46 2f       	mov	r20, r22
 b46:	47 70       	andi	r20, 0x07	; 7
 b48:	40 5d       	subi	r20, 0xD0	; 208
 b4a:	41 93       	st	Z+, r20
 b4c:	b3 e0       	ldi	r27, 0x03	; 3
 b4e:	0f d0       	rcall	.+30     	; 0xb6e <__ultoa_invert+0x86>
 b50:	c9 f7       	brne	.-14     	; 0xb44 <__ultoa_invert+0x5c>
 b52:	f6 cf       	rjmp	.-20     	; 0xb40 <__ultoa_invert+0x58>
 b54:	46 2f       	mov	r20, r22
 b56:	4f 70       	andi	r20, 0x0F	; 15
 b58:	40 5d       	subi	r20, 0xD0	; 208
 b5a:	4a 33       	cpi	r20, 0x3A	; 58
 b5c:	18 f0       	brcs	.+6      	; 0xb64 <__ultoa_invert+0x7c>
 b5e:	49 5d       	subi	r20, 0xD9	; 217
 b60:	31 fd       	sbrc	r19, 1
 b62:	40 52       	subi	r20, 0x20	; 32
 b64:	41 93       	st	Z+, r20
 b66:	02 d0       	rcall	.+4      	; 0xb6c <__ultoa_invert+0x84>
 b68:	a9 f7       	brne	.-22     	; 0xb54 <__ultoa_invert+0x6c>
 b6a:	ea cf       	rjmp	.-44     	; 0xb40 <__ultoa_invert+0x58>
 b6c:	b4 e0       	ldi	r27, 0x04	; 4
 b6e:	a6 95       	lsr	r26
 b70:	97 95       	ror	r25
 b72:	87 95       	ror	r24
 b74:	77 95       	ror	r23
 b76:	67 95       	ror	r22
 b78:	ba 95       	dec	r27
 b7a:	c9 f7       	brne	.-14     	; 0xb6e <__ultoa_invert+0x86>
 b7c:	00 97       	sbiw	r24, 0x00	; 0
 b7e:	61 05       	cpc	r22, r1
 b80:	71 05       	cpc	r23, r1
 b82:	08 95       	ret
 b84:	9b 01       	movw	r18, r22
 b86:	ac 01       	movw	r20, r24
 b88:	0a 2e       	mov	r0, r26
 b8a:	06 94       	lsr	r0
 b8c:	57 95       	ror	r21
 b8e:	47 95       	ror	r20
 b90:	37 95       	ror	r19
 b92:	27 95       	ror	r18
 b94:	ba 95       	dec	r27
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__ultoa_invert+0xa2>
 b98:	62 0f       	add	r22, r18
 b9a:	73 1f       	adc	r23, r19
 b9c:	84 1f       	adc	r24, r20
 b9e:	95 1f       	adc	r25, r21
 ba0:	a0 1d       	adc	r26, r0
 ba2:	08 95       	ret

00000ba4 <__divmodsi4>:
 ba4:	05 2e       	mov	r0, r21
 ba6:	97 fb       	bst	r25, 7
 ba8:	1e f4       	brtc	.+6      	; 0xbb0 <__divmodsi4+0xc>
 baa:	00 94       	com	r0
 bac:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__negsi2>
 bb0:	57 fd       	sbrc	r21, 7
 bb2:	07 d0       	rcall	.+14     	; 0xbc2 <__divmodsi4_neg2>
 bb4:	0e 94 3b 06 	call	0xc76	; 0xc76 <__udivmodsi4>
 bb8:	07 fc       	sbrc	r0, 7
 bba:	03 d0       	rcall	.+6      	; 0xbc2 <__divmodsi4_neg2>
 bbc:	4e f4       	brtc	.+18     	; 0xbd0 <__divmodsi4_exit>
 bbe:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__negsi2>

00000bc2 <__divmodsi4_neg2>:
 bc2:	50 95       	com	r21
 bc4:	40 95       	com	r20
 bc6:	30 95       	com	r19
 bc8:	21 95       	neg	r18
 bca:	3f 4f       	sbci	r19, 0xFF	; 255
 bcc:	4f 4f       	sbci	r20, 0xFF	; 255
 bce:	5f 4f       	sbci	r21, 0xFF	; 255

00000bd0 <__divmodsi4_exit>:
 bd0:	08 95       	ret

00000bd2 <__negsi2>:
 bd2:	90 95       	com	r25
 bd4:	80 95       	com	r24
 bd6:	70 95       	com	r23
 bd8:	61 95       	neg	r22
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	08 95       	ret

00000be2 <__muluhisi3>:
 be2:	0e 94 5d 06 	call	0xcba	; 0xcba <__umulhisi3>
 be6:	a5 9f       	mul	r26, r21
 be8:	90 0d       	add	r25, r0
 bea:	b4 9f       	mul	r27, r20
 bec:	90 0d       	add	r25, r0
 bee:	a4 9f       	mul	r26, r20
 bf0:	80 0d       	add	r24, r0
 bf2:	91 1d       	adc	r25, r1
 bf4:	11 24       	eor	r1, r1
 bf6:	08 95       	ret

00000bf8 <__mulshisi3>:
 bf8:	b7 ff       	sbrs	r27, 7
 bfa:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__muluhisi3>

00000bfe <__mulohisi3>:
 bfe:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__muluhisi3>
 c02:	82 1b       	sub	r24, r18
 c04:	93 0b       	sbc	r25, r19
 c06:	08 95       	ret

00000c08 <__prologue_saves__>:
 c08:	2f 92       	push	r2
 c0a:	3f 92       	push	r3
 c0c:	4f 92       	push	r4
 c0e:	5f 92       	push	r5
 c10:	6f 92       	push	r6
 c12:	7f 92       	push	r7
 c14:	8f 92       	push	r8
 c16:	9f 92       	push	r9
 c18:	af 92       	push	r10
 c1a:	bf 92       	push	r11
 c1c:	cf 92       	push	r12
 c1e:	df 92       	push	r13
 c20:	ef 92       	push	r14
 c22:	ff 92       	push	r15
 c24:	0f 93       	push	r16
 c26:	1f 93       	push	r17
 c28:	cf 93       	push	r28
 c2a:	df 93       	push	r29
 c2c:	cd b7       	in	r28, 0x3d	; 61
 c2e:	de b7       	in	r29, 0x3e	; 62
 c30:	ca 1b       	sub	r28, r26
 c32:	db 0b       	sbc	r29, r27
 c34:	0f b6       	in	r0, 0x3f	; 63
 c36:	f8 94       	cli
 c38:	de bf       	out	0x3e, r29	; 62
 c3a:	0f be       	out	0x3f, r0	; 63
 c3c:	cd bf       	out	0x3d, r28	; 61
 c3e:	09 94       	ijmp

00000c40 <__epilogue_restores__>:
 c40:	2a 88       	ldd	r2, Y+18	; 0x12
 c42:	39 88       	ldd	r3, Y+17	; 0x11
 c44:	48 88       	ldd	r4, Y+16	; 0x10
 c46:	5f 84       	ldd	r5, Y+15	; 0x0f
 c48:	6e 84       	ldd	r6, Y+14	; 0x0e
 c4a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c4c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c4e:	9b 84       	ldd	r9, Y+11	; 0x0b
 c50:	aa 84       	ldd	r10, Y+10	; 0x0a
 c52:	b9 84       	ldd	r11, Y+9	; 0x09
 c54:	c8 84       	ldd	r12, Y+8	; 0x08
 c56:	df 80       	ldd	r13, Y+7	; 0x07
 c58:	ee 80       	ldd	r14, Y+6	; 0x06
 c5a:	fd 80       	ldd	r15, Y+5	; 0x05
 c5c:	0c 81       	ldd	r16, Y+4	; 0x04
 c5e:	1b 81       	ldd	r17, Y+3	; 0x03
 c60:	aa 81       	ldd	r26, Y+2	; 0x02
 c62:	b9 81       	ldd	r27, Y+1	; 0x01
 c64:	ce 0f       	add	r28, r30
 c66:	d1 1d       	adc	r29, r1
 c68:	0f b6       	in	r0, 0x3f	; 63
 c6a:	f8 94       	cli
 c6c:	de bf       	out	0x3e, r29	; 62
 c6e:	0f be       	out	0x3f, r0	; 63
 c70:	cd bf       	out	0x3d, r28	; 61
 c72:	ed 01       	movw	r28, r26
 c74:	08 95       	ret

00000c76 <__udivmodsi4>:
 c76:	a1 e2       	ldi	r26, 0x21	; 33
 c78:	1a 2e       	mov	r1, r26
 c7a:	aa 1b       	sub	r26, r26
 c7c:	bb 1b       	sub	r27, r27
 c7e:	fd 01       	movw	r30, r26
 c80:	0d c0       	rjmp	.+26     	; 0xc9c <__udivmodsi4_ep>

00000c82 <__udivmodsi4_loop>:
 c82:	aa 1f       	adc	r26, r26
 c84:	bb 1f       	adc	r27, r27
 c86:	ee 1f       	adc	r30, r30
 c88:	ff 1f       	adc	r31, r31
 c8a:	a2 17       	cp	r26, r18
 c8c:	b3 07       	cpc	r27, r19
 c8e:	e4 07       	cpc	r30, r20
 c90:	f5 07       	cpc	r31, r21
 c92:	20 f0       	brcs	.+8      	; 0xc9c <__udivmodsi4_ep>
 c94:	a2 1b       	sub	r26, r18
 c96:	b3 0b       	sbc	r27, r19
 c98:	e4 0b       	sbc	r30, r20
 c9a:	f5 0b       	sbc	r31, r21

00000c9c <__udivmodsi4_ep>:
 c9c:	66 1f       	adc	r22, r22
 c9e:	77 1f       	adc	r23, r23
 ca0:	88 1f       	adc	r24, r24
 ca2:	99 1f       	adc	r25, r25
 ca4:	1a 94       	dec	r1
 ca6:	69 f7       	brne	.-38     	; 0xc82 <__udivmodsi4_loop>
 ca8:	60 95       	com	r22
 caa:	70 95       	com	r23
 cac:	80 95       	com	r24
 cae:	90 95       	com	r25
 cb0:	9b 01       	movw	r18, r22
 cb2:	ac 01       	movw	r20, r24
 cb4:	bd 01       	movw	r22, r26
 cb6:	cf 01       	movw	r24, r30
 cb8:	08 95       	ret

00000cba <__umulhisi3>:
 cba:	a2 9f       	mul	r26, r18
 cbc:	b0 01       	movw	r22, r0
 cbe:	b3 9f       	mul	r27, r19
 cc0:	c0 01       	movw	r24, r0
 cc2:	a3 9f       	mul	r26, r19
 cc4:	70 0d       	add	r23, r0
 cc6:	81 1d       	adc	r24, r1
 cc8:	11 24       	eor	r1, r1
 cca:	91 1d       	adc	r25, r1
 ccc:	b2 9f       	mul	r27, r18
 cce:	70 0d       	add	r23, r0
 cd0:	81 1d       	adc	r24, r1
 cd2:	11 24       	eor	r1, r1
 cd4:	91 1d       	adc	r25, r1
 cd6:	08 95       	ret

00000cd8 <_exit>:
 cd8:	f8 94       	cli

00000cda <__stop_program>:
 cda:	ff cf       	rjmp	.-2      	; 0xcda <__stop_program>
