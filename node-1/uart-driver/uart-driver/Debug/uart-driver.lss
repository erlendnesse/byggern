
uart-driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d0  00800100  00001716  000017aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002d0  008002d0  0000197a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ce1  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee8  00000000  00000000  000038a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec6  00000000  00000000  0000478d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00005654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000710  00000000  00000000  00005a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b21  00000000  00000000  00006144  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00006c65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a2 02 	jmp	0x544	; 0x544 <__ctors_end>
       4:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
       8:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
       c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      10:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      14:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      18:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      1c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      20:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      24:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      28:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      2c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      30:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      34:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      38:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      3c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      40:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      44:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      48:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      4c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      50:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      54:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      58:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      5c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      60:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      64:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      68:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      6c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5f       	subi	r16, 0xF0	; 240
      78:	00 00       	nop
      7a:	00 07       	cpc	r16, r16
      7c:	00 07       	cpc	r16, r16
      7e:	00 14       	cp	r0, r0
      80:	7f 14       	cp	r7, r15
      82:	7f 14       	cp	r7, r15
      84:	24 2a       	or	r2, r20
      86:	7f 2a       	or	r7, r31
      88:	12 23       	and	r17, r18
      8a:	13 08       	sbc	r1, r3
      8c:	64 62       	ori	r22, 0x24	; 36
      8e:	36 49       	sbci	r19, 0x96	; 150
      90:	55 22       	and	r5, r21
      92:	50 00       	.word	0x0050	; ????
      94:	05 03       	mulsu	r16, r21
      96:	00 00       	nop
      98:	00 1c       	adc	r0, r0
      9a:	22 41       	sbci	r18, 0x12	; 18
      9c:	00 00       	nop
      9e:	41 22       	and	r4, r17
      a0:	1c 00       	.word	0x001c	; ????
      a2:	08 2a       	or	r0, r24
      a4:	1c 2a       	or	r1, r28
      a6:	08 08       	sbc	r0, r8
      a8:	08 3e       	cpi	r16, 0xE8	; 232
      aa:	08 08       	sbc	r0, r8
      ac:	00 50       	subi	r16, 0x00	; 0
      ae:	30 00       	.word	0x0030	; ????
      b0:	00 08       	sbc	r0, r0
      b2:	08 08       	sbc	r0, r8
      b4:	08 08       	sbc	r0, r8
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 02       	muls	r16, r20
      c0:	3e 51       	subi	r19, 0x1E	; 30
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	3e 00       	.word	0x003e	; ????
      c6:	42 7f       	andi	r20, 0xF2	; 242
      c8:	40 00       	.word	0x0040	; ????
      ca:	42 61       	ori	r20, 0x12	; 18
      cc:	51 49       	sbci	r21, 0x91	; 145
      ce:	46 21       	and	r20, r6
      d0:	41 45       	sbci	r20, 0x51	; 81
      d2:	4b 31       	cpi	r20, 0x1B	; 27
      d4:	18 14       	cp	r1, r8
      d6:	12 7f       	andi	r17, 0xF2	; 242
      d8:	10 27       	eor	r17, r16
      da:	45 45       	sbci	r20, 0x55	; 85
      dc:	45 39       	cpi	r20, 0x95	; 149
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	49 49       	sbci	r20, 0x99	; 153
      e2:	30 01       	movw	r6, r0
      e4:	71 09       	sbc	r23, r1
      e6:	05 03       	mulsu	r16, r21
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	49 49       	sbci	r20, 0x99	; 153
      ec:	36 06       	cpc	r3, r22
      ee:	49 49       	sbci	r20, 0x99	; 153
      f0:	29 1e       	adc	r2, r25
      f2:	00 36       	cpi	r16, 0x60	; 96
      f4:	36 00       	.word	0x0036	; ????
      f6:	00 00       	nop
      f8:	56 36       	cpi	r21, 0x66	; 102
      fa:	00 00       	nop
      fc:	00 08       	sbc	r0, r0
      fe:	14 22       	and	r1, r20
     100:	41 14       	cp	r4, r1
     102:	14 14       	cp	r1, r4
     104:	14 14       	cp	r1, r4
     106:	41 22       	and	r4, r17
     108:	14 08       	sbc	r1, r4
     10a:	00 02       	muls	r16, r16
     10c:	01 51       	subi	r16, 0x11	; 17
     10e:	09 06       	cpc	r0, r25
     110:	32 49       	sbci	r19, 0x92	; 146
     112:	79 41       	sbci	r23, 0x19	; 25
     114:	3e 7e       	andi	r19, 0xEE	; 238
     116:	11 11       	cpse	r17, r1
     118:	11 7e       	andi	r17, 0xE1	; 225
     11a:	7f 49       	sbci	r23, 0x9F	; 159
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	36 3e       	cpi	r19, 0xE6	; 230
     120:	41 41       	sbci	r20, 0x11	; 17
     122:	41 22       	and	r4, r17
     124:	7f 41       	sbci	r23, 0x1F	; 31
     126:	41 22       	and	r4, r17
     128:	1c 7f       	andi	r17, 0xFC	; 252
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	49 41       	sbci	r20, 0x19	; 25
     12e:	7f 09       	sbc	r23, r15
     130:	09 01       	movw	r0, r18
     132:	01 3e       	cpi	r16, 0xE1	; 225
     134:	41 41       	sbci	r20, 0x11	; 17
     136:	51 32       	cpi	r21, 0x21	; 33
     138:	7f 08       	sbc	r7, r15
     13a:	08 08       	sbc	r0, r8
     13c:	7f 00       	.word	0x007f	; ????
     13e:	41 7f       	andi	r20, 0xF1	; 241
     140:	41 00       	.word	0x0041	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	41 3f       	cpi	r20, 0xF1	; 241
     146:	01 7f       	andi	r16, 0xF1	; 241
     148:	08 14       	cp	r0, r8
     14a:	22 41       	sbci	r18, 0x12	; 18
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	40 7f       	andi	r20, 0xF0	; 240
     152:	02 04       	cpc	r0, r2
     154:	02 7f       	andi	r16, 0xF2	; 242
     156:	7f 04       	cpc	r7, r15
     158:	08 10       	cpse	r0, r8
     15a:	7f 3e       	cpi	r23, 0xEF	; 239
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 3e       	cpi	r20, 0xE1	; 225
     160:	7f 09       	sbc	r23, r15
     162:	09 09       	sbc	r16, r9
     164:	06 3e       	cpi	r16, 0xE6	; 230
     166:	41 51       	subi	r20, 0x11	; 17
     168:	21 5e       	subi	r18, 0xE1	; 225
     16a:	7f 09       	sbc	r23, r15
     16c:	19 29       	or	r17, r9
     16e:	46 46       	sbci	r20, 0x66	; 102
     170:	49 49       	sbci	r20, 0x99	; 153
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	01 01       	movw	r0, r2
     176:	7f 01       	movw	r14, r30
     178:	01 3f       	cpi	r16, 0xF1	; 241
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	40 3f       	cpi	r20, 0xF0	; 240
     17e:	1f 20       	and	r1, r15
     180:	40 20       	and	r4, r0
     182:	1f 7f       	andi	r17, 0xFF	; 255
     184:	20 18       	sub	r2, r0
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	63 14       	cp	r6, r3
     18a:	08 14       	cp	r0, r8
     18c:	63 03       	mulsu	r22, r19
     18e:	04 78       	andi	r16, 0x84	; 132
     190:	04 03       	mulsu	r16, r20
     192:	61 51       	subi	r22, 0x11	; 17
     194:	49 45       	sbci	r20, 0x59	; 89
     196:	43 00       	.word	0x0043	; ????
     198:	00 7f       	andi	r16, 0xF0	; 240
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	02 04       	cpc	r0, r2
     19e:	08 10       	cpse	r0, r8
     1a0:	20 41       	sbci	r18, 0x10	; 16
     1a2:	41 7f       	andi	r20, 0xF1	; 241
     1a4:	00 00       	nop
     1a6:	04 02       	muls	r16, r20
     1a8:	01 02       	muls	r16, r17
     1aa:	04 40       	sbci	r16, 0x04	; 4
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 40       	sbci	r20, 0x00	; 0
     1b0:	00 01       	movw	r0, r0
     1b2:	02 04       	cpc	r0, r2
     1b4:	00 20       	and	r0, r0
     1b6:	54 54       	subi	r21, 0x44	; 68
     1b8:	54 78       	andi	r21, 0x84	; 132
     1ba:	7f 48       	sbci	r23, 0x8F	; 143
     1bc:	44 44       	sbci	r20, 0x44	; 68
     1be:	38 38       	cpi	r19, 0x88	; 136
     1c0:	44 44       	sbci	r20, 0x44	; 68
     1c2:	44 20       	and	r4, r4
     1c4:	38 44       	sbci	r19, 0x48	; 72
     1c6:	44 48       	sbci	r20, 0x84	; 132
     1c8:	7f 38       	cpi	r23, 0x8F	; 143
     1ca:	54 54       	subi	r21, 0x44	; 68
     1cc:	54 18       	sub	r5, r4
     1ce:	08 7e       	andi	r16, 0xE8	; 232
     1d0:	09 01       	movw	r0, r18
     1d2:	02 08       	sbc	r0, r2
     1d4:	14 54       	subi	r17, 0x44	; 68
     1d6:	54 3c       	cpi	r21, 0xC4	; 196
     1d8:	7f 08       	sbc	r7, r15
     1da:	04 04       	cpc	r0, r4
     1dc:	78 00       	.word	0x0078	; ????
     1de:	44 7d       	andi	r20, 0xD4	; 212
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	44 3d       	cpi	r20, 0xD4	; 212
     1e6:	00 00       	nop
     1e8:	7f 10       	cpse	r7, r15
     1ea:	28 44       	sbci	r18, 0x48	; 72
     1ec:	00 41       	sbci	r16, 0x10	; 16
     1ee:	7f 40       	sbci	r23, 0x0F	; 15
     1f0:	00 7c       	andi	r16, 0xC0	; 192
     1f2:	04 18       	sub	r0, r4
     1f4:	04 78       	andi	r16, 0x84	; 132
     1f6:	7c 08       	sbc	r7, r12
     1f8:	04 04       	cpc	r0, r4
     1fa:	78 38       	cpi	r23, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 38       	cpi	r20, 0x84	; 132
     200:	7c 14       	cp	r7, r12
     202:	14 14       	cp	r1, r4
     204:	08 08       	sbc	r0, r8
     206:	14 14       	cp	r1, r4
     208:	18 7c       	andi	r17, 0xC8	; 200
     20a:	7c 08       	sbc	r7, r12
     20c:	04 04       	cpc	r0, r4
     20e:	08 48       	sbci	r16, 0x88	; 136
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 20       	and	r5, r4
     214:	04 3f       	cpi	r16, 0xF4	; 244
     216:	44 40       	sbci	r20, 0x04	; 4
     218:	20 3c       	cpi	r18, 0xC0	; 192
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	20 7c       	andi	r18, 0xC0	; 192
     21e:	1c 20       	and	r1, r12
     220:	40 20       	and	r4, r0
     222:	1c 3c       	cpi	r17, 0xCC	; 204
     224:	40 30       	cpi	r20, 0x00	; 0
     226:	40 3c       	cpi	r20, 0xC0	; 192
     228:	44 28       	or	r4, r4
     22a:	10 28       	or	r1, r0
     22c:	44 0c       	add	r4, r4
     22e:	50 50       	subi	r21, 0x00	; 0
     230:	50 3c       	cpi	r21, 0xC0	; 192
     232:	44 64       	ori	r20, 0x44	; 68
     234:	54 4c       	sbci	r21, 0xC4	; 196
     236:	44 00       	.word	0x0044	; ????
     238:	08 36       	cpi	r16, 0x68	; 104
     23a:	41 00       	.word	0x0041	; ????
     23c:	00 00       	nop
     23e:	7f 00       	.word	0x007f	; ????
     240:	00 00       	nop
     242:	41 36       	cpi	r20, 0x61	; 97
     244:	08 00       	.word	0x0008	; ????
     246:	02 01       	movw	r0, r4
     248:	03 02       	muls	r16, r19
     24a:	01 00       	Address 0x0000024a is out of bounds.
.word	0xffff	; ????

0000024b <font8>:
	...
     253:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     263:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     273:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     283:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     293:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     2a3:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     2b3:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2c3:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2d3:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2e3:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2f3:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     303:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     313:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     323:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     333:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     343:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     353:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     363:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     373:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     383:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     393:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     3a3:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     3b3:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3c3:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3d3:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3e3:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3f3:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     403:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     413:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     423:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     433:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     443:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     453:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     463:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     473:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     483:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     493:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     4a3:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     4b3:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4c3:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4d3:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4e3:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4f3:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     503:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     513:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     523:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     533:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000544 <__ctors_end>:
     544:	11 24       	eor	r1, r1
     546:	1f be       	out	0x3f, r1	; 63
     548:	cf ef       	ldi	r28, 0xFF	; 255
     54a:	d4 e0       	ldi	r29, 0x04	; 4
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	cd bf       	out	0x3d, r28	; 61

00000550 <__do_copy_data>:
     550:	12 e0       	ldi	r17, 0x02	; 2
     552:	a0 e0       	ldi	r26, 0x00	; 0
     554:	b1 e0       	ldi	r27, 0x01	; 1
     556:	e6 e1       	ldi	r30, 0x16	; 22
     558:	f7 e1       	ldi	r31, 0x17	; 23
     55a:	02 c0       	rjmp	.+4      	; 0x560 <__do_copy_data+0x10>
     55c:	05 90       	lpm	r0, Z+
     55e:	0d 92       	st	X+, r0
     560:	a0 3d       	cpi	r26, 0xD0	; 208
     562:	b1 07       	cpc	r27, r17
     564:	d9 f7       	brne	.-10     	; 0x55c <__do_copy_data+0xc>

00000566 <__do_clear_bss>:
     566:	22 e0       	ldi	r18, 0x02	; 2
     568:	a0 ed       	ldi	r26, 0xD0	; 208
     56a:	b2 e0       	ldi	r27, 0x02	; 2
     56c:	01 c0       	rjmp	.+2      	; 0x570 <.do_clear_bss_start>

0000056e <.do_clear_bss_loop>:
     56e:	1d 92       	st	X+, r1

00000570 <.do_clear_bss_start>:
     570:	aa 3d       	cpi	r26, 0xDA	; 218
     572:	b2 07       	cpc	r27, r18
     574:	e1 f7       	brne	.-8      	; 0x56e <.do_clear_bss_loop>
     576:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <main>
     57a:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <_exit>

0000057e <__bad_interrupt>:
     57e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000582 <adc_init>:
	//TCCR3A |= (1 << WGM31);
	//TCCR3A |= (1 << WGM30);

void adc_init() {
	//All code in function inits pwm
	OCR3A = 0x02;
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     58a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
	DDRD |= (1 << PD4);
     58e:	81 b3       	in	r24, 0x11	; 17
     590:	80 61       	ori	r24, 0x10	; 16
     592:	81 bb       	out	0x11, r24	; 17
	//TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
	TCCR3B |= (1 << WGM32); //Setting CTC
     594:	ea e8       	ldi	r30, 0x8A	; 138
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	88 60       	ori	r24, 0x08	; 8
     59c:	80 83       	st	Z, r24
	TCCR3A |= (1 << COM3A0); //Clear OC3A on Compare Match, set OC3A at TOP. or toggle or smth.
     59e:	ab e8       	ldi	r26, 0x8B	; 139
     5a0:	b0 e0       	ldi	r27, 0x00	; 0
     5a2:	8c 91       	ld	r24, X
     5a4:	80 64       	ori	r24, 0x40	; 64
     5a6:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS30);
     5a8:	80 81       	ld	r24, Z
     5aa:	81 60       	ori	r24, 0x01	; 1
     5ac:	80 83       	st	Z, r24
	printf("-PWM init-\n");
     5ae:	8a e0       	ldi	r24, 0x0A	; 10
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <puts>
     5b6:	08 95       	ret

000005b8 <adc_read>:
}

uint8_t adc_read(uint8_t channel) {
	volatile uint8_t *ADC = (uint8_t*)0x1401;
	*ADC = 1;
     5b8:	e1 e0       	ldi	r30, 0x01	; 1
     5ba:	f4 e1       	ldi	r31, 0x14	; 20
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	90 83       	st	Z, r25
	
	int ch0 = *ADC;
     5c0:	20 81       	ld	r18, Z
	int ch1 = *ADC;
     5c2:	90 81       	ld	r25, Z
	int ch2 = *ADC;
     5c4:	40 81       	ld	r20, Z
	int ch3 = *ADC;
     5c6:	30 81       	ld	r19, Z
	
	switch(channel) {
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	c1 f0       	breq	.+48     	; 0x5fc <adc_read+0x44>
     5cc:	b0 f0       	brcs	.+44     	; 0x5fa <adc_read+0x42>
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <adc_read+0x20>
     5d2:	83 30       	cpi	r24, 0x03	; 3
     5d4:	19 f0       	breq	.+6      	; 0x5dc <adc_read+0x24>
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <adc_read+0x28>
		case 0:
			return ch0;
		case 1:
			return ch1;
		case 2:
			return ch2;
     5d8:	94 2f       	mov	r25, r20
     5da:	10 c0       	rjmp	.+32     	; 0x5fc <adc_read+0x44>
		case 3:
			return ch3;
     5dc:	93 2f       	mov	r25, r19
     5de:	0e c0       	rjmp	.+28     	; 0x5fc <adc_read+0x44>
		default:
			printf("Channel not found, arg given: %d", channel);
     5e0:	1f 92       	push	r1
     5e2:	8f 93       	push	r24
     5e4:	85 e1       	ldi	r24, 0x15	; 21
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	0e 94 d4 06 	call	0xda8	; 0xda8 <printf>
			break;

	}
}
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	08 95       	ret
	int ch2 = *ADC;
	int ch3 = *ADC;
	
	switch(channel) {
		case 0:
			return ch0;
     5fa:	92 2f       	mov	r25, r18
     5fc:	89 2f       	mov	r24, r25
		default:
			printf("Channel not found, arg given: %d", channel);
			break;

	}
}
     5fe:	08 95       	ret

00000600 <game_fsm>:

void set_menu(){
	
}

void game_fsm() {
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <game_fsm+0x6>
     606:	00 d0       	rcall	.+0      	; 0x608 <game_fsm+0x8>
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
	volatile int menu_index = 1;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	9a 83       	std	Y+2, r25	; 0x02
     612:	89 83       	std	Y+1, r24	; 0x01
	oled_set_home();
     614:	0e 94 33 05 	call	0xa66	; 0xa66 <oled_set_home>
	oled_set_position(menu_index, 120);
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	9a 81       	ldd	r25, Y+2	; 0x02
     61c:	68 e7       	ldi	r22, 0x78	; 120
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
	oled_print_string_large("<");
     624:	86 e3       	ldi	r24, 0x36	; 54
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 07 05 	call	0xa0e	; 0xa0e <oled_print_string_large>
	volatile int direction = dir();
     62c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <dir>
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	9c 83       	std	Y+4, r25	; 0x04
     634:	8b 83       	std	Y+3, r24	; 0x03
     636:	1e c0       	rjmp	.+60     	; 0x674 <game_fsm+0x74>
	while(1) {
		while(direction == NEUTRAL) {
			direction = dir();
     638:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <dir>
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	9c 83       	std	Y+4, r25	; 0x04
     640:	8b 83       	std	Y+3, r24	; 0x03
			if (!(PIND & (1<<5) )) {
     642:	85 99       	sbic	0x10, 5	; 16
     644:	0e c0       	rjmp	.+28     	; 0x662 <game_fsm+0x62>
				printf("CLICKED Menu index: %d\r\n", menu_index);
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	9a 81       	ldd	r25, Y+2	; 0x02
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	88 e3       	ldi	r24, 0x38	; 56
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	0e 94 d4 06 	call	0xda8	; 0xda8 <printf>
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     662:	2f ee       	ldi	r18, 0xEF	; 239
     664:	89 e4       	ldi	r24, 0x49	; 73
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	21 50       	subi	r18, 0x01	; 1
     66a:	80 40       	sbci	r24, 0x00	; 0
     66c:	90 40       	sbci	r25, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <game_fsm+0x68>
     670:	00 c0       	rjmp	.+0      	; 0x672 <game_fsm+0x72>
     672:	00 00       	nop
	oled_set_home();
	oled_set_position(menu_index, 120);
	oled_print_string_large("<");
	volatile int direction = dir();
	while(1) {
		while(direction == NEUTRAL) {
     674:	8b 81       	ldd	r24, Y+3	; 0x03
     676:	9c 81       	ldd	r25, Y+4	; 0x04
     678:	89 2b       	or	r24, r25
     67a:	f1 f2       	breq	.-68     	; 0x638 <game_fsm+0x38>
			if (!(PIND & (1<<5) )) {
				printf("CLICKED Menu index: %d\r\n", menu_index);
			}
			_delay_ms(750);
		}
		if (direction == UP && menu_index > 1) {
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	03 97       	sbiw	r24, 0x03	; 3
     682:	11 f5       	brne	.+68     	; 0x6c8 <game_fsm+0xc8>
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	02 97       	sbiw	r24, 0x02	; 2
     68a:	f4 f0       	brlt	.+60     	; 0x6c8 <game_fsm+0xc8>
			printf("UP\r\n");
     68c:	81 e5       	ldi	r24, 0x51	; 81
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <puts>
			oled_set_position(menu_index, 120);
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	68 e7       	ldi	r22, 0x78	; 120
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
			oled_print_string_large(" ");
     6a0:	85 e5       	ldi	r24, 0x55	; 85
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 07 05 	call	0xa0e	; 0xa0e <oled_print_string_large>
			menu_index--;
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	89 83       	std	Y+1, r24	; 0x01
			oled_set_position(menu_index, 120);
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	68 e7       	ldi	r22, 0x78	; 120
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
			oled_print_string_large("<");
     6be:	86 e3       	ldi	r24, 0x36	; 54
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 07 05 	call	0xa0e	; 0xa0e <oled_print_string_large>
			if (!(PIND & (1<<5) )) {
				printf("CLICKED Menu index: %d\r\n", menu_index);
			}
			_delay_ms(750);
		}
		if (direction == UP && menu_index > 1) {
     6c6:	25 c0       	rjmp	.+74     	; 0x712 <game_fsm+0x112>
			oled_print_string_large(" ");
			menu_index--;
			oled_set_position(menu_index, 120);
			oled_print_string_large("<");
		}
		else if (direction == DOWN && menu_index < 7) {
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	04 97       	sbiw	r24, 0x04	; 4
     6ce:	09 f5       	brne	.+66     	; 0x712 <game_fsm+0x112>
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	07 97       	sbiw	r24, 0x07	; 7
     6d6:	ec f4       	brge	.+58     	; 0x712 <game_fsm+0x112>
			printf("DOWN\r\n");
     6d8:	87 e5       	ldi	r24, 0x57	; 87
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <puts>
			oled_set_position(menu_index, 120);
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	9a 81       	ldd	r25, Y+2	; 0x02
     6e4:	68 e7       	ldi	r22, 0x78	; 120
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
			oled_print_string_large(" ");
     6ec:	85 e5       	ldi	r24, 0x55	; 85
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 07 05 	call	0xa0e	; 0xa0e <oled_print_string_large>
			menu_index++;
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	89 83       	std	Y+1, r24	; 0x01
			oled_set_position(menu_index, 120);
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	9a 81       	ldd	r25, Y+2	; 0x02
     702:	68 e7       	ldi	r22, 0x78	; 120
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
			oled_print_string_large("<");
     70a:	86 e3       	ldi	r24, 0x36	; 54
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 07 05 	call	0xa0e	; 0xa0e <oled_print_string_large>
		}
		direction = NEUTRAL;
     712:	1c 82       	std	Y+4, r1	; 0x04
     714:	1b 82       	std	Y+3, r1	; 0x03
	}
     716:	ae cf       	rjmp	.-164    	; 0x674 <game_fsm+0x74>

00000718 <joystick_init>:
#include "joystick.h"
#include "adc.h"
#include <avr/io.h>

void joystick_init(){
	PORTD |= (1 << PD5); //setup pullup for PD5 which is button input from Joystick
     718:	82 b3       	in	r24, 0x12	; 18
     71a:	80 62       	ori	r24, 0x20	; 32
     71c:	82 bb       	out	0x12, r24	; 18
     71e:	08 95       	ret

00000720 <pos_read>:
}

struct pos pos_read(void) {
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
	int g_f = 200/190; // gain factor to scale interval correctly
	int x_neutral = 160;
	int y_neutral = 162; // midpoint of interval
	
	struct pos position = {
		.x_pos = adc_read(0) * g_f - x_neutral, 
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <adc_read>
     732:	c8 2f       	mov	r28, r24
     734:	d0 e0       	ldi	r29, 0x00	; 0
     736:	c0 5a       	subi	r28, 0xA0	; 160
     738:	d1 09       	sbc	r29, r1
struct pos pos_read(void) {
	int g_f = 200/190; // gain factor to scale interval correctly
	int x_neutral = 160;
	int y_neutral = 162; // midpoint of interval
	
	struct pos position = {
     73a:	6e 01       	movw	r12, r28
		.x_pos = adc_read(0) * g_f - x_neutral, 
		.y_pos = adc_read(1) * g_f - y_neutral
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <adc_read>
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	82 5a       	subi	r24, 0xA2	; 162
     746:	91 09       	sbc	r25, r1
struct pos pos_read(void) {
	int g_f = 200/190; // gain factor to scale interval correctly
	int x_neutral = 160;
	int y_neutral = 162; // midpoint of interval
	
	struct pos position = {
     748:	7c 01       	movw	r14, r24
		.x_pos = adc_read(0) * g_f - x_neutral, 
		.y_pos = adc_read(1) * g_f - y_neutral
	};

	if (position.x_pos > -5 && position.x_pos < 5) {
     74a:	24 96       	adiw	r28, 0x04	; 4
     74c:	29 97       	sbiw	r28, 0x09	; 9
     74e:	10 f4       	brcc	.+4      	; 0x754 <pos_read+0x34>
		position.x_pos = 0;
     750:	c1 2c       	mov	r12, r1
     752:	d1 2c       	mov	r13, r1
	}
	if (position.y_pos > -5 && position.y_pos < 5) {
     754:	04 96       	adiw	r24, 0x04	; 4
     756:	09 97       	sbiw	r24, 0x09	; 9
     758:	10 f4       	brcc	.+4      	; 0x75e <pos_read+0x3e>
		position.y_pos = 0;
     75a:	e1 2c       	mov	r14, r1
     75c:	f1 2c       	mov	r15, r1
	}
	if (position.x_pos <= -100) {
     75e:	8d e9       	ldi	r24, 0x9D	; 157
     760:	c8 16       	cp	r12, r24
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	d8 06       	cpc	r13, r24
     766:	34 f4       	brge	.+12     	; 0x774 <pos_read+0x54>
		position.x_pos = -100;
     768:	0f 2e       	mov	r0, r31
     76a:	fc e9       	ldi	r31, 0x9C	; 156
     76c:	cf 2e       	mov	r12, r31
     76e:	dd 24       	eor	r13, r13
     770:	da 94       	dec	r13
     772:	f0 2d       	mov	r31, r0
	}
	if (position.y_pos <= -100) {
     774:	8d e9       	ldi	r24, 0x9D	; 157
     776:	e8 16       	cp	r14, r24
     778:	8f ef       	ldi	r24, 0xFF	; 255
     77a:	f8 06       	cpc	r15, r24
     77c:	34 f4       	brge	.+12     	; 0x78a <pos_read+0x6a>
		position.y_pos = -100;
     77e:	0f 2e       	mov	r0, r31
     780:	fc e9       	ldi	r31, 0x9C	; 156
     782:	ef 2e       	mov	r14, r31
     784:	ff 24       	eor	r15, r15
     786:	fa 94       	dec	r15
     788:	f0 2d       	mov	r31, r0
	}
	if (position.x_pos >= 92) {
     78a:	8c e5       	ldi	r24, 0x5C	; 92
     78c:	c8 16       	cp	r12, r24
     78e:	d1 04       	cpc	r13, r1
     790:	2c f0       	brlt	.+10     	; 0x79c <pos_read+0x7c>
		position.x_pos = 100;
     792:	0f 2e       	mov	r0, r31
     794:	f4 e6       	ldi	r31, 0x64	; 100
     796:	cf 2e       	mov	r12, r31
     798:	d1 2c       	mov	r13, r1
     79a:	f0 2d       	mov	r31, r0
	}
	if (position.y_pos >= 92) {
     79c:	8c e5       	ldi	r24, 0x5C	; 92
     79e:	e8 16       	cp	r14, r24
     7a0:	f1 04       	cpc	r15, r1
     7a2:	2c f0       	brlt	.+10     	; 0x7ae <pos_read+0x8e>
		position.y_pos = 100;
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f4 e6       	ldi	r31, 0x64	; 100
     7a8:	ef 2e       	mov	r14, r31
     7aa:	f1 2c       	mov	r15, r1
     7ac:	f0 2d       	mov	r31, r0
	}
	
	return position;
}
     7ae:	c7 01       	movw	r24, r14
     7b0:	b6 01       	movw	r22, r12
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	cf 90       	pop	r12
     7be:	08 95       	ret

000007c0 <dir>:

dir_t dir() {
	struct pos position = pos_read();
     7c0:	0e 94 90 03 	call	0x720	; 0x720 <pos_read>
	int x_input = position.x_pos;
	int y_input = position.y_pos;
	if (x_input < -50) {
     7c4:	6e 3c       	cpi	r22, 0xCE	; 206
     7c6:	4f ef       	ldi	r20, 0xFF	; 255
     7c8:	74 07       	cpc	r23, r20
     7ca:	5c f0       	brlt	.+22     	; 0x7e2 <dir+0x22>
		return LEFT;
	} 
	else if (x_input > 50) {
     7cc:	63 33       	cpi	r22, 0x33	; 51
     7ce:	71 05       	cpc	r23, r1
     7d0:	54 f4       	brge	.+20     	; 0x7e6 <dir+0x26>
		return RIGHT;
	}
	if (y_input < -50) {
     7d2:	8e 3c       	cpi	r24, 0xCE	; 206
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	92 07       	cpc	r25, r18
     7d8:	44 f0       	brlt	.+16     	; 0x7ea <dir+0x2a>
		return DOWN;
	}
	else if (y_input > 50) {
     7da:	c3 97       	sbiw	r24, 0x33	; 51
     7dc:	44 f0       	brlt	.+16     	; 0x7ee <dir+0x2e>
		return UP;
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	08 95       	ret
dir_t dir() {
	struct pos position = pos_read();
	int x_input = position.x_pos;
	int y_input = position.y_pos;
	if (x_input < -50) {
		return LEFT;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	08 95       	ret
	} 
	else if (x_input > 50) {
		return RIGHT;
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	08 95       	ret
	}
	if (y_input < -50) {
		return DOWN;
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	08 95       	ret
	}
	else if (y_input > 50) {
		return UP;
	}
	else if ((y_input > -50)&&(y_input <50)) {
		return NEUTRAL;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if ((x_input > -50)&&(x_input <50)) {
		return NEUTRAL;
	}
	return NEUTRAL;
     7f0:	08 95       	ret

000007f2 <main>:
	// Set main sleep time
	//int sleep_time = 1000;
    //_delay_ms(sleep_time);
	
	// Initialize functions
	usart_init(MYUBRR);
     7f2:	8f e1       	ldi	r24, 0x1F	; 31
     7f4:	0e 94 15 06 	call	0xc2a	; 0xc2a <usart_init>
	xmem_init();
     7f8:	0e 94 22 06 	call	0xc44	; 0xc44 <xmem_init>
	adc_init();
     7fc:	0e 94 c1 02 	call	0x582	; 0x582 <adc_init>
	joystick_init();
     800:	0e 94 8c 03 	call	0x718	; 0x718 <joystick_init>
	oled_init();
     804:	0e 94 78 04 	call	0x8f0	; 0x8f0 <oled_init>
	
	// Test SRAM functionality
	if (SRAM_test()) {
     808:	0e 94 84 05 	call	0xb08	; 0xb08 <SRAM_test>
     80c:	89 2b       	or	r24, r25
     80e:	99 f4       	brne	.+38     	; 0x836 <main+0x44>
		printf("SRAM test failed\r\n");
		return 0;
	}
	game_fsm();
     810:	0e 94 00 03 	call	0x600	; 0x600 <game_fsm>
	// MAIN LOOP
    while (1) {
		printf("Direction : %d\r\n", dir());
     814:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <dir>
     818:	1f 92       	push	r1
     81a:	8f 93       	push	r24
     81c:	8f e6       	ldi	r24, 0x6F	; 111
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	0e 94 d4 06 	call	0xda8	; 0xda8 <printf>
		//_delay_ms(sleep_time);
		oled_set_home();
     828:	0e 94 33 05 	call	0xa66	; 0xa66 <oled_set_home>
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	ef cf       	rjmp	.-34     	; 0x814 <main+0x22>
	joystick_init();
	oled_init();
	
	// Test SRAM functionality
	if (SRAM_test()) {
		printf("SRAM test failed\r\n");
     836:	8d e5       	ldi	r24, 0x5D	; 93
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <puts>
		//_delay_ms(sleep_time);
		oled_set_home();
	}

	return 0;
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	08 95       	ret

00000844 <write_command>:
	int i = 0;
	while (string[i] != '\0') {
		oled_print_char_small(string[i]);
		++i;
	}
}
     844:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd26>
     848:	08 95       	ret

0000084a <oled_goto_column>:
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	80 38       	cpi	r24, 0x80	; 128
     850:	91 05       	cpc	r25, r1
     852:	90 f4       	brcc	.+36     	; 0x878 <oled_goto_column+0x2e>
     854:	ec 01       	movw	r28, r24
     856:	8f 70       	andi	r24, 0x0F	; 15
     858:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     85c:	ce 01       	movw	r24, r28
     85e:	80 7f       	andi	r24, 0xF0	; 240
     860:	99 27       	eor	r25, r25
     862:	95 95       	asr	r25
     864:	87 95       	ror	r24
     866:	95 95       	asr	r25
     868:	87 95       	ror	r24
     86a:	95 95       	asr	r25
     86c:	87 95       	ror	r24
     86e:	95 95       	asr	r25
     870:	87 95       	ror	r24
     872:	80 5f       	subi	r24, 0xF0	; 240
     874:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <oled_goto_page>:
     87e:	28 2f       	mov	r18, r24
     880:	39 2f       	mov	r19, r25
     882:	28 30       	cpi	r18, 0x08	; 8
     884:	31 05       	cpc	r19, r1
     886:	18 f4       	brcc	.+6      	; 0x88e <oled_goto_page+0x10>
     888:	80 55       	subi	r24, 0x50	; 80
     88a:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     88e:	08 95       	ret

00000890 <oled_set_position>:
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	eb 01       	movw	r28, r22
     896:	0e 94 3f 04 	call	0x87e	; 0x87e <oled_goto_page>
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 25 04 	call	0x84a	; 0x84a <oled_goto_column>
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <write_data>:
     8a6:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf26>
     8aa:	08 95       	ret

000008ac <oled_reset>:
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	00 e0       	ldi	r16, 0x00	; 0
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <oled_reset+0x34>
     8ba:	c8 01       	movw	r24, r16
     8bc:	0e 94 3f 04 	call	0x87e	; 0x87e <oled_goto_page>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 25 04 	call	0x84a	; 0x84a <oled_goto_column>
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	d0 e0       	ldi	r29, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <oled_reset+0x2a>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <write_data>
     8d4:	21 96       	adiw	r28, 0x01	; 1
     8d6:	c0 38       	cpi	r28, 0x80	; 128
     8d8:	d1 05       	cpc	r29, r1
     8da:	cc f3       	brlt	.-14     	; 0x8ce <oled_reset+0x22>
     8dc:	0f 5f       	subi	r16, 0xFF	; 255
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	08 30       	cpi	r16, 0x08	; 8
     8e2:	11 05       	cpc	r17, r1
     8e4:	54 f3       	brlt	.-44     	; 0x8ba <oled_reset+0xe>
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <oled_init>:
     8f0:	8e ea       	ldi	r24, 0xAE	; 174
     8f2:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     8f6:	81 ea       	ldi	r24, 0xA1	; 161
     8f8:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     8fc:	8a ed       	ldi	r24, 0xDA	; 218
     8fe:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     902:	82 e1       	ldi	r24, 0x12	; 18
     904:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     908:	88 ec       	ldi	r24, 0xC8	; 200
     90a:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     90e:	88 ea       	ldi	r24, 0xA8	; 168
     910:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     914:	8f e3       	ldi	r24, 0x3F	; 63
     916:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     91a:	85 ed       	ldi	r24, 0xD5	; 213
     91c:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     920:	80 e8       	ldi	r24, 0x80	; 128
     922:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     926:	81 e8       	ldi	r24, 0x81	; 129
     928:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     92c:	80 e5       	ldi	r24, 0x50	; 80
     92e:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     932:	89 ed       	ldi	r24, 0xD9	; 217
     934:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     938:	81 e2       	ldi	r24, 0x21	; 33
     93a:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     93e:	80 e2       	ldi	r24, 0x20	; 32
     940:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     94a:	8b ed       	ldi	r24, 0xDB	; 219
     94c:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     950:	80 e3       	ldi	r24, 0x30	; 48
     952:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     956:	8d ea       	ldi	r24, 0xAD	; 173
     958:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     962:	84 ea       	ldi	r24, 0xA4	; 164
     964:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     968:	86 ea       	ldi	r24, 0xA6	; 166
     96a:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     96e:	8f ea       	ldi	r24, 0xAF	; 175
     970:	0e 94 22 04 	call	0x844	; 0x844 <write_command>
     974:	0e 94 56 04 	call	0x8ac	; 0x8ac <oled_reset>
     978:	08 95       	ret

0000097a <oled_print_char_large>:
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	90 ee       	ldi	r25, 0xE0	; 224
     982:	98 0f       	add	r25, r24
     984:	9f 35       	cpi	r25, 0x5F	; 95
     986:	98 f0       	brcs	.+38     	; 0x9ae <oled_print_char_large+0x34>
     988:	18 c0       	rjmp	.+48     	; 0x9ba <oled_print_char_large+0x40>
     98a:	e1 2f       	mov	r30, r17
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	b0 97       	sbiw	r30, 0x20	; 32
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	ec 0f       	add	r30, r28
     99e:	fd 1f       	adc	r31, r29
     9a0:	e5 5b       	subi	r30, 0xB5	; 181
     9a2:	fd 4f       	sbci	r31, 0xFD	; 253
     9a4:	84 91       	lpm	r24, Z
     9a6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <write_data>
     9aa:	21 96       	adiw	r28, 0x01	; 1
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <oled_print_char_large+0x3a>
     9ae:	18 2f       	mov	r17, r24
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
     9b4:	c8 30       	cpi	r28, 0x08	; 8
     9b6:	d1 05       	cpc	r29, r1
     9b8:	44 f3       	brlt	.-48     	; 0x98a <oled_print_char_large+0x10>
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	08 95       	ret

000009c2 <oled_print_char_normal>:
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	90 ee       	ldi	r25, 0xE0	; 224
     9ca:	98 0f       	add	r25, r24
     9cc:	9f 35       	cpi	r25, 0x5F	; 95
     9ce:	a8 f0       	brcs	.+42     	; 0x9fa <oled_print_char_normal+0x38>
     9d0:	1a c0       	rjmp	.+52     	; 0xa06 <oled_print_char_normal+0x44>
     9d2:	21 2f       	mov	r18, r17
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	20 52       	subi	r18, 0x20	; 32
     9d8:	31 09       	sbc	r19, r1
     9da:	f9 01       	movw	r30, r18
     9dc:	ee 0f       	add	r30, r30
     9de:	ff 1f       	adc	r31, r31
     9e0:	ee 0f       	add	r30, r30
     9e2:	ff 1f       	adc	r31, r31
     9e4:	e2 0f       	add	r30, r18
     9e6:	f3 1f       	adc	r31, r19
     9e8:	ec 0f       	add	r30, r28
     9ea:	fd 1f       	adc	r31, r29
     9ec:	e0 59       	subi	r30, 0x90	; 144
     9ee:	ff 4f       	sbci	r31, 0xFF	; 255
     9f0:	84 91       	lpm	r24, Z
     9f2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <write_data>
     9f6:	21 96       	adiw	r28, 0x01	; 1
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <oled_print_char_normal+0x3e>
     9fa:	18 2f       	mov	r17, r24
     9fc:	c0 e0       	ldi	r28, 0x00	; 0
     9fe:	d0 e0       	ldi	r29, 0x00	; 0
     a00:	c5 30       	cpi	r28, 0x05	; 5
     a02:	d1 05       	cpc	r29, r1
     a04:	34 f3       	brlt	.-52     	; 0x9d2 <oled_print_char_normal+0x10>
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	08 95       	ret

00000a0e <oled_print_string_large>:
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	8c 01       	movw	r16, r24
     a18:	c0 e0       	ldi	r28, 0x00	; 0
     a1a:	d0 e0       	ldi	r29, 0x00	; 0
     a1c:	03 c0       	rjmp	.+6      	; 0xa24 <oled_print_string_large+0x16>
     a1e:	0e 94 bd 04 	call	0x97a	; 0x97a <oled_print_char_large>
     a22:	21 96       	adiw	r28, 0x01	; 1
     a24:	f8 01       	movw	r30, r16
     a26:	ec 0f       	add	r30, r28
     a28:	fd 1f       	adc	r31, r29
     a2a:	80 81       	ld	r24, Z
     a2c:	81 11       	cpse	r24, r1
     a2e:	f7 cf       	rjmp	.-18     	; 0xa1e <oled_print_string_large+0x10>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

00000a3a <oled_print_string_normal>:
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	8c 01       	movw	r16, r24
     a44:	c0 e0       	ldi	r28, 0x00	; 0
     a46:	d0 e0       	ldi	r29, 0x00	; 0
     a48:	03 c0       	rjmp	.+6      	; 0xa50 <oled_print_string_normal+0x16>
     a4a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <oled_print_char_normal>
     a4e:	21 96       	adiw	r28, 0x01	; 1
     a50:	f8 01       	movw	r30, r16
     a52:	ec 0f       	add	r30, r28
     a54:	fd 1f       	adc	r31, r29
     a56:	80 81       	ld	r24, Z
     a58:	81 11       	cpse	r24, r1
     a5a:	f7 cf       	rjmp	.-18     	; 0xa4a <oled_print_string_normal+0x10>
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	08 95       	ret

00000a66 <oled_set_home>:
		.menu_index4 = " Select team",
		.menu_index5 = " Highscores",
		.menu_index6 = " Settings"
	};
	
	oled_set_position(0,1);
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
	oled_print_string_large("---MAIN MENU---");
     a72:	80 e8       	ldi	r24, 0x80	; 128
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 07 05 	call	0xa0e	; 0xa0e <oled_print_string_large>
	
	oled_set_position(1,1);
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
	oled_print_string_normal(menu.menu_index1);
     a86:	80 e9       	ldi	r24, 0x90	; 144
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <oled_print_string_normal>
	
	oled_set_position(2,1);
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
	oled_print_string_normal(menu.menu_index2);
     a9a:	86 e9       	ldi	r24, 0x96	; 150
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <oled_print_string_normal>
	
	oled_set_position(3,1);
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
	oled_print_string_normal(menu.menu_index3);
     aae:	80 ea       	ldi	r24, 0xA0	; 160
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <oled_print_string_normal>
	
	oled_set_position(4,1);
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
	oled_print_string_normal(menu.menu_index4);
     ac2:	8a ea       	ldi	r24, 0xAA	; 170
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <oled_print_string_normal>
	
	oled_set_position(5,1);
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	85 e0       	ldi	r24, 0x05	; 5
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
	oled_print_string_normal(menu.menu_index5);
     ad6:	87 eb       	ldi	r24, 0xB7	; 183
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 1d 05 	call	0xa3a	; 0xa3a <oled_print_string_normal>
	
	oled_set_position(6,1);
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	86 e0       	ldi	r24, 0x06	; 6
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
	oled_print_string_normal(menu.menu_index6);
     aea:	83 ec       	ldi	r24, 0xC3	; 195
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 1d 05 	call	0xa3a	; 0xa3a <oled_print_string_normal>
	
	oled_set_position(7,1);
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	87 e0       	ldi	r24, 0x07	; 7
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 48 04 	call	0x890	; 0x890 <oled_set_position>
	oled_print_string_large("<< Return");
     afe:	8d ec       	ldi	r24, 0xCD	; 205
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 07 05 	call	0xa0e	; 0xa0e <oled_print_string_large>
     b06:	08 95       	ret

00000b08 <SRAM_test>:
#include "sram_test.h"

#include <stdlib.h>
#include <stdint.h>
int SRAM_test(void)
{
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\r\n");
     b14:	87 ed       	ldi	r24, 0xD7	; 215
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     b1c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <rand>
     b20:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     b22:	0e 94 7e 06 	call	0xcfc	; 0xcfc <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b26:	c0 e0       	ldi	r28, 0x00	; 0
     b28:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdint.h>
int SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     b2a:	00 e0       	ldi	r16, 0x00	; 0
     b2c:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b2e:	20 c0       	rjmp	.+64     	; 0xb70 <SRAM_test+0x68>
		uint8_t some_value = rand();
     b30:	0e 94 79 06 	call	0xcf2	; 0xcf2 <rand>
		ext_ram[i] = some_value;
     b34:	fe 01       	movw	r30, r28
     b36:	f8 5e       	subi	r31, 0xE8	; 232
     b38:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     b3a:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     b3c:	28 17       	cp	r18, r24
     b3e:	b9 f0       	breq	.+46     	; 0xb6e <SRAM_test+0x66>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     b40:	99 27       	eor	r25, r25
     b42:	9f 93       	push	r25
     b44:	8f 93       	push	r24
     b46:	1f 92       	push	r1
     b48:	2f 93       	push	r18
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	8e ee       	ldi	r24, 0xEE	; 238
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	9f 93       	push	r25
     b54:	8f 93       	push	r24
     b56:	0e 94 d4 06 	call	0xda8	; 0xda8 <printf>
			write_errors++;
     b5a:	0f 5f       	subi	r16, 0xFF	; 255
     b5c:	1f 4f       	sbci	r17, 0xFF	; 255
     b5e:	8d b7       	in	r24, 0x3d	; 61
     b60:	9e b7       	in	r25, 0x3e	; 62
     b62:	08 96       	adiw	r24, 0x08	; 8
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	9e bf       	out	0x3e, r25	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b6e:	21 96       	adiw	r28, 0x01	; 1
     b70:	c1 15       	cp	r28, r1
     b72:	98 e0       	ldi	r25, 0x08	; 8
     b74:	d9 07       	cpc	r29, r25
     b76:	e0 f2       	brcs	.-72     	; 0xb30 <SRAM_test+0x28>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
     b78:	c7 01       	movw	r24, r14
     b7a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
     b80:	d0 e0       	ldi	r29, 0x00	; 0
int SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     b82:	e1 2c       	mov	r14, r1
     b84:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b86:	20 c0       	rjmp	.+64     	; 0xbc8 <SRAM_test+0xc0>
		uint8_t some_value = rand();
     b88:	0e 94 79 06 	call	0xcf2	; 0xcf2 <rand>
		uint8_t retreived_value = ext_ram[i];
     b8c:	fe 01       	movw	r30, r28
     b8e:	f8 5e       	subi	r31, 0xE8	; 232
     b90:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     b92:	28 17       	cp	r18, r24
     b94:	c1 f0       	breq	.+48     	; 0xbc6 <SRAM_test+0xbe>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     b96:	99 27       	eor	r25, r25
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	1f 92       	push	r1
     b9e:	2f 93       	push	r18
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	88 e2       	ldi	r24, 0x28	; 40
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	0e 94 d4 06 	call	0xda8	; 0xda8 <printf>
			retrieval_errors++;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	e8 1a       	sub	r14, r24
     bb4:	f8 0a       	sbc	r15, r24
     bb6:	8d b7       	in	r24, 0x3d	; 61
     bb8:	9e b7       	in	r25, 0x3e	; 62
     bba:	08 96       	adiw	r24, 0x08	; 8
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	9e bf       	out	0x3e, r25	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     bc6:	21 96       	adiw	r28, 0x01	; 1
     bc8:	c1 15       	cp	r28, r1
     bca:	98 e0       	ldi	r25, 0x08	; 8
     bcc:	d9 07       	cpc	r29, r25
     bce:	e0 f2       	brcs	.-72     	; 0xb88 <SRAM_test+0x80>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors || write_errors) {
     bd0:	e1 14       	cp	r14, r1
     bd2:	f1 04       	cpc	r15, r1
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <SRAM_test+0xfa>
     bd6:	01 15       	cp	r16, r1
     bd8:	11 05       	cpc	r17, r1
     bda:	b1 f4       	brne	.+44     	; 0xc08 <SRAM_test+0x100>
		return 1;
	}
	printf("SRAM test completed with \r\n%4d errors in write phase and \r\n%4d errors in retrieval phase\r\n\r\n", write_errors, retrieval_errors);
     bdc:	ff 92       	push	r15
     bde:	ef 92       	push	r14
     be0:	1f 93       	push	r17
     be2:	0f 93       	push	r16
     be4:	86 e6       	ldi	r24, 0x66	; 102
     be6:	92 e0       	ldi	r25, 0x02	; 2
     be8:	9f 93       	push	r25
     bea:	8f 93       	push	r24
     bec:	0e 94 d4 06 	call	0xda8	; 0xda8 <printf>
	return 0;
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <SRAM_test+0x104>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors || write_errors) {
		return 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <SRAM_test+0x104>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
	}
	printf("SRAM test completed with \r\n%4d errors in write phase and \r\n%4d errors in retrieval phase\r\n\r\n", write_errors, retrieval_errors);
	return 0;
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	08 95       	ret

00000c1a <usart_transmit>:



void usart_transmit(unsigned char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) {	
     c1a:	5d 9b       	sbis	0x0b, 5	; 11
     c1c:	fe cf       	rjmp	.-4      	; 0xc1a <usart_transmit>
	}
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     c1e:	8c b9       	out	0x0c, r24	; 12
     c20:	08 95       	ret

00000c22 <usart_receive>:
}

unsigned char usart_receive(void) {
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) ) {
     c22:	5f 9b       	sbis	0x0b, 7	; 11
     c24:	fe cf       	rjmp	.-4      	; 0xc22 <usart_receive>
	}
	/* Get and return received data from buffer */
	return UDR0;
     c26:	8c b1       	in	r24, 0x0c	; 12
}
     c28:	08 95       	ret

00000c2a <usart_init>:
#include <avr/io.h>
#include "uart_driver.h"

void usart_init(uint8_t ubrr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     c2a:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)ubrr;
     c2c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     c2e:	88 e1       	ldi	r24, 0x18	; 24
     c30:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     c32:	86 e8       	ldi	r24, 0x86	; 134
     c34:	80 bd       	out	0x20, r24	; 32
	fdevopen(usart_transmit, usart_receive);
     c36:	61 e1       	ldi	r22, 0x11	; 17
     c38:	76 e0       	ldi	r23, 0x06	; 6
     c3a:	8d e0       	ldi	r24, 0x0D	; 13
     c3c:	96 e0       	ldi	r25, 0x06	; 6
     c3e:	0e 94 89 06 	call	0xd12	; 0xd12 <fdevopen>
     c42:	08 95       	ret

00000c44 <xmem_init>:
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1 << SRE); //enable XMEM
     c44:	85 b7       	in	r24, 0x35	; 53
     c46:	80 68       	ori	r24, 0x80	; 128
     c48:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); //bit masking
     c4a:	80 b7       	in	r24, 0x30	; 48
     c4c:	80 62       	ori	r24, 0x20	; 32
     c4e:	80 bf       	out	0x30, r24	; 48
	printf("-XMEM init-\n");	
     c50:	83 ec       	ldi	r24, 0xC3	; 195
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <puts>
     c58:	08 95       	ret

00000c5a <do_rand>:
     c5a:	8f 92       	push	r8
     c5c:	9f 92       	push	r9
     c5e:	af 92       	push	r10
     c60:	bf 92       	push	r11
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	ec 01       	movw	r28, r24
     c70:	68 81       	ld	r22, Y
     c72:	79 81       	ldd	r23, Y+1	; 0x01
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	9b 81       	ldd	r25, Y+3	; 0x03
     c78:	61 15       	cp	r22, r1
     c7a:	71 05       	cpc	r23, r1
     c7c:	81 05       	cpc	r24, r1
     c7e:	91 05       	cpc	r25, r1
     c80:	21 f4       	brne	.+8      	; 0xc8a <do_rand+0x30>
     c82:	64 e2       	ldi	r22, 0x24	; 36
     c84:	79 ed       	ldi	r23, 0xD9	; 217
     c86:	8b e5       	ldi	r24, 0x5B	; 91
     c88:	97 e0       	ldi	r25, 0x07	; 7
     c8a:	2d e1       	ldi	r18, 0x1D	; 29
     c8c:	33 ef       	ldi	r19, 0xF3	; 243
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divmodsi4>
     c96:	49 01       	movw	r8, r18
     c98:	5a 01       	movw	r10, r20
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	a7 ea       	ldi	r26, 0xA7	; 167
     ca0:	b1 e4       	ldi	r27, 0x41	; 65
     ca2:	0e 94 0e 0b 	call	0x161c	; 0x161c <__muluhisi3>
     ca6:	6b 01       	movw	r12, r22
     ca8:	7c 01       	movw	r14, r24
     caa:	ac ee       	ldi	r26, 0xEC	; 236
     cac:	b4 ef       	ldi	r27, 0xF4	; 244
     cae:	a5 01       	movw	r20, r10
     cb0:	94 01       	movw	r18, r8
     cb2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulohisi3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8c 0d       	add	r24, r12
     cbc:	9d 1d       	adc	r25, r13
     cbe:	ae 1d       	adc	r26, r14
     cc0:	bf 1d       	adc	r27, r15
     cc2:	b7 ff       	sbrs	r27, 7
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <do_rand+0x72>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b0 48       	sbci	r27, 0x80	; 128
     ccc:	88 83       	st	Y, r24
     cce:	99 83       	std	Y+1, r25	; 0x01
     cd0:	aa 83       	std	Y+2, r26	; 0x02
     cd2:	bb 83       	std	Y+3, r27	; 0x03
     cd4:	9f 77       	andi	r25, 0x7F	; 127
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	df 90       	pop	r13
     ce0:	cf 90       	pop	r12
     ce2:	bf 90       	pop	r11
     ce4:	af 90       	pop	r10
     ce6:	9f 90       	pop	r9
     ce8:	8f 90       	pop	r8
     cea:	08 95       	ret

00000cec <rand_r>:
     cec:	0e 94 2d 06 	call	0xc5a	; 0xc5a <do_rand>
     cf0:	08 95       	ret

00000cf2 <rand>:
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <do_rand>
     cfa:	08 95       	ret

00000cfc <srand>:
     cfc:	a0 e0       	ldi	r26, 0x00	; 0
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d04:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     d08:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     d0c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     d10:	08 95       	ret

00000d12 <fdevopen>:
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	31 f4       	brne	.+12     	; 0xd2a <fdevopen+0x18>
     d1e:	61 15       	cp	r22, r1
     d20:	71 05       	cpc	r23, r1
     d22:	19 f4       	brne	.+6      	; 0xd2a <fdevopen+0x18>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	3a c0       	rjmp	.+116    	; 0xd9e <fdevopen+0x8c>
     d2a:	8b 01       	movw	r16, r22
     d2c:	ec 01       	movw	r28, r24
     d2e:	6e e0       	ldi	r22, 0x0E	; 14
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <calloc>
     d3a:	fc 01       	movw	r30, r24
     d3c:	89 2b       	or	r24, r25
     d3e:	91 f3       	breq	.-28     	; 0xd24 <fdevopen+0x12>
     d40:	80 e8       	ldi	r24, 0x80	; 128
     d42:	83 83       	std	Z+3, r24	; 0x03
     d44:	01 15       	cp	r16, r1
     d46:	11 05       	cpc	r17, r1
     d48:	71 f0       	breq	.+28     	; 0xd66 <fdevopen+0x54>
     d4a:	13 87       	std	Z+11, r17	; 0x0b
     d4c:	02 87       	std	Z+10, r16	; 0x0a
     d4e:	81 e8       	ldi	r24, 0x81	; 129
     d50:	83 83       	std	Z+3, r24	; 0x03
     d52:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <__data_end>
     d56:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <__data_end+0x1>
     d5a:	89 2b       	or	r24, r25
     d5c:	21 f4       	brne	.+8      	; 0xd66 <fdevopen+0x54>
     d5e:	f0 93 d1 02 	sts	0x02D1, r31	; 0x8002d1 <__data_end+0x1>
     d62:	e0 93 d0 02 	sts	0x02D0, r30	; 0x8002d0 <__data_end>
     d66:	20 97       	sbiw	r28, 0x00	; 0
     d68:	c9 f0       	breq	.+50     	; 0xd9c <fdevopen+0x8a>
     d6a:	d1 87       	std	Z+9, r29	; 0x09
     d6c:	c0 87       	std	Z+8, r28	; 0x08
     d6e:	83 81       	ldd	r24, Z+3	; 0x03
     d70:	82 60       	ori	r24, 0x02	; 2
     d72:	83 83       	std	Z+3, r24	; 0x03
     d74:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <__data_end+0x2>
     d78:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <__data_end+0x3>
     d7c:	89 2b       	or	r24, r25
     d7e:	71 f4       	brne	.+28     	; 0xd9c <fdevopen+0x8a>
     d80:	f0 93 d3 02 	sts	0x02D3, r31	; 0x8002d3 <__data_end+0x3>
     d84:	e0 93 d2 02 	sts	0x02D2, r30	; 0x8002d2 <__data_end+0x2>
     d88:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end+0x4>
     d8c:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <__data_end+0x5>
     d90:	89 2b       	or	r24, r25
     d92:	21 f4       	brne	.+8      	; 0xd9c <fdevopen+0x8a>
     d94:	f0 93 d5 02 	sts	0x02D5, r31	; 0x8002d5 <__data_end+0x5>
     d98:	e0 93 d4 02 	sts	0x02D4, r30	; 0x8002d4 <__data_end+0x4>
     d9c:	cf 01       	movw	r24, r30
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <printf>:
     da8:	a0 e0       	ldi	r26, 0x00	; 0
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea ed       	ldi	r30, 0xDA	; 218
     dae:	f6 e0       	ldi	r31, 0x06	; 6
     db0:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__prologue_saves__+0x20>
     db4:	ae 01       	movw	r20, r28
     db6:	4b 5f       	subi	r20, 0xFB	; 251
     db8:	5f 4f       	sbci	r21, 0xFF	; 255
     dba:	fa 01       	movw	r30, r20
     dbc:	61 91       	ld	r22, Z+
     dbe:	71 91       	ld	r23, Z+
     dc0:	af 01       	movw	r20, r30
     dc2:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <__data_end+0x2>
     dc6:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <__data_end+0x3>
     dca:	0e 94 1a 07 	call	0xe34	; 0xe34 <vfprintf>
     dce:	e2 e0       	ldi	r30, 0x02	; 2
     dd0:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__epilogue_restores__+0x20>

00000dd4 <puts>:
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	e0 91 d2 02 	lds	r30, 0x02D2	; 0x8002d2 <__data_end+0x2>
     de0:	f0 91 d3 02 	lds	r31, 0x02D3	; 0x8002d3 <__data_end+0x3>
     de4:	23 81       	ldd	r18, Z+3	; 0x03
     de6:	21 ff       	sbrs	r18, 1
     de8:	1b c0       	rjmp	.+54     	; 0xe20 <puts+0x4c>
     dea:	8c 01       	movw	r16, r24
     dec:	d0 e0       	ldi	r29, 0x00	; 0
     dee:	c0 e0       	ldi	r28, 0x00	; 0
     df0:	f8 01       	movw	r30, r16
     df2:	81 91       	ld	r24, Z+
     df4:	8f 01       	movw	r16, r30
     df6:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <__data_end+0x2>
     dfa:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <__data_end+0x3>
     dfe:	db 01       	movw	r26, r22
     e00:	18 96       	adiw	r26, 0x08	; 8
     e02:	ed 91       	ld	r30, X+
     e04:	fc 91       	ld	r31, X
     e06:	19 97       	sbiw	r26, 0x09	; 9
     e08:	88 23       	and	r24, r24
     e0a:	31 f0       	breq	.+12     	; 0xe18 <puts+0x44>
     e0c:	09 95       	icall
     e0e:	89 2b       	or	r24, r25
     e10:	79 f3       	breq	.-34     	; 0xdf0 <puts+0x1c>
     e12:	df ef       	ldi	r29, 0xFF	; 255
     e14:	cf ef       	ldi	r28, 0xFF	; 255
     e16:	ec cf       	rjmp	.-40     	; 0xdf0 <puts+0x1c>
     e18:	8a e0       	ldi	r24, 0x0A	; 10
     e1a:	09 95       	icall
     e1c:	89 2b       	or	r24, r25
     e1e:	19 f0       	breq	.+6      	; 0xe26 <puts+0x52>
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	9f ef       	ldi	r25, 0xFF	; 255
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <puts+0x56>
     e26:	8d 2f       	mov	r24, r29
     e28:	9c 2f       	mov	r25, r28
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	08 95       	ret

00000e34 <vfprintf>:
     e34:	ab e0       	ldi	r26, 0x0B	; 11
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e0 e2       	ldi	r30, 0x20	; 32
     e3a:	f7 e0       	ldi	r31, 0x07	; 7
     e3c:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__prologue_saves__>
     e40:	6c 01       	movw	r12, r24
     e42:	7b 01       	movw	r14, r22
     e44:	8a 01       	movw	r16, r20
     e46:	fc 01       	movw	r30, r24
     e48:	17 82       	std	Z+7, r1	; 0x07
     e4a:	16 82       	std	Z+6, r1	; 0x06
     e4c:	83 81       	ldd	r24, Z+3	; 0x03
     e4e:	81 ff       	sbrs	r24, 1
     e50:	cc c1       	rjmp	.+920    	; 0x11ea <vfprintf+0x3b6>
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	3c 01       	movw	r6, r24
     e58:	f6 01       	movw	r30, r12
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	f7 01       	movw	r30, r14
     e5e:	93 fd       	sbrc	r25, 3
     e60:	85 91       	lpm	r24, Z+
     e62:	93 ff       	sbrs	r25, 3
     e64:	81 91       	ld	r24, Z+
     e66:	7f 01       	movw	r14, r30
     e68:	88 23       	and	r24, r24
     e6a:	09 f4       	brne	.+2      	; 0xe6e <vfprintf+0x3a>
     e6c:	ba c1       	rjmp	.+884    	; 0x11e2 <vfprintf+0x3ae>
     e6e:	85 32       	cpi	r24, 0x25	; 37
     e70:	39 f4       	brne	.+14     	; 0xe80 <vfprintf+0x4c>
     e72:	93 fd       	sbrc	r25, 3
     e74:	85 91       	lpm	r24, Z+
     e76:	93 ff       	sbrs	r25, 3
     e78:	81 91       	ld	r24, Z+
     e7a:	7f 01       	movw	r14, r30
     e7c:	85 32       	cpi	r24, 0x25	; 37
     e7e:	29 f4       	brne	.+10     	; 0xe8a <vfprintf+0x56>
     e80:	b6 01       	movw	r22, r12
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     e88:	e7 cf       	rjmp	.-50     	; 0xe58 <vfprintf+0x24>
     e8a:	91 2c       	mov	r9, r1
     e8c:	21 2c       	mov	r2, r1
     e8e:	31 2c       	mov	r3, r1
     e90:	ff e1       	ldi	r31, 0x1F	; 31
     e92:	f3 15       	cp	r31, r3
     e94:	d8 f0       	brcs	.+54     	; 0xecc <vfprintf+0x98>
     e96:	8b 32       	cpi	r24, 0x2B	; 43
     e98:	79 f0       	breq	.+30     	; 0xeb8 <vfprintf+0x84>
     e9a:	38 f4       	brcc	.+14     	; 0xeaa <vfprintf+0x76>
     e9c:	80 32       	cpi	r24, 0x20	; 32
     e9e:	79 f0       	breq	.+30     	; 0xebe <vfprintf+0x8a>
     ea0:	83 32       	cpi	r24, 0x23	; 35
     ea2:	a1 f4       	brne	.+40     	; 0xecc <vfprintf+0x98>
     ea4:	23 2d       	mov	r18, r3
     ea6:	20 61       	ori	r18, 0x10	; 16
     ea8:	1d c0       	rjmp	.+58     	; 0xee4 <vfprintf+0xb0>
     eaa:	8d 32       	cpi	r24, 0x2D	; 45
     eac:	61 f0       	breq	.+24     	; 0xec6 <vfprintf+0x92>
     eae:	80 33       	cpi	r24, 0x30	; 48
     eb0:	69 f4       	brne	.+26     	; 0xecc <vfprintf+0x98>
     eb2:	23 2d       	mov	r18, r3
     eb4:	21 60       	ori	r18, 0x01	; 1
     eb6:	16 c0       	rjmp	.+44     	; 0xee4 <vfprintf+0xb0>
     eb8:	83 2d       	mov	r24, r3
     eba:	82 60       	ori	r24, 0x02	; 2
     ebc:	38 2e       	mov	r3, r24
     ebe:	e3 2d       	mov	r30, r3
     ec0:	e4 60       	ori	r30, 0x04	; 4
     ec2:	3e 2e       	mov	r3, r30
     ec4:	2a c0       	rjmp	.+84     	; 0xf1a <vfprintf+0xe6>
     ec6:	f3 2d       	mov	r31, r3
     ec8:	f8 60       	ori	r31, 0x08	; 8
     eca:	1d c0       	rjmp	.+58     	; 0xf06 <vfprintf+0xd2>
     ecc:	37 fc       	sbrc	r3, 7
     ece:	2d c0       	rjmp	.+90     	; 0xf2a <vfprintf+0xf6>
     ed0:	20 ed       	ldi	r18, 0xD0	; 208
     ed2:	28 0f       	add	r18, r24
     ed4:	2a 30       	cpi	r18, 0x0A	; 10
     ed6:	40 f0       	brcs	.+16     	; 0xee8 <vfprintf+0xb4>
     ed8:	8e 32       	cpi	r24, 0x2E	; 46
     eda:	b9 f4       	brne	.+46     	; 0xf0a <vfprintf+0xd6>
     edc:	36 fc       	sbrc	r3, 6
     ede:	81 c1       	rjmp	.+770    	; 0x11e2 <vfprintf+0x3ae>
     ee0:	23 2d       	mov	r18, r3
     ee2:	20 64       	ori	r18, 0x40	; 64
     ee4:	32 2e       	mov	r3, r18
     ee6:	19 c0       	rjmp	.+50     	; 0xf1a <vfprintf+0xe6>
     ee8:	36 fe       	sbrs	r3, 6
     eea:	06 c0       	rjmp	.+12     	; 0xef8 <vfprintf+0xc4>
     eec:	8a e0       	ldi	r24, 0x0A	; 10
     eee:	98 9e       	mul	r9, r24
     ef0:	20 0d       	add	r18, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	92 2e       	mov	r9, r18
     ef6:	11 c0       	rjmp	.+34     	; 0xf1a <vfprintf+0xe6>
     ef8:	ea e0       	ldi	r30, 0x0A	; 10
     efa:	2e 9e       	mul	r2, r30
     efc:	20 0d       	add	r18, r0
     efe:	11 24       	eor	r1, r1
     f00:	22 2e       	mov	r2, r18
     f02:	f3 2d       	mov	r31, r3
     f04:	f0 62       	ori	r31, 0x20	; 32
     f06:	3f 2e       	mov	r3, r31
     f08:	08 c0       	rjmp	.+16     	; 0xf1a <vfprintf+0xe6>
     f0a:	8c 36       	cpi	r24, 0x6C	; 108
     f0c:	21 f4       	brne	.+8      	; 0xf16 <vfprintf+0xe2>
     f0e:	83 2d       	mov	r24, r3
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	38 2e       	mov	r3, r24
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0xe6>
     f16:	88 36       	cpi	r24, 0x68	; 104
     f18:	41 f4       	brne	.+16     	; 0xf2a <vfprintf+0xf6>
     f1a:	f7 01       	movw	r30, r14
     f1c:	93 fd       	sbrc	r25, 3
     f1e:	85 91       	lpm	r24, Z+
     f20:	93 ff       	sbrs	r25, 3
     f22:	81 91       	ld	r24, Z+
     f24:	7f 01       	movw	r14, r30
     f26:	81 11       	cpse	r24, r1
     f28:	b3 cf       	rjmp	.-154    	; 0xe90 <vfprintf+0x5c>
     f2a:	98 2f       	mov	r25, r24
     f2c:	9f 7d       	andi	r25, 0xDF	; 223
     f2e:	95 54       	subi	r25, 0x45	; 69
     f30:	93 30       	cpi	r25, 0x03	; 3
     f32:	28 f4       	brcc	.+10     	; 0xf3e <vfprintf+0x10a>
     f34:	0c 5f       	subi	r16, 0xFC	; 252
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	9f e3       	ldi	r25, 0x3F	; 63
     f3a:	99 83       	std	Y+1, r25	; 0x01
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <vfprintf+0x124>
     f3e:	83 36       	cpi	r24, 0x63	; 99
     f40:	31 f0       	breq	.+12     	; 0xf4e <vfprintf+0x11a>
     f42:	83 37       	cpi	r24, 0x73	; 115
     f44:	71 f0       	breq	.+28     	; 0xf62 <vfprintf+0x12e>
     f46:	83 35       	cpi	r24, 0x53	; 83
     f48:	09 f0       	breq	.+2      	; 0xf4c <vfprintf+0x118>
     f4a:	59 c0       	rjmp	.+178    	; 0xffe <vfprintf+0x1ca>
     f4c:	21 c0       	rjmp	.+66     	; 0xf90 <vfprintf+0x15c>
     f4e:	f8 01       	movw	r30, r16
     f50:	80 81       	ld	r24, Z
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	0e 5f       	subi	r16, 0xFE	; 254
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	88 24       	eor	r8, r8
     f5a:	83 94       	inc	r8
     f5c:	91 2c       	mov	r9, r1
     f5e:	53 01       	movw	r10, r6
     f60:	13 c0       	rjmp	.+38     	; 0xf88 <vfprintf+0x154>
     f62:	28 01       	movw	r4, r16
     f64:	f2 e0       	ldi	r31, 0x02	; 2
     f66:	4f 0e       	add	r4, r31
     f68:	51 1c       	adc	r5, r1
     f6a:	f8 01       	movw	r30, r16
     f6c:	a0 80       	ld	r10, Z
     f6e:	b1 80       	ldd	r11, Z+1	; 0x01
     f70:	36 fe       	sbrs	r3, 6
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <vfprintf+0x146>
     f74:	69 2d       	mov	r22, r9
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vfprintf+0x14a>
     f7a:	6f ef       	ldi	r22, 0xFF	; 255
     f7c:	7f ef       	ldi	r23, 0xFF	; 255
     f7e:	c5 01       	movw	r24, r10
     f80:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strnlen>
     f84:	4c 01       	movw	r8, r24
     f86:	82 01       	movw	r16, r4
     f88:	f3 2d       	mov	r31, r3
     f8a:	ff 77       	andi	r31, 0x7F	; 127
     f8c:	3f 2e       	mov	r3, r31
     f8e:	16 c0       	rjmp	.+44     	; 0xfbc <vfprintf+0x188>
     f90:	28 01       	movw	r4, r16
     f92:	22 e0       	ldi	r18, 0x02	; 2
     f94:	42 0e       	add	r4, r18
     f96:	51 1c       	adc	r5, r1
     f98:	f8 01       	movw	r30, r16
     f9a:	a0 80       	ld	r10, Z
     f9c:	b1 80       	ldd	r11, Z+1	; 0x01
     f9e:	36 fe       	sbrs	r3, 6
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <vfprintf+0x174>
     fa2:	69 2d       	mov	r22, r9
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x178>
     fa8:	6f ef       	ldi	r22, 0xFF	; 255
     faa:	7f ef       	ldi	r23, 0xFF	; 255
     fac:	c5 01       	movw	r24, r10
     fae:	0e 94 38 0a 	call	0x1470	; 0x1470 <strnlen_P>
     fb2:	4c 01       	movw	r8, r24
     fb4:	f3 2d       	mov	r31, r3
     fb6:	f0 68       	ori	r31, 0x80	; 128
     fb8:	3f 2e       	mov	r3, r31
     fba:	82 01       	movw	r16, r4
     fbc:	33 fc       	sbrc	r3, 3
     fbe:	1b c0       	rjmp	.+54     	; 0xff6 <vfprintf+0x1c2>
     fc0:	82 2d       	mov	r24, r2
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	88 16       	cp	r8, r24
     fc6:	99 06       	cpc	r9, r25
     fc8:	b0 f4       	brcc	.+44     	; 0xff6 <vfprintf+0x1c2>
     fca:	b6 01       	movw	r22, r12
     fcc:	80 e2       	ldi	r24, 0x20	; 32
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     fd4:	2a 94       	dec	r2
     fd6:	f4 cf       	rjmp	.-24     	; 0xfc0 <vfprintf+0x18c>
     fd8:	f5 01       	movw	r30, r10
     fda:	37 fc       	sbrc	r3, 7
     fdc:	85 91       	lpm	r24, Z+
     fde:	37 fe       	sbrs	r3, 7
     fe0:	81 91       	ld	r24, Z+
     fe2:	5f 01       	movw	r10, r30
     fe4:	b6 01       	movw	r22, r12
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     fec:	21 10       	cpse	r2, r1
     fee:	2a 94       	dec	r2
     ff0:	21 e0       	ldi	r18, 0x01	; 1
     ff2:	82 1a       	sub	r8, r18
     ff4:	91 08       	sbc	r9, r1
     ff6:	81 14       	cp	r8, r1
     ff8:	91 04       	cpc	r9, r1
     ffa:	71 f7       	brne	.-36     	; 0xfd8 <vfprintf+0x1a4>
     ffc:	e8 c0       	rjmp	.+464    	; 0x11ce <vfprintf+0x39a>
     ffe:	84 36       	cpi	r24, 0x64	; 100
    1000:	11 f0       	breq	.+4      	; 0x1006 <vfprintf+0x1d2>
    1002:	89 36       	cpi	r24, 0x69	; 105
    1004:	41 f5       	brne	.+80     	; 0x1056 <vfprintf+0x222>
    1006:	f8 01       	movw	r30, r16
    1008:	37 fe       	sbrs	r3, 7
    100a:	07 c0       	rjmp	.+14     	; 0x101a <vfprintf+0x1e6>
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	0c 5f       	subi	r16, 0xFC	; 252
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
    1018:	08 c0       	rjmp	.+16     	; 0x102a <vfprintf+0x1f6>
    101a:	60 81       	ld	r22, Z
    101c:	71 81       	ldd	r23, Z+1	; 0x01
    101e:	07 2e       	mov	r0, r23
    1020:	00 0c       	add	r0, r0
    1022:	88 0b       	sbc	r24, r24
    1024:	99 0b       	sbc	r25, r25
    1026:	0e 5f       	subi	r16, 0xFE	; 254
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	f3 2d       	mov	r31, r3
    102c:	ff 76       	andi	r31, 0x6F	; 111
    102e:	3f 2e       	mov	r3, r31
    1030:	97 ff       	sbrs	r25, 7
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <vfprintf+0x212>
    1034:	90 95       	com	r25
    1036:	80 95       	com	r24
    1038:	70 95       	com	r23
    103a:	61 95       	neg	r22
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	8f 4f       	sbci	r24, 0xFF	; 255
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	f0 68       	ori	r31, 0x80	; 128
    1044:	3f 2e       	mov	r3, r31
    1046:	2a e0       	ldi	r18, 0x0A	; 10
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	a3 01       	movw	r20, r6
    104c:	0e 94 91 0a 	call	0x1522	; 0x1522 <__ultoa_invert>
    1050:	88 2e       	mov	r8, r24
    1052:	86 18       	sub	r8, r6
    1054:	45 c0       	rjmp	.+138    	; 0x10e0 <vfprintf+0x2ac>
    1056:	85 37       	cpi	r24, 0x75	; 117
    1058:	31 f4       	brne	.+12     	; 0x1066 <vfprintf+0x232>
    105a:	23 2d       	mov	r18, r3
    105c:	2f 7e       	andi	r18, 0xEF	; 239
    105e:	b2 2e       	mov	r11, r18
    1060:	2a e0       	ldi	r18, 0x0A	; 10
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	25 c0       	rjmp	.+74     	; 0x10b0 <vfprintf+0x27c>
    1066:	93 2d       	mov	r25, r3
    1068:	99 7f       	andi	r25, 0xF9	; 249
    106a:	b9 2e       	mov	r11, r25
    106c:	8f 36       	cpi	r24, 0x6F	; 111
    106e:	c1 f0       	breq	.+48     	; 0x10a0 <vfprintf+0x26c>
    1070:	18 f4       	brcc	.+6      	; 0x1078 <vfprintf+0x244>
    1072:	88 35       	cpi	r24, 0x58	; 88
    1074:	79 f0       	breq	.+30     	; 0x1094 <vfprintf+0x260>
    1076:	b5 c0       	rjmp	.+362    	; 0x11e2 <vfprintf+0x3ae>
    1078:	80 37       	cpi	r24, 0x70	; 112
    107a:	19 f0       	breq	.+6      	; 0x1082 <vfprintf+0x24e>
    107c:	88 37       	cpi	r24, 0x78	; 120
    107e:	21 f0       	breq	.+8      	; 0x1088 <vfprintf+0x254>
    1080:	b0 c0       	rjmp	.+352    	; 0x11e2 <vfprintf+0x3ae>
    1082:	e9 2f       	mov	r30, r25
    1084:	e0 61       	ori	r30, 0x10	; 16
    1086:	be 2e       	mov	r11, r30
    1088:	b4 fe       	sbrs	r11, 4
    108a:	0d c0       	rjmp	.+26     	; 0x10a6 <vfprintf+0x272>
    108c:	fb 2d       	mov	r31, r11
    108e:	f4 60       	ori	r31, 0x04	; 4
    1090:	bf 2e       	mov	r11, r31
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <vfprintf+0x272>
    1094:	34 fe       	sbrs	r3, 4
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <vfprintf+0x278>
    1098:	29 2f       	mov	r18, r25
    109a:	26 60       	ori	r18, 0x06	; 6
    109c:	b2 2e       	mov	r11, r18
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0x278>
    10a0:	28 e0       	ldi	r18, 0x08	; 8
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <vfprintf+0x27c>
    10a6:	20 e1       	ldi	r18, 0x10	; 16
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <vfprintf+0x27c>
    10ac:	20 e1       	ldi	r18, 0x10	; 16
    10ae:	32 e0       	ldi	r19, 0x02	; 2
    10b0:	f8 01       	movw	r30, r16
    10b2:	b7 fe       	sbrs	r11, 7
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <vfprintf+0x290>
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	93 81       	ldd	r25, Z+3	; 0x03
    10be:	0c 5f       	subi	r16, 0xFC	; 252
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <vfprintf+0x29c>
    10c4:	60 81       	ld	r22, Z
    10c6:	71 81       	ldd	r23, Z+1	; 0x01
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 5f       	subi	r16, 0xFE	; 254
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	a3 01       	movw	r20, r6
    10d2:	0e 94 91 0a 	call	0x1522	; 0x1522 <__ultoa_invert>
    10d6:	88 2e       	mov	r8, r24
    10d8:	86 18       	sub	r8, r6
    10da:	fb 2d       	mov	r31, r11
    10dc:	ff 77       	andi	r31, 0x7F	; 127
    10de:	3f 2e       	mov	r3, r31
    10e0:	36 fe       	sbrs	r3, 6
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <vfprintf+0x2ca>
    10e4:	23 2d       	mov	r18, r3
    10e6:	2e 7f       	andi	r18, 0xFE	; 254
    10e8:	a2 2e       	mov	r10, r18
    10ea:	89 14       	cp	r8, r9
    10ec:	58 f4       	brcc	.+22     	; 0x1104 <vfprintf+0x2d0>
    10ee:	34 fe       	sbrs	r3, 4
    10f0:	0b c0       	rjmp	.+22     	; 0x1108 <vfprintf+0x2d4>
    10f2:	32 fc       	sbrc	r3, 2
    10f4:	09 c0       	rjmp	.+18     	; 0x1108 <vfprintf+0x2d4>
    10f6:	83 2d       	mov	r24, r3
    10f8:	8e 7e       	andi	r24, 0xEE	; 238
    10fa:	a8 2e       	mov	r10, r24
    10fc:	05 c0       	rjmp	.+10     	; 0x1108 <vfprintf+0x2d4>
    10fe:	b8 2c       	mov	r11, r8
    1100:	a3 2c       	mov	r10, r3
    1102:	03 c0       	rjmp	.+6      	; 0x110a <vfprintf+0x2d6>
    1104:	b8 2c       	mov	r11, r8
    1106:	01 c0       	rjmp	.+2      	; 0x110a <vfprintf+0x2d6>
    1108:	b9 2c       	mov	r11, r9
    110a:	a4 fe       	sbrs	r10, 4
    110c:	0f c0       	rjmp	.+30     	; 0x112c <vfprintf+0x2f8>
    110e:	fe 01       	movw	r30, r28
    1110:	e8 0d       	add	r30, r8
    1112:	f1 1d       	adc	r31, r1
    1114:	80 81       	ld	r24, Z
    1116:	80 33       	cpi	r24, 0x30	; 48
    1118:	21 f4       	brne	.+8      	; 0x1122 <vfprintf+0x2ee>
    111a:	9a 2d       	mov	r25, r10
    111c:	99 7e       	andi	r25, 0xE9	; 233
    111e:	a9 2e       	mov	r10, r25
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <vfprintf+0x300>
    1122:	a2 fe       	sbrs	r10, 2
    1124:	06 c0       	rjmp	.+12     	; 0x1132 <vfprintf+0x2fe>
    1126:	b3 94       	inc	r11
    1128:	b3 94       	inc	r11
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <vfprintf+0x300>
    112c:	8a 2d       	mov	r24, r10
    112e:	86 78       	andi	r24, 0x86	; 134
    1130:	09 f0       	breq	.+2      	; 0x1134 <vfprintf+0x300>
    1132:	b3 94       	inc	r11
    1134:	a3 fc       	sbrc	r10, 3
    1136:	11 c0       	rjmp	.+34     	; 0x115a <vfprintf+0x326>
    1138:	a0 fe       	sbrs	r10, 0
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <vfprintf+0x314>
    113c:	b2 14       	cp	r11, r2
    113e:	88 f4       	brcc	.+34     	; 0x1162 <vfprintf+0x32e>
    1140:	28 0c       	add	r2, r8
    1142:	92 2c       	mov	r9, r2
    1144:	9b 18       	sub	r9, r11
    1146:	0e c0       	rjmp	.+28     	; 0x1164 <vfprintf+0x330>
    1148:	b2 14       	cp	r11, r2
    114a:	60 f4       	brcc	.+24     	; 0x1164 <vfprintf+0x330>
    114c:	b6 01       	movw	r22, r12
    114e:	80 e2       	ldi	r24, 0x20	; 32
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    1156:	b3 94       	inc	r11
    1158:	f7 cf       	rjmp	.-18     	; 0x1148 <vfprintf+0x314>
    115a:	b2 14       	cp	r11, r2
    115c:	18 f4       	brcc	.+6      	; 0x1164 <vfprintf+0x330>
    115e:	2b 18       	sub	r2, r11
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <vfprintf+0x332>
    1162:	98 2c       	mov	r9, r8
    1164:	21 2c       	mov	r2, r1
    1166:	a4 fe       	sbrs	r10, 4
    1168:	10 c0       	rjmp	.+32     	; 0x118a <vfprintf+0x356>
    116a:	b6 01       	movw	r22, r12
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    1174:	a2 fe       	sbrs	r10, 2
    1176:	17 c0       	rjmp	.+46     	; 0x11a6 <vfprintf+0x372>
    1178:	a1 fc       	sbrc	r10, 1
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <vfprintf+0x34e>
    117c:	88 e7       	ldi	r24, 0x78	; 120
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <vfprintf+0x352>
    1182:	88 e5       	ldi	r24, 0x58	; 88
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	b6 01       	movw	r22, r12
    1188:	0c c0       	rjmp	.+24     	; 0x11a2 <vfprintf+0x36e>
    118a:	8a 2d       	mov	r24, r10
    118c:	86 78       	andi	r24, 0x86	; 134
    118e:	59 f0       	breq	.+22     	; 0x11a6 <vfprintf+0x372>
    1190:	a1 fe       	sbrs	r10, 1
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <vfprintf+0x364>
    1194:	8b e2       	ldi	r24, 0x2B	; 43
    1196:	01 c0       	rjmp	.+2      	; 0x119a <vfprintf+0x366>
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	a7 fc       	sbrc	r10, 7
    119c:	8d e2       	ldi	r24, 0x2D	; 45
    119e:	b6 01       	movw	r22, r12
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    11a6:	89 14       	cp	r8, r9
    11a8:	38 f4       	brcc	.+14     	; 0x11b8 <vfprintf+0x384>
    11aa:	b6 01       	movw	r22, r12
    11ac:	80 e3       	ldi	r24, 0x30	; 48
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    11b4:	9a 94       	dec	r9
    11b6:	f7 cf       	rjmp	.-18     	; 0x11a6 <vfprintf+0x372>
    11b8:	8a 94       	dec	r8
    11ba:	f3 01       	movw	r30, r6
    11bc:	e8 0d       	add	r30, r8
    11be:	f1 1d       	adc	r31, r1
    11c0:	80 81       	ld	r24, Z
    11c2:	b6 01       	movw	r22, r12
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    11ca:	81 10       	cpse	r8, r1
    11cc:	f5 cf       	rjmp	.-22     	; 0x11b8 <vfprintf+0x384>
    11ce:	22 20       	and	r2, r2
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <vfprintf+0x3a0>
    11d2:	42 ce       	rjmp	.-892    	; 0xe58 <vfprintf+0x24>
    11d4:	b6 01       	movw	r22, r12
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    11de:	2a 94       	dec	r2
    11e0:	f6 cf       	rjmp	.-20     	; 0x11ce <vfprintf+0x39a>
    11e2:	f6 01       	movw	r30, r12
    11e4:	86 81       	ldd	r24, Z+6	; 0x06
    11e6:	97 81       	ldd	r25, Z+7	; 0x07
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <vfprintf+0x3ba>
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	9f ef       	ldi	r25, 0xFF	; 255
    11ee:	2b 96       	adiw	r28, 0x0b	; 11
    11f0:	e2 e1       	ldi	r30, 0x12	; 18
    11f2:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__epilogue_restores__>

000011f6 <calloc>:
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	86 9f       	mul	r24, r22
    1200:	80 01       	movw	r16, r0
    1202:	87 9f       	mul	r24, r23
    1204:	10 0d       	add	r17, r0
    1206:	96 9f       	mul	r25, r22
    1208:	10 0d       	add	r17, r0
    120a:	11 24       	eor	r1, r1
    120c:	c8 01       	movw	r24, r16
    120e:	0e 94 17 09 	call	0x122e	; 0x122e <malloc>
    1212:	ec 01       	movw	r28, r24
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	29 f0       	breq	.+10     	; 0x1222 <calloc+0x2c>
    1218:	a8 01       	movw	r20, r16
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	0e 94 43 0a 	call	0x1486	; 0x1486 <memset>
    1222:	ce 01       	movw	r24, r28
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret

0000122e <malloc>:
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	91 05       	cpc	r25, r1
    123a:	10 f4       	brcc	.+4      	; 0x1240 <malloc+0x12>
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__flp>
    1244:	f0 91 d9 02 	lds	r31, 0x02D9	; 0x8002d9 <__flp+0x1>
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	a0 e0       	ldi	r26, 0x00	; 0
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	30 97       	sbiw	r30, 0x00	; 0
    1252:	19 f1       	breq	.+70     	; 0x129a <malloc+0x6c>
    1254:	40 81       	ld	r20, Z
    1256:	51 81       	ldd	r21, Z+1	; 0x01
    1258:	02 81       	ldd	r16, Z+2	; 0x02
    125a:	13 81       	ldd	r17, Z+3	; 0x03
    125c:	48 17       	cp	r20, r24
    125e:	59 07       	cpc	r21, r25
    1260:	c8 f0       	brcs	.+50     	; 0x1294 <malloc+0x66>
    1262:	84 17       	cp	r24, r20
    1264:	95 07       	cpc	r25, r21
    1266:	69 f4       	brne	.+26     	; 0x1282 <malloc+0x54>
    1268:	10 97       	sbiw	r26, 0x00	; 0
    126a:	31 f0       	breq	.+12     	; 0x1278 <malloc+0x4a>
    126c:	12 96       	adiw	r26, 0x02	; 2
    126e:	0c 93       	st	X, r16
    1270:	12 97       	sbiw	r26, 0x02	; 2
    1272:	13 96       	adiw	r26, 0x03	; 3
    1274:	1c 93       	st	X, r17
    1276:	27 c0       	rjmp	.+78     	; 0x12c6 <malloc+0x98>
    1278:	00 93 d8 02 	sts	0x02D8, r16	; 0x8002d8 <__flp>
    127c:	10 93 d9 02 	sts	0x02D9, r17	; 0x8002d9 <__flp+0x1>
    1280:	22 c0       	rjmp	.+68     	; 0x12c6 <malloc+0x98>
    1282:	21 15       	cp	r18, r1
    1284:	31 05       	cpc	r19, r1
    1286:	19 f0       	breq	.+6      	; 0x128e <malloc+0x60>
    1288:	42 17       	cp	r20, r18
    128a:	53 07       	cpc	r21, r19
    128c:	18 f4       	brcc	.+6      	; 0x1294 <malloc+0x66>
    128e:	9a 01       	movw	r18, r20
    1290:	bd 01       	movw	r22, r26
    1292:	ef 01       	movw	r28, r30
    1294:	df 01       	movw	r26, r30
    1296:	f8 01       	movw	r30, r16
    1298:	db cf       	rjmp	.-74     	; 0x1250 <malloc+0x22>
    129a:	21 15       	cp	r18, r1
    129c:	31 05       	cpc	r19, r1
    129e:	f9 f0       	breq	.+62     	; 0x12de <malloc+0xb0>
    12a0:	28 1b       	sub	r18, r24
    12a2:	39 0b       	sbc	r19, r25
    12a4:	24 30       	cpi	r18, 0x04	; 4
    12a6:	31 05       	cpc	r19, r1
    12a8:	80 f4       	brcc	.+32     	; 0x12ca <malloc+0x9c>
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	9b 81       	ldd	r25, Y+3	; 0x03
    12ae:	61 15       	cp	r22, r1
    12b0:	71 05       	cpc	r23, r1
    12b2:	21 f0       	breq	.+8      	; 0x12bc <malloc+0x8e>
    12b4:	fb 01       	movw	r30, r22
    12b6:	93 83       	std	Z+3, r25	; 0x03
    12b8:	82 83       	std	Z+2, r24	; 0x02
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <malloc+0x96>
    12bc:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <__flp+0x1>
    12c0:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__flp>
    12c4:	fe 01       	movw	r30, r28
    12c6:	32 96       	adiw	r30, 0x02	; 2
    12c8:	44 c0       	rjmp	.+136    	; 0x1352 <malloc+0x124>
    12ca:	fe 01       	movw	r30, r28
    12cc:	e2 0f       	add	r30, r18
    12ce:	f3 1f       	adc	r31, r19
    12d0:	81 93       	st	Z+, r24
    12d2:	91 93       	st	Z+, r25
    12d4:	22 50       	subi	r18, 0x02	; 2
    12d6:	31 09       	sbc	r19, r1
    12d8:	39 83       	std	Y+1, r19	; 0x01
    12da:	28 83       	st	Y, r18
    12dc:	3a c0       	rjmp	.+116    	; 0x1352 <malloc+0x124>
    12de:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
    12e2:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
    12e6:	23 2b       	or	r18, r19
    12e8:	41 f4       	brne	.+16     	; 0x12fa <malloc+0xcc>
    12ea:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    12ee:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    12f2:	30 93 d7 02 	sts	0x02D7, r19	; 0x8002d7 <__brkval+0x1>
    12f6:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <__brkval>
    12fa:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    12fe:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    1302:	21 15       	cp	r18, r1
    1304:	31 05       	cpc	r19, r1
    1306:	41 f4       	brne	.+16     	; 0x1318 <malloc+0xea>
    1308:	2d b7       	in	r18, 0x3d	; 61
    130a:	3e b7       	in	r19, 0x3e	; 62
    130c:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    1310:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    1314:	24 1b       	sub	r18, r20
    1316:	35 0b       	sbc	r19, r21
    1318:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <__brkval>
    131c:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <__brkval+0x1>
    1320:	e2 17       	cp	r30, r18
    1322:	f3 07       	cpc	r31, r19
    1324:	a0 f4       	brcc	.+40     	; 0x134e <malloc+0x120>
    1326:	2e 1b       	sub	r18, r30
    1328:	3f 0b       	sbc	r19, r31
    132a:	28 17       	cp	r18, r24
    132c:	39 07       	cpc	r19, r25
    132e:	78 f0       	brcs	.+30     	; 0x134e <malloc+0x120>
    1330:	ac 01       	movw	r20, r24
    1332:	4e 5f       	subi	r20, 0xFE	; 254
    1334:	5f 4f       	sbci	r21, 0xFF	; 255
    1336:	24 17       	cp	r18, r20
    1338:	35 07       	cpc	r19, r21
    133a:	48 f0       	brcs	.+18     	; 0x134e <malloc+0x120>
    133c:	4e 0f       	add	r20, r30
    133e:	5f 1f       	adc	r21, r31
    1340:	50 93 d7 02 	sts	0x02D7, r21	; 0x8002d7 <__brkval+0x1>
    1344:	40 93 d6 02 	sts	0x02D6, r20	; 0x8002d6 <__brkval>
    1348:	81 93       	st	Z+, r24
    134a:	91 93       	st	Z+, r25
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <malloc+0x124>
    134e:	e0 e0       	ldi	r30, 0x00	; 0
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	cf 01       	movw	r24, r30
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <free>:
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	09 f4       	brne	.+2      	; 0x1368 <free+0xa>
    1366:	81 c0       	rjmp	.+258    	; 0x146a <free+0x10c>
    1368:	fc 01       	movw	r30, r24
    136a:	32 97       	sbiw	r30, 0x02	; 2
    136c:	13 82       	std	Z+3, r1	; 0x03
    136e:	12 82       	std	Z+2, r1	; 0x02
    1370:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <__flp>
    1374:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <__flp+0x1>
    1378:	10 97       	sbiw	r26, 0x00	; 0
    137a:	81 f4       	brne	.+32     	; 0x139c <free+0x3e>
    137c:	20 81       	ld	r18, Z
    137e:	31 81       	ldd	r19, Z+1	; 0x01
    1380:	82 0f       	add	r24, r18
    1382:	93 1f       	adc	r25, r19
    1384:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
    1388:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	51 f5       	brne	.+84     	; 0x13e6 <free+0x88>
    1392:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__brkval+0x1>
    1396:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__brkval>
    139a:	67 c0       	rjmp	.+206    	; 0x146a <free+0x10c>
    139c:	ed 01       	movw	r28, r26
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	ce 17       	cp	r28, r30
    13a4:	df 07       	cpc	r29, r31
    13a6:	40 f4       	brcc	.+16     	; 0x13b8 <free+0x5a>
    13a8:	4a 81       	ldd	r20, Y+2	; 0x02
    13aa:	5b 81       	ldd	r21, Y+3	; 0x03
    13ac:	9e 01       	movw	r18, r28
    13ae:	41 15       	cp	r20, r1
    13b0:	51 05       	cpc	r21, r1
    13b2:	f1 f0       	breq	.+60     	; 0x13f0 <free+0x92>
    13b4:	ea 01       	movw	r28, r20
    13b6:	f5 cf       	rjmp	.-22     	; 0x13a2 <free+0x44>
    13b8:	d3 83       	std	Z+3, r29	; 0x03
    13ba:	c2 83       	std	Z+2, r28	; 0x02
    13bc:	40 81       	ld	r20, Z
    13be:	51 81       	ldd	r21, Z+1	; 0x01
    13c0:	84 0f       	add	r24, r20
    13c2:	95 1f       	adc	r25, r21
    13c4:	c8 17       	cp	r28, r24
    13c6:	d9 07       	cpc	r29, r25
    13c8:	59 f4       	brne	.+22     	; 0x13e0 <free+0x82>
    13ca:	88 81       	ld	r24, Y
    13cc:	99 81       	ldd	r25, Y+1	; 0x01
    13ce:	84 0f       	add	r24, r20
    13d0:	95 1f       	adc	r25, r21
    13d2:	02 96       	adiw	r24, 0x02	; 2
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	80 83       	st	Z, r24
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	9b 81       	ldd	r25, Y+3	; 0x03
    13dc:	93 83       	std	Z+3, r25	; 0x03
    13de:	82 83       	std	Z+2, r24	; 0x02
    13e0:	21 15       	cp	r18, r1
    13e2:	31 05       	cpc	r19, r1
    13e4:	29 f4       	brne	.+10     	; 0x13f0 <free+0x92>
    13e6:	f0 93 d9 02 	sts	0x02D9, r31	; 0x8002d9 <__flp+0x1>
    13ea:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <__flp>
    13ee:	3d c0       	rjmp	.+122    	; 0x146a <free+0x10c>
    13f0:	e9 01       	movw	r28, r18
    13f2:	fb 83       	std	Y+3, r31	; 0x03
    13f4:	ea 83       	std	Y+2, r30	; 0x02
    13f6:	49 91       	ld	r20, Y+
    13f8:	59 91       	ld	r21, Y+
    13fa:	c4 0f       	add	r28, r20
    13fc:	d5 1f       	adc	r29, r21
    13fe:	ec 17       	cp	r30, r28
    1400:	fd 07       	cpc	r31, r29
    1402:	61 f4       	brne	.+24     	; 0x141c <free+0xbe>
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	84 0f       	add	r24, r20
    140a:	95 1f       	adc	r25, r21
    140c:	02 96       	adiw	r24, 0x02	; 2
    140e:	e9 01       	movw	r28, r18
    1410:	99 83       	std	Y+1, r25	; 0x01
    1412:	88 83       	st	Y, r24
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	9b 83       	std	Y+3, r25	; 0x03
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	e0 e0       	ldi	r30, 0x00	; 0
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	12 96       	adiw	r26, 0x02	; 2
    1422:	8d 91       	ld	r24, X+
    1424:	9c 91       	ld	r25, X
    1426:	13 97       	sbiw	r26, 0x03	; 3
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	19 f0       	breq	.+6      	; 0x1432 <free+0xd4>
    142c:	fd 01       	movw	r30, r26
    142e:	dc 01       	movw	r26, r24
    1430:	f7 cf       	rjmp	.-18     	; 0x1420 <free+0xc2>
    1432:	8d 91       	ld	r24, X+
    1434:	9c 91       	ld	r25, X
    1436:	11 97       	sbiw	r26, 0x01	; 1
    1438:	9d 01       	movw	r18, r26
    143a:	2e 5f       	subi	r18, 0xFE	; 254
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	82 0f       	add	r24, r18
    1440:	93 1f       	adc	r25, r19
    1442:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
    1446:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
    144a:	28 17       	cp	r18, r24
    144c:	39 07       	cpc	r19, r25
    144e:	69 f4       	brne	.+26     	; 0x146a <free+0x10c>
    1450:	30 97       	sbiw	r30, 0x00	; 0
    1452:	29 f4       	brne	.+10     	; 0x145e <free+0x100>
    1454:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <__flp+0x1>
    1458:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__flp>
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <free+0x104>
    145e:	13 82       	std	Z+3, r1	; 0x03
    1460:	12 82       	std	Z+2, r1	; 0x02
    1462:	b0 93 d7 02 	sts	0x02D7, r27	; 0x8002d7 <__brkval+0x1>
    1466:	a0 93 d6 02 	sts	0x02D6, r26	; 0x8002d6 <__brkval>
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <strnlen_P>:
    1470:	fc 01       	movw	r30, r24
    1472:	05 90       	lpm	r0, Z+
    1474:	61 50       	subi	r22, 0x01	; 1
    1476:	70 40       	sbci	r23, 0x00	; 0
    1478:	01 10       	cpse	r0, r1
    147a:	d8 f7       	brcc	.-10     	; 0x1472 <strnlen_P+0x2>
    147c:	80 95       	com	r24
    147e:	90 95       	com	r25
    1480:	8e 0f       	add	r24, r30
    1482:	9f 1f       	adc	r25, r31
    1484:	08 95       	ret

00001486 <memset>:
    1486:	dc 01       	movw	r26, r24
    1488:	01 c0       	rjmp	.+2      	; 0x148c <memset+0x6>
    148a:	6d 93       	st	X+, r22
    148c:	41 50       	subi	r20, 0x01	; 1
    148e:	50 40       	sbci	r21, 0x00	; 0
    1490:	e0 f7       	brcc	.-8      	; 0x148a <memset+0x4>
    1492:	08 95       	ret

00001494 <strnlen>:
    1494:	fc 01       	movw	r30, r24
    1496:	61 50       	subi	r22, 0x01	; 1
    1498:	70 40       	sbci	r23, 0x00	; 0
    149a:	01 90       	ld	r0, Z+
    149c:	01 10       	cpse	r0, r1
    149e:	d8 f7       	brcc	.-10     	; 0x1496 <strnlen+0x2>
    14a0:	80 95       	com	r24
    14a2:	90 95       	com	r25
    14a4:	8e 0f       	add	r24, r30
    14a6:	9f 1f       	adc	r25, r31
    14a8:	08 95       	ret

000014aa <fputc>:
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	fb 01       	movw	r30, r22
    14b4:	23 81       	ldd	r18, Z+3	; 0x03
    14b6:	21 fd       	sbrc	r18, 1
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <fputc+0x16>
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	9f ef       	ldi	r25, 0xFF	; 255
    14be:	2c c0       	rjmp	.+88     	; 0x1518 <fputc+0x6e>
    14c0:	22 ff       	sbrs	r18, 2
    14c2:	16 c0       	rjmp	.+44     	; 0x14f0 <fputc+0x46>
    14c4:	46 81       	ldd	r20, Z+6	; 0x06
    14c6:	57 81       	ldd	r21, Z+7	; 0x07
    14c8:	24 81       	ldd	r18, Z+4	; 0x04
    14ca:	35 81       	ldd	r19, Z+5	; 0x05
    14cc:	42 17       	cp	r20, r18
    14ce:	53 07       	cpc	r21, r19
    14d0:	44 f4       	brge	.+16     	; 0x14e2 <fputc+0x38>
    14d2:	a0 81       	ld	r26, Z
    14d4:	b1 81       	ldd	r27, Z+1	; 0x01
    14d6:	9d 01       	movw	r18, r26
    14d8:	2f 5f       	subi	r18, 0xFF	; 255
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	31 83       	std	Z+1, r19	; 0x01
    14de:	20 83       	st	Z, r18
    14e0:	8c 93       	st	X, r24
    14e2:	26 81       	ldd	r18, Z+6	; 0x06
    14e4:	37 81       	ldd	r19, Z+7	; 0x07
    14e6:	2f 5f       	subi	r18, 0xFF	; 255
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	37 83       	std	Z+7, r19	; 0x07
    14ec:	26 83       	std	Z+6, r18	; 0x06
    14ee:	14 c0       	rjmp	.+40     	; 0x1518 <fputc+0x6e>
    14f0:	8b 01       	movw	r16, r22
    14f2:	ec 01       	movw	r28, r24
    14f4:	fb 01       	movw	r30, r22
    14f6:	00 84       	ldd	r0, Z+8	; 0x08
    14f8:	f1 85       	ldd	r31, Z+9	; 0x09
    14fa:	e0 2d       	mov	r30, r0
    14fc:	09 95       	icall
    14fe:	89 2b       	or	r24, r25
    1500:	e1 f6       	brne	.-72     	; 0x14ba <fputc+0x10>
    1502:	d8 01       	movw	r26, r16
    1504:	16 96       	adiw	r26, 0x06	; 6
    1506:	8d 91       	ld	r24, X+
    1508:	9c 91       	ld	r25, X
    150a:	17 97       	sbiw	r26, 0x07	; 7
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	17 96       	adiw	r26, 0x07	; 7
    1510:	9c 93       	st	X, r25
    1512:	8e 93       	st	-X, r24
    1514:	16 97       	sbiw	r26, 0x06	; 6
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <__ultoa_invert>:
    1522:	fa 01       	movw	r30, r20
    1524:	aa 27       	eor	r26, r26
    1526:	28 30       	cpi	r18, 0x08	; 8
    1528:	51 f1       	breq	.+84     	; 0x157e <__ultoa_invert+0x5c>
    152a:	20 31       	cpi	r18, 0x10	; 16
    152c:	81 f1       	breq	.+96     	; 0x158e <__ultoa_invert+0x6c>
    152e:	e8 94       	clt
    1530:	6f 93       	push	r22
    1532:	6e 7f       	andi	r22, 0xFE	; 254
    1534:	6e 5f       	subi	r22, 0xFE	; 254
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	8f 4f       	sbci	r24, 0xFF	; 255
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	af 4f       	sbci	r26, 0xFF	; 255
    153e:	b1 e0       	ldi	r27, 0x01	; 1
    1540:	3e d0       	rcall	.+124    	; 0x15be <__ultoa_invert+0x9c>
    1542:	b4 e0       	ldi	r27, 0x04	; 4
    1544:	3c d0       	rcall	.+120    	; 0x15be <__ultoa_invert+0x9c>
    1546:	67 0f       	add	r22, r23
    1548:	78 1f       	adc	r23, r24
    154a:	89 1f       	adc	r24, r25
    154c:	9a 1f       	adc	r25, r26
    154e:	a1 1d       	adc	r26, r1
    1550:	68 0f       	add	r22, r24
    1552:	79 1f       	adc	r23, r25
    1554:	8a 1f       	adc	r24, r26
    1556:	91 1d       	adc	r25, r1
    1558:	a1 1d       	adc	r26, r1
    155a:	6a 0f       	add	r22, r26
    155c:	71 1d       	adc	r23, r1
    155e:	81 1d       	adc	r24, r1
    1560:	91 1d       	adc	r25, r1
    1562:	a1 1d       	adc	r26, r1
    1564:	20 d0       	rcall	.+64     	; 0x15a6 <__ultoa_invert+0x84>
    1566:	09 f4       	brne	.+2      	; 0x156a <__ultoa_invert+0x48>
    1568:	68 94       	set
    156a:	3f 91       	pop	r19
    156c:	2a e0       	ldi	r18, 0x0A	; 10
    156e:	26 9f       	mul	r18, r22
    1570:	11 24       	eor	r1, r1
    1572:	30 19       	sub	r19, r0
    1574:	30 5d       	subi	r19, 0xD0	; 208
    1576:	31 93       	st	Z+, r19
    1578:	de f6       	brtc	.-74     	; 0x1530 <__ultoa_invert+0xe>
    157a:	cf 01       	movw	r24, r30
    157c:	08 95       	ret
    157e:	46 2f       	mov	r20, r22
    1580:	47 70       	andi	r20, 0x07	; 7
    1582:	40 5d       	subi	r20, 0xD0	; 208
    1584:	41 93       	st	Z+, r20
    1586:	b3 e0       	ldi	r27, 0x03	; 3
    1588:	0f d0       	rcall	.+30     	; 0x15a8 <__ultoa_invert+0x86>
    158a:	c9 f7       	brne	.-14     	; 0x157e <__ultoa_invert+0x5c>
    158c:	f6 cf       	rjmp	.-20     	; 0x157a <__ultoa_invert+0x58>
    158e:	46 2f       	mov	r20, r22
    1590:	4f 70       	andi	r20, 0x0F	; 15
    1592:	40 5d       	subi	r20, 0xD0	; 208
    1594:	4a 33       	cpi	r20, 0x3A	; 58
    1596:	18 f0       	brcs	.+6      	; 0x159e <__ultoa_invert+0x7c>
    1598:	49 5d       	subi	r20, 0xD9	; 217
    159a:	31 fd       	sbrc	r19, 1
    159c:	40 52       	subi	r20, 0x20	; 32
    159e:	41 93       	st	Z+, r20
    15a0:	02 d0       	rcall	.+4      	; 0x15a6 <__ultoa_invert+0x84>
    15a2:	a9 f7       	brne	.-22     	; 0x158e <__ultoa_invert+0x6c>
    15a4:	ea cf       	rjmp	.-44     	; 0x157a <__ultoa_invert+0x58>
    15a6:	b4 e0       	ldi	r27, 0x04	; 4
    15a8:	a6 95       	lsr	r26
    15aa:	97 95       	ror	r25
    15ac:	87 95       	ror	r24
    15ae:	77 95       	ror	r23
    15b0:	67 95       	ror	r22
    15b2:	ba 95       	dec	r27
    15b4:	c9 f7       	brne	.-14     	; 0x15a8 <__ultoa_invert+0x86>
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	61 05       	cpc	r22, r1
    15ba:	71 05       	cpc	r23, r1
    15bc:	08 95       	ret
    15be:	9b 01       	movw	r18, r22
    15c0:	ac 01       	movw	r20, r24
    15c2:	0a 2e       	mov	r0, r26
    15c4:	06 94       	lsr	r0
    15c6:	57 95       	ror	r21
    15c8:	47 95       	ror	r20
    15ca:	37 95       	ror	r19
    15cc:	27 95       	ror	r18
    15ce:	ba 95       	dec	r27
    15d0:	c9 f7       	brne	.-14     	; 0x15c4 <__ultoa_invert+0xa2>
    15d2:	62 0f       	add	r22, r18
    15d4:	73 1f       	adc	r23, r19
    15d6:	84 1f       	adc	r24, r20
    15d8:	95 1f       	adc	r25, r21
    15da:	a0 1d       	adc	r26, r0
    15dc:	08 95       	ret

000015de <__divmodsi4>:
    15de:	05 2e       	mov	r0, r21
    15e0:	97 fb       	bst	r25, 7
    15e2:	1e f4       	brtc	.+6      	; 0x15ea <__divmodsi4+0xc>
    15e4:	00 94       	com	r0
    15e6:	0e 94 06 0b 	call	0x160c	; 0x160c <__negsi2>
    15ea:	57 fd       	sbrc	r21, 7
    15ec:	07 d0       	rcall	.+14     	; 0x15fc <__divmodsi4_neg2>
    15ee:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__udivmodsi4>
    15f2:	07 fc       	sbrc	r0, 7
    15f4:	03 d0       	rcall	.+6      	; 0x15fc <__divmodsi4_neg2>
    15f6:	4e f4       	brtc	.+18     	; 0x160a <__divmodsi4_exit>
    15f8:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__negsi2>

000015fc <__divmodsi4_neg2>:
    15fc:	50 95       	com	r21
    15fe:	40 95       	com	r20
    1600:	30 95       	com	r19
    1602:	21 95       	neg	r18
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	4f 4f       	sbci	r20, 0xFF	; 255
    1608:	5f 4f       	sbci	r21, 0xFF	; 255

0000160a <__divmodsi4_exit>:
    160a:	08 95       	ret

0000160c <__negsi2>:
    160c:	90 95       	com	r25
    160e:	80 95       	com	r24
    1610:	70 95       	com	r23
    1612:	61 95       	neg	r22
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	8f 4f       	sbci	r24, 0xFF	; 255
    1618:	9f 4f       	sbci	r25, 0xFF	; 255
    161a:	08 95       	ret

0000161c <__muluhisi3>:
    161c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__umulhisi3>
    1620:	a5 9f       	mul	r26, r21
    1622:	90 0d       	add	r25, r0
    1624:	b4 9f       	mul	r27, r20
    1626:	90 0d       	add	r25, r0
    1628:	a4 9f       	mul	r26, r20
    162a:	80 0d       	add	r24, r0
    162c:	91 1d       	adc	r25, r1
    162e:	11 24       	eor	r1, r1
    1630:	08 95       	ret

00001632 <__mulshisi3>:
    1632:	b7 ff       	sbrs	r27, 7
    1634:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__muluhisi3>

00001638 <__mulohisi3>:
    1638:	0e 94 0e 0b 	call	0x161c	; 0x161c <__muluhisi3>
    163c:	82 1b       	sub	r24, r18
    163e:	93 0b       	sbc	r25, r19
    1640:	08 95       	ret

00001642 <__prologue_saves__>:
    1642:	2f 92       	push	r2
    1644:	3f 92       	push	r3
    1646:	4f 92       	push	r4
    1648:	5f 92       	push	r5
    164a:	6f 92       	push	r6
    164c:	7f 92       	push	r7
    164e:	8f 92       	push	r8
    1650:	9f 92       	push	r9
    1652:	af 92       	push	r10
    1654:	bf 92       	push	r11
    1656:	cf 92       	push	r12
    1658:	df 92       	push	r13
    165a:	ef 92       	push	r14
    165c:	ff 92       	push	r15
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	ca 1b       	sub	r28, r26
    166c:	db 0b       	sbc	r29, r27
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	09 94       	ijmp

0000167a <__epilogue_restores__>:
    167a:	2a 88       	ldd	r2, Y+18	; 0x12
    167c:	39 88       	ldd	r3, Y+17	; 0x11
    167e:	48 88       	ldd	r4, Y+16	; 0x10
    1680:	5f 84       	ldd	r5, Y+15	; 0x0f
    1682:	6e 84       	ldd	r6, Y+14	; 0x0e
    1684:	7d 84       	ldd	r7, Y+13	; 0x0d
    1686:	8c 84       	ldd	r8, Y+12	; 0x0c
    1688:	9b 84       	ldd	r9, Y+11	; 0x0b
    168a:	aa 84       	ldd	r10, Y+10	; 0x0a
    168c:	b9 84       	ldd	r11, Y+9	; 0x09
    168e:	c8 84       	ldd	r12, Y+8	; 0x08
    1690:	df 80       	ldd	r13, Y+7	; 0x07
    1692:	ee 80       	ldd	r14, Y+6	; 0x06
    1694:	fd 80       	ldd	r15, Y+5	; 0x05
    1696:	0c 81       	ldd	r16, Y+4	; 0x04
    1698:	1b 81       	ldd	r17, Y+3	; 0x03
    169a:	aa 81       	ldd	r26, Y+2	; 0x02
    169c:	b9 81       	ldd	r27, Y+1	; 0x01
    169e:	ce 0f       	add	r28, r30
    16a0:	d1 1d       	adc	r29, r1
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	ed 01       	movw	r28, r26
    16ae:	08 95       	ret

000016b0 <__udivmodsi4>:
    16b0:	a1 e2       	ldi	r26, 0x21	; 33
    16b2:	1a 2e       	mov	r1, r26
    16b4:	aa 1b       	sub	r26, r26
    16b6:	bb 1b       	sub	r27, r27
    16b8:	fd 01       	movw	r30, r26
    16ba:	0d c0       	rjmp	.+26     	; 0x16d6 <__udivmodsi4_ep>

000016bc <__udivmodsi4_loop>:
    16bc:	aa 1f       	adc	r26, r26
    16be:	bb 1f       	adc	r27, r27
    16c0:	ee 1f       	adc	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	a2 17       	cp	r26, r18
    16c6:	b3 07       	cpc	r27, r19
    16c8:	e4 07       	cpc	r30, r20
    16ca:	f5 07       	cpc	r31, r21
    16cc:	20 f0       	brcs	.+8      	; 0x16d6 <__udivmodsi4_ep>
    16ce:	a2 1b       	sub	r26, r18
    16d0:	b3 0b       	sbc	r27, r19
    16d2:	e4 0b       	sbc	r30, r20
    16d4:	f5 0b       	sbc	r31, r21

000016d6 <__udivmodsi4_ep>:
    16d6:	66 1f       	adc	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	1a 94       	dec	r1
    16e0:	69 f7       	brne	.-38     	; 0x16bc <__udivmodsi4_loop>
    16e2:	60 95       	com	r22
    16e4:	70 95       	com	r23
    16e6:	80 95       	com	r24
    16e8:	90 95       	com	r25
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	bd 01       	movw	r22, r26
    16f0:	cf 01       	movw	r24, r30
    16f2:	08 95       	ret

000016f4 <__umulhisi3>:
    16f4:	a2 9f       	mul	r26, r18
    16f6:	b0 01       	movw	r22, r0
    16f8:	b3 9f       	mul	r27, r19
    16fa:	c0 01       	movw	r24, r0
    16fc:	a3 9f       	mul	r26, r19
    16fe:	70 0d       	add	r23, r0
    1700:	81 1d       	adc	r24, r1
    1702:	11 24       	eor	r1, r1
    1704:	91 1d       	adc	r25, r1
    1706:	b2 9f       	mul	r27, r18
    1708:	70 0d       	add	r23, r0
    170a:	81 1d       	adc	r24, r1
    170c:	11 24       	eor	r1, r1
    170e:	91 1d       	adc	r25, r1
    1710:	08 95       	ret

00001712 <_exit>:
    1712:	f8 94       	cli

00001714 <__stop_program>:
    1714:	ff cf       	rjmp	.-2      	; 0x1714 <__stop_program>
