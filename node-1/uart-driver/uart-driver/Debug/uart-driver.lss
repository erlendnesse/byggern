
uart-driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  00001442  000014d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080028c  0080028c  00001662  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001935  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eaa  00000000  00000000  000031c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d6c  00000000  00000000  0000406b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00004dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064c  00000000  00000000  00005130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000839  00000000  00000000  0000577c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005fb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <puts+0x42>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e4       	ldi	r30, 0x42	; 66
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 38       	cpi	r26, 0x8C	; 140
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	ac e8       	ldi	r26, 0x8C	; 140
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 39       	cpi	r26, 0x96	; 150
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 09 03 	call	0x612	; 0x612 <main>
     39e:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
	//TCCR3A |= (1 << WGM31);
	//TCCR3A |= (1 << WGM30);

void adc_init() {
	//All code in function inits pwm
	OCR3A = 0x02;
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     3ae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
	DDRD |= (1 << PD4);
     3b2:	81 b3       	in	r24, 0x11	; 17
     3b4:	80 61       	ori	r24, 0x10	; 16
     3b6:	81 bb       	out	0x11, r24	; 17
	//TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
	TCCR3B |= (1 << WGM32); //Setting CTC
     3b8:	ea e8       	ldi	r30, 0x8A	; 138
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	88 60       	ori	r24, 0x08	; 8
     3c0:	80 83       	st	Z, r24
	TCCR3A |= (1 << COM3A0); //Clear OC3A on Compare Match, set OC3A at TOP. or toggle or smth.
     3c2:	ab e8       	ldi	r26, 0x8B	; 139
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	8c 91       	ld	r24, X
     3c8:	80 64       	ori	r24, 0x40	; 64
     3ca:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS30);
     3cc:	80 81       	ld	r24, Z
     3ce:	81 60       	ori	r24, 0x01	; 1
     3d0:	80 83       	st	Z, r24
	printf("-PWM init-\n");
     3d2:	8a e0       	ldi	r24, 0x0A	; 10
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
     3da:	08 95       	ret

000003dc <adc_read>:
}

uint8_t adc_read(uint8_t channel) {
	volatile uint8_t *ADC = (uint8_t*)0x1401;
	*ADC = 1;
     3dc:	e1 e0       	ldi	r30, 0x01	; 1
     3de:	f4 e1       	ldi	r31, 0x14	; 20
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	90 83       	st	Z, r25
	
	int ch0 = *ADC;
     3e4:	20 81       	ld	r18, Z
	int ch1 = *ADC;
     3e6:	90 81       	ld	r25, Z
	int ch2 = *ADC;
     3e8:	40 81       	ld	r20, Z
	int ch3 = *ADC;
     3ea:	30 81       	ld	r19, Z
	
	switch(channel) {
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	c1 f0       	breq	.+48     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
     3f0:	b0 f0       	brcs	.+44     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
     3f2:	82 30       	cpi	r24, 0x02	; 2
     3f4:	19 f0       	breq	.+6      	; 0x3fc <adc_read+0x20>
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	19 f0       	breq	.+6      	; 0x400 <__DATA_REGION_LENGTH__>
     3fa:	04 c0       	rjmp	.+8      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
		case 0:
			return ch0;
		case 1:
			return ch1;
		case 2:
			return ch2;
     3fc:	94 2f       	mov	r25, r20
     3fe:	10 c0       	rjmp	.+32     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
		case 3:
			return ch3;
     400:	93 2f       	mov	r25, r19
     402:	0e c0       	rjmp	.+28     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
		default:
			printf("Channel not found, arg given: %d", channel);
     404:	1f 92       	push	r1
     406:	8f 93       	push	r24
     408:	85 e1       	ldi	r24, 0x15	; 21
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	0e 94 6a 05 	call	0xad4	; 0xad4 <printf>
			break;

	}
}
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	08 95       	ret
	int ch2 = *ADC;
	int ch3 = *ADC;
	
	switch(channel) {
		case 0:
			return ch0;
     41e:	92 2f       	mov	r25, r18
     420:	89 2f       	mov	r24, r25
		default:
			printf("Channel not found, arg given: %d", channel);
			break;

	}
}
     422:	08 95       	ret

00000424 <game_fsm>:

void set_menu(){
	
}

void game_fsm() {
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	00 d0       	rcall	.+0      	; 0x42a <game_fsm+0x6>
     42a:	00 d0       	rcall	.+0      	; 0x42c <game_fsm+0x8>
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
	volatile int menu_index = 1;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	9a 83       	std	Y+2, r25	; 0x02
     436:	89 83       	std	Y+1, r24	; 0x01
	oled_set_home();
     438:	0e 94 05 04 	call	0x80a	; 0x80a <oled_set_home>
	oled_set_position(menu_index, 100);
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	64 e6       	ldi	r22, 0x64	; 100
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	0e 94 56 03 	call	0x6ac	; 0x6ac <oled_set_position>
	oled_print_string("<-");
     448:	86 e3       	ldi	r24, 0x36	; 54
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 ef 03 	call	0x7de	; 0x7de <oled_print_string>
	volatile int direction = dir();
     450:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <dir>
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	9c 83       	std	Y+4, r25	; 0x04
     458:	8b 83       	std	Y+3, r24	; 0x03
     45a:	0e c0       	rjmp	.+28     	; 0x478 <game_fsm+0x54>
	while(1) {
		while(direction == NEUTRAL) {
			direction = dir();
     45c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <dir>
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	9c 83       	std	Y+4, r25	; 0x04
     464:	8b 83       	std	Y+3, r24	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     466:	2f ee       	ldi	r18, 0xEF	; 239
     468:	89 e4       	ldi	r24, 0x49	; 73
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	21 50       	subi	r18, 0x01	; 1
     46e:	80 40       	sbci	r24, 0x00	; 0
     470:	90 40       	sbci	r25, 0x00	; 0
     472:	e1 f7       	brne	.-8      	; 0x46c <game_fsm+0x48>
     474:	00 c0       	rjmp	.+0      	; 0x476 <game_fsm+0x52>
     476:	00 00       	nop
	oled_set_home();
	oled_set_position(menu_index, 100);
	oled_print_string("<-");
	volatile int direction = dir();
	while(1) {
		while(direction == NEUTRAL) {
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	89 2b       	or	r24, r25
     47e:	71 f3       	breq	.-36     	; 0x45c <game_fsm+0x38>
			direction = dir();
			_delay_ms(750);
			//printf("Direction : %d\r\n", direction);
		}
		if (direction == UP && menu_index > 1) {
     480:	8b 81       	ldd	r24, Y+3	; 0x03
     482:	9c 81       	ldd	r25, Y+4	; 0x04
     484:	03 97       	sbiw	r24, 0x03	; 3
     486:	11 f5       	brne	.+68     	; 0x4cc <game_fsm+0xa8>
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	02 97       	sbiw	r24, 0x02	; 2
     48e:	f4 f0       	brlt	.+60     	; 0x4cc <game_fsm+0xa8>
			printf("UP\r\n");
     490:	89 e3       	ldi	r24, 0x39	; 57
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
			oled_set_position(menu_index, 100);
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	9a 81       	ldd	r25, Y+2	; 0x02
     49c:	64 e6       	ldi	r22, 0x64	; 100
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	0e 94 56 03 	call	0x6ac	; 0x6ac <oled_set_position>
			oled_print_string("  ");
     4a4:	8d e3       	ldi	r24, 0x3D	; 61
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	0e 94 ef 03 	call	0x7de	; 0x7de <oled_print_string>
			menu_index--;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	9a 83       	std	Y+2, r25	; 0x02
     4b4:	89 83       	std	Y+1, r24	; 0x01
			oled_set_position(menu_index, 100);
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	64 e6       	ldi	r22, 0x64	; 100
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	0e 94 56 03 	call	0x6ac	; 0x6ac <oled_set_position>
			oled_print_string("<-");
     4c2:	86 e3       	ldi	r24, 0x36	; 54
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 ef 03 	call	0x7de	; 0x7de <oled_print_string>
		while(direction == NEUTRAL) {
			direction = dir();
			_delay_ms(750);
			//printf("Direction : %d\r\n", direction);
		}
		if (direction == UP && menu_index > 1) {
     4ca:	25 c0       	rjmp	.+74     	; 0x516 <__stack+0x17>
			oled_print_string("  ");
			menu_index--;
			oled_set_position(menu_index, 100);
			oled_print_string("<-");
		}
		else if (direction == DOWN && menu_index < 7) {
     4cc:	8b 81       	ldd	r24, Y+3	; 0x03
     4ce:	9c 81       	ldd	r25, Y+4	; 0x04
     4d0:	04 97       	sbiw	r24, 0x04	; 4
     4d2:	09 f5       	brne	.+66     	; 0x516 <__stack+0x17>
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	07 97       	sbiw	r24, 0x07	; 7
     4da:	ec f4       	brge	.+58     	; 0x516 <__stack+0x17>
			printf("DOWN\r\n");
     4dc:	80 e4       	ldi	r24, 0x40	; 64
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
			oled_set_position(menu_index, 100);
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	9a 81       	ldd	r25, Y+2	; 0x02
     4e8:	64 e6       	ldi	r22, 0x64	; 100
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	0e 94 56 03 	call	0x6ac	; 0x6ac <oled_set_position>
			oled_print_string("  ");
     4f0:	8d e3       	ldi	r24, 0x3D	; 61
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 ef 03 	call	0x7de	; 0x7de <oled_print_string>
			menu_index++;
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
			oled_set_position(menu_index, 100);
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	9a 81       	ldd	r25, Y+2	; 0x02
     506:	64 e6       	ldi	r22, 0x64	; 100
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 56 03 	call	0x6ac	; 0x6ac <oled_set_position>
			oled_print_string("<-");
     50e:	86 e3       	ldi	r24, 0x36	; 54
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 ef 03 	call	0x7de	; 0x7de <oled_print_string>
		}
		printf("menu index %d\n\r", menu_index);
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	86 e4       	ldi	r24, 0x46	; 70
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	0e 94 6a 05 	call	0xad4	; 0xad4 <printf>
		direction = NEUTRAL;
     52a:	1c 82       	std	Y+4, r1	; 0x04
     52c:	1b 82       	std	Y+3, r1	; 0x03
	}
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	a0 cf       	rjmp	.-192    	; 0x478 <game_fsm+0x54>

00000538 <joystick_init>:
#include "joystick.h"
#include "adc.h"
#include <avr/io.h>

void joystick_init(){
	PORTD |= (1 << PD5); //setup pullup for PD5 which is button input from Joystick
     538:	82 b3       	in	r24, 0x12	; 18
     53a:	80 62       	ori	r24, 0x20	; 32
     53c:	82 bb       	out	0x12, r24	; 18
     53e:	08 95       	ret

00000540 <pos_read>:
}

struct pos pos_read(void) {
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
	int g_f = 200/190; // gain factor to scale interval correctly
	int x_neutral = 160;
	int y_neutral = 162; // midpoint of interval
	
	struct pos position = {
		.x_pos = adc_read(0) * g_f - x_neutral, 
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <adc_read>
     552:	c8 2f       	mov	r28, r24
     554:	d0 e0       	ldi	r29, 0x00	; 0
     556:	c0 5a       	subi	r28, 0xA0	; 160
     558:	d1 09       	sbc	r29, r1
struct pos pos_read(void) {
	int g_f = 200/190; // gain factor to scale interval correctly
	int x_neutral = 160;
	int y_neutral = 162; // midpoint of interval
	
	struct pos position = {
     55a:	6e 01       	movw	r12, r28
		.x_pos = adc_read(0) * g_f - x_neutral, 
		.y_pos = adc_read(1) * g_f - y_neutral
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <adc_read>
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	82 5a       	subi	r24, 0xA2	; 162
     566:	91 09       	sbc	r25, r1
struct pos pos_read(void) {
	int g_f = 200/190; // gain factor to scale interval correctly
	int x_neutral = 160;
	int y_neutral = 162; // midpoint of interval
	
	struct pos position = {
     568:	7c 01       	movw	r14, r24
		.x_pos = adc_read(0) * g_f - x_neutral, 
		.y_pos = adc_read(1) * g_f - y_neutral
	};

	if (position.x_pos > -5 && position.x_pos < 5) {
     56a:	24 96       	adiw	r28, 0x04	; 4
     56c:	29 97       	sbiw	r28, 0x09	; 9
     56e:	10 f4       	brcc	.+4      	; 0x574 <pos_read+0x34>
		position.x_pos = 0;
     570:	c1 2c       	mov	r12, r1
     572:	d1 2c       	mov	r13, r1
	}
	if (position.y_pos > -5 && position.y_pos < 5) {
     574:	04 96       	adiw	r24, 0x04	; 4
     576:	09 97       	sbiw	r24, 0x09	; 9
     578:	10 f4       	brcc	.+4      	; 0x57e <pos_read+0x3e>
		position.y_pos = 0;
     57a:	e1 2c       	mov	r14, r1
     57c:	f1 2c       	mov	r15, r1
	}
	if (position.x_pos <= -100) {
     57e:	8d e9       	ldi	r24, 0x9D	; 157
     580:	c8 16       	cp	r12, r24
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	d8 06       	cpc	r13, r24
     586:	34 f4       	brge	.+12     	; 0x594 <pos_read+0x54>
		position.x_pos = -100;
     588:	0f 2e       	mov	r0, r31
     58a:	fc e9       	ldi	r31, 0x9C	; 156
     58c:	cf 2e       	mov	r12, r31
     58e:	dd 24       	eor	r13, r13
     590:	da 94       	dec	r13
     592:	f0 2d       	mov	r31, r0
	}
	if (position.y_pos <= -100) {
     594:	8d e9       	ldi	r24, 0x9D	; 157
     596:	e8 16       	cp	r14, r24
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	f8 06       	cpc	r15, r24
     59c:	34 f4       	brge	.+12     	; 0x5aa <pos_read+0x6a>
		position.y_pos = -100;
     59e:	0f 2e       	mov	r0, r31
     5a0:	fc e9       	ldi	r31, 0x9C	; 156
     5a2:	ef 2e       	mov	r14, r31
     5a4:	ff 24       	eor	r15, r15
     5a6:	fa 94       	dec	r15
     5a8:	f0 2d       	mov	r31, r0
	}
	if (position.x_pos >= 92) {
     5aa:	8c e5       	ldi	r24, 0x5C	; 92
     5ac:	c8 16       	cp	r12, r24
     5ae:	d1 04       	cpc	r13, r1
     5b0:	2c f0       	brlt	.+10     	; 0x5bc <pos_read+0x7c>
		position.x_pos = 100;
     5b2:	0f 2e       	mov	r0, r31
     5b4:	f4 e6       	ldi	r31, 0x64	; 100
     5b6:	cf 2e       	mov	r12, r31
     5b8:	d1 2c       	mov	r13, r1
     5ba:	f0 2d       	mov	r31, r0
	}
	if (position.y_pos >= 92) {
     5bc:	8c e5       	ldi	r24, 0x5C	; 92
     5be:	e8 16       	cp	r14, r24
     5c0:	f1 04       	cpc	r15, r1
     5c2:	2c f0       	brlt	.+10     	; 0x5ce <pos_read+0x8e>
		position.y_pos = 100;
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f4 e6       	ldi	r31, 0x64	; 100
     5c8:	ef 2e       	mov	r14, r31
     5ca:	f1 2c       	mov	r15, r1
     5cc:	f0 2d       	mov	r31, r0
	}
	
	return position;
}
     5ce:	c7 01       	movw	r24, r14
     5d0:	b6 01       	movw	r22, r12
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	08 95       	ret

000005e0 <dir>:

dir_t dir() {
	struct pos position = pos_read();
     5e0:	0e 94 a0 02 	call	0x540	; 0x540 <pos_read>
	int x_input = position.x_pos;
	int y_input = position.y_pos;
	if (x_input < -40) {
     5e4:	68 3d       	cpi	r22, 0xD8	; 216
     5e6:	4f ef       	ldi	r20, 0xFF	; 255
     5e8:	74 07       	cpc	r23, r20
     5ea:	5c f0       	brlt	.+22     	; 0x602 <dir+0x22>
		return LEFT;
	} 
	else if (x_input > 40) {
     5ec:	69 32       	cpi	r22, 0x29	; 41
     5ee:	71 05       	cpc	r23, r1
     5f0:	54 f4       	brge	.+20     	; 0x606 <dir+0x26>
		return RIGHT;
	}
	if (y_input < -40) {
     5f2:	88 3d       	cpi	r24, 0xD8	; 216
     5f4:	2f ef       	ldi	r18, 0xFF	; 255
     5f6:	92 07       	cpc	r25, r18
     5f8:	44 f0       	brlt	.+16     	; 0x60a <dir+0x2a>
		return DOWN;
	}
	else if (y_input > 40) {
     5fa:	89 97       	sbiw	r24, 0x29	; 41
     5fc:	44 f0       	brlt	.+16     	; 0x60e <dir+0x2e>
		return UP;
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	08 95       	ret
dir_t dir() {
	struct pos position = pos_read();
	int x_input = position.x_pos;
	int y_input = position.y_pos;
	if (x_input < -40) {
		return LEFT;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	08 95       	ret
	} 
	else if (x_input > 40) {
		return RIGHT;
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	08 95       	ret
	}
	if (y_input < -40) {
		return DOWN;
     60a:	84 e0       	ldi	r24, 0x04	; 4
     60c:	08 95       	ret
	}
	else if (y_input > 40) {
		return UP;
	}
	else if ((y_input > -40)&&(y_input <40)) {
		return NEUTRAL;
     60e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if ((x_input > -40)&&(x_input <40)) {
		return NEUTRAL;
	}
	return NEUTRAL;
     610:	08 95       	ret

00000612 <main>:
	// Set main sleep time
	//int sleep_time = 1000;
    //_delay_ms(sleep_time);
	
	// Initialize functions
	usart_init(MYUBRR);
     612:	8f e1       	ldi	r24, 0x1F	; 31
     614:	0e 94 ab 04 	call	0x956	; 0x956 <usart_init>
	xmem_init();
     618:	0e 94 b8 04 	call	0x970	; 0x970 <xmem_init>
	adc_init();
     61c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	joystick_init();
     620:	0e 94 9c 02 	call	0x538	; 0x538 <joystick_init>
	oled_init();
     624:	0e 94 86 03 	call	0x70c	; 0x70c <oled_init>
	
	// Test SRAM functionality
	if (SRAM_test()) {
     628:	0e 94 1a 04 	call	0x834	; 0x834 <SRAM_test>
     62c:	89 2b       	or	r24, r25
     62e:	89 f4       	brne	.+34     	; 0x652 <main+0x40>
		printf("SRAM test failed\r\n");
		return 0;
	}
	game_fsm();
     630:	0e 94 12 02 	call	0x424	; 0x424 <game_fsm>
	// MAIN LOOP
    while (1) {
		printf("Direction : %d\r\n", dir());
     634:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <dir>
     638:	1f 92       	push	r1
     63a:	8f 93       	push	r24
     63c:	88 e6       	ldi	r24, 0x68	; 104
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	0e 94 6a 05 	call	0xad4	; 0xad4 <printf>
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	f1 cf       	rjmp	.-30     	; 0x634 <main+0x22>
	joystick_init();
	oled_init();
	
	// Test SRAM functionality
	if (SRAM_test()) {
		printf("SRAM test failed\r\n");
     652:	86 e5       	ldi	r24, 0x56	; 86
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
		//_delay_ms(sleep_time);
		//oled_set_home();
	}

	return 0;
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	08 95       	ret

00000660 <write_command>:
	oled_goto_page(page);
	for (int i = 0; i < 128; i++)
	{
		write_data(0x00);
	}
}
     660:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd6a>
     664:	08 95       	ret

00000666 <oled_goto_column>:
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	80 38       	cpi	r24, 0x80	; 128
     66c:	91 05       	cpc	r25, r1
     66e:	90 f4       	brcc	.+36     	; 0x694 <oled_goto_column+0x2e>
     670:	ec 01       	movw	r28, r24
     672:	8f 70       	andi	r24, 0x0F	; 15
     674:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     678:	ce 01       	movw	r24, r28
     67a:	80 7f       	andi	r24, 0xF0	; 240
     67c:	99 27       	eor	r25, r25
     67e:	95 95       	asr	r25
     680:	87 95       	ror	r24
     682:	95 95       	asr	r25
     684:	87 95       	ror	r24
     686:	95 95       	asr	r25
     688:	87 95       	ror	r24
     68a:	95 95       	asr	r25
     68c:	87 95       	ror	r24
     68e:	80 5f       	subi	r24, 0xF0	; 240
     690:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <oled_goto_page>:
     69a:	28 2f       	mov	r18, r24
     69c:	39 2f       	mov	r19, r25
     69e:	28 30       	cpi	r18, 0x08	; 8
     6a0:	31 05       	cpc	r19, r1
     6a2:	18 f4       	brcc	.+6      	; 0x6aa <oled_goto_page+0x10>
     6a4:	80 55       	subi	r24, 0x50	; 80
     6a6:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     6aa:	08 95       	ret

000006ac <oled_set_position>:
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	eb 01       	movw	r28, r22
     6b2:	0e 94 4d 03 	call	0x69a	; 0x69a <oled_goto_page>
     6b6:	ce 01       	movw	r24, r28
     6b8:	0e 94 33 03 	call	0x666	; 0x666 <oled_goto_column>
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <write_data>:
     6c2:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf6a>
     6c6:	08 95       	ret

000006c8 <oled_reset>:
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	00 e0       	ldi	r16, 0x00	; 0
     6d2:	10 e0       	ldi	r17, 0x00	; 0
     6d4:	13 c0       	rjmp	.+38     	; 0x6fc <oled_reset+0x34>
     6d6:	c8 01       	movw	r24, r16
     6d8:	0e 94 4d 03 	call	0x69a	; 0x69a <oled_goto_page>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 33 03 	call	0x666	; 0x666 <oled_goto_column>
     6e4:	c0 e0       	ldi	r28, 0x00	; 0
     6e6:	d0 e0       	ldi	r29, 0x00	; 0
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <oled_reset+0x2a>
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 61 03 	call	0x6c2	; 0x6c2 <write_data>
     6f0:	21 96       	adiw	r28, 0x01	; 1
     6f2:	c0 38       	cpi	r28, 0x80	; 128
     6f4:	d1 05       	cpc	r29, r1
     6f6:	cc f3       	brlt	.-14     	; 0x6ea <oled_reset+0x22>
     6f8:	0f 5f       	subi	r16, 0xFF	; 255
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	08 30       	cpi	r16, 0x08	; 8
     6fe:	11 05       	cpc	r17, r1
     700:	54 f3       	brlt	.-44     	; 0x6d6 <oled_reset+0xe>
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <oled_init>:
     70c:	8e ea       	ldi	r24, 0xAE	; 174
     70e:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     712:	81 ea       	ldi	r24, 0xA1	; 161
     714:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     718:	8a ed       	ldi	r24, 0xDA	; 218
     71a:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     71e:	82 e1       	ldi	r24, 0x12	; 18
     720:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     724:	88 ec       	ldi	r24, 0xC8	; 200
     726:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     72a:	88 ea       	ldi	r24, 0xA8	; 168
     72c:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     730:	8f e3       	ldi	r24, 0x3F	; 63
     732:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     736:	85 ed       	ldi	r24, 0xD5	; 213
     738:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     73c:	80 e8       	ldi	r24, 0x80	; 128
     73e:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     742:	81 e8       	ldi	r24, 0x81	; 129
     744:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     748:	80 e5       	ldi	r24, 0x50	; 80
     74a:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     74e:	89 ed       	ldi	r24, 0xD9	; 217
     750:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     754:	81 e2       	ldi	r24, 0x21	; 33
     756:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     75a:	80 e2       	ldi	r24, 0x20	; 32
     75c:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     766:	8b ed       	ldi	r24, 0xDB	; 219
     768:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     76c:	80 e3       	ldi	r24, 0x30	; 48
     76e:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     772:	8d ea       	ldi	r24, 0xAD	; 173
     774:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     77e:	84 ea       	ldi	r24, 0xA4	; 164
     780:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     784:	86 ea       	ldi	r24, 0xA6	; 166
     786:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     78a:	8f ea       	ldi	r24, 0xAF	; 175
     78c:	0e 94 30 03 	call	0x660	; 0x660 <write_command>
     790:	0e 94 64 03 	call	0x6c8	; 0x6c8 <oled_reset>
     794:	08 95       	ret

00000796 <oled_print_char>:
void write_data(uint8_t data) {
	volatile uint8_t* address = (uint8_t*)0x1200;
	*address = data;
}

void oled_print_char(char c) {
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
	if (' ' <= c && c <= '~') {
     79c:	90 ee       	ldi	r25, 0xE0	; 224
     79e:	98 0f       	add	r25, r24
     7a0:	9f 35       	cpi	r25, 0x5F	; 95
     7a2:	98 f0       	brcs	.+38     	; 0x7ca <oled_print_char+0x34>
     7a4:	18 c0       	rjmp	.+48     	; 0x7d6 <oled_print_char+0x40>
		for (int i = 0; i < 8; i++) {
			uint8_t character = pgm_read_byte(&(font8[c - 32][i]));
     7a6:	e1 2f       	mov	r30, r17
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	b0 97       	sbiw	r30, 0x20	; 32
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	ec 0f       	add	r30, r28
     7ba:	fd 1f       	adc	r31, r29
     7bc:	e0 59       	subi	r30, 0x90	; 144
     7be:	ff 4f       	sbci	r31, 0xFF	; 255
     7c0:	84 91       	lpm	r24, Z
			write_data(character);
     7c2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <write_data>
	*address = data;
}

void oled_print_char(char c) {
	if (' ' <= c && c <= '~') {
		for (int i = 0; i < 8; i++) {
     7c6:	21 96       	adiw	r28, 0x01	; 1
     7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <oled_print_char+0x3a>
     7ca:	18 2f       	mov	r17, r24
     7cc:	c0 e0       	ldi	r28, 0x00	; 0
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
     7d0:	c8 30       	cpi	r28, 0x08	; 8
     7d2:	d1 05       	cpc	r29, r1
     7d4:	44 f3       	brlt	.-48     	; 0x7a6 <oled_print_char+0x10>
			uint8_t character = pgm_read_byte(&(font8[c - 32][i]));
			write_data(character);
		}
	}
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	08 95       	ret

000007de <oled_print_string>:

void oled_print_string(const char* string) {
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	8c 01       	movw	r16, r24
	int i = 0;
     7e8:	c0 e0       	ldi	r28, 0x00	; 0
     7ea:	d0 e0       	ldi	r29, 0x00	; 0
	while (string[i] != '\0') {
     7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <oled_print_string+0x16>
		oled_print_char(string[i]);
     7ee:	0e 94 cb 03 	call	0x796	; 0x796 <oled_print_char>
		++i;
     7f2:	21 96       	adiw	r28, 0x01	; 1
	}
}

void oled_print_string(const char* string) {
	int i = 0;
	while (string[i] != '\0') {
     7f4:	f8 01       	movw	r30, r16
     7f6:	ec 0f       	add	r30, r28
     7f8:	fd 1f       	adc	r31, r29
     7fa:	80 81       	ld	r24, Z
     7fc:	81 11       	cpse	r24, r1
     7fe:	f7 cf       	rjmp	.-18     	; 0x7ee <oled_print_string+0x10>
		oled_print_char(string[i]);
		++i;
	}
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <oled_set_home>:

void oled_set_home() {
	oled_set_position(0,1);
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 56 03 	call	0x6ac	; 0x6ac <oled_set_position>
	oled_print_string("---MAIN MENU---");
     816:	89 e7       	ldi	r24, 0x79	; 121
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 ef 03 	call	0x7de	; 0x7de <oled_print_string>
	
	oled_set_position(7,1);
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	87 e0       	ldi	r24, 0x07	; 7
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 56 03 	call	0x6ac	; 0x6ac <oled_set_position>
	oled_print_string("<< RETURN");
     82a:	89 e8       	ldi	r24, 0x89	; 137
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 ef 03 	call	0x7de	; 0x7de <oled_print_string>
     832:	08 95       	ret

00000834 <SRAM_test>:
#include "sram_test.h"

#include <stdlib.h>
#include <stdint.h>
int SRAM_test(void)
{
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\r\n");
     840:	83 e9       	ldi	r24, 0x93	; 147
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     848:	0e 94 0f 05 	call	0xa1e	; 0xa1e <rand>
     84c:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     84e:	0e 94 14 05 	call	0xa28	; 0xa28 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     852:	c0 e0       	ldi	r28, 0x00	; 0
     854:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdint.h>
int SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     856:	00 e0       	ldi	r16, 0x00	; 0
     858:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     85a:	20 c0       	rjmp	.+64     	; 0x89c <SRAM_test+0x68>
		uint8_t some_value = rand();
     85c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <rand>
		ext_ram[i] = some_value;
     860:	fe 01       	movw	r30, r28
     862:	f8 5e       	subi	r31, 0xE8	; 232
     864:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     866:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     868:	28 17       	cp	r18, r24
     86a:	b9 f0       	breq	.+46     	; 0x89a <SRAM_test+0x66>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     86c:	99 27       	eor	r25, r25
     86e:	9f 93       	push	r25
     870:	8f 93       	push	r24
     872:	1f 92       	push	r1
     874:	2f 93       	push	r18
     876:	df 93       	push	r29
     878:	cf 93       	push	r28
     87a:	8a ea       	ldi	r24, 0xAA	; 170
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	0e 94 6a 05 	call	0xad4	; 0xad4 <printf>
			write_errors++;
     886:	0f 5f       	subi	r16, 0xFF	; 255
     888:	1f 4f       	sbci	r17, 0xFF	; 255
     88a:	8d b7       	in	r24, 0x3d	; 61
     88c:	9e b7       	in	r25, 0x3e	; 62
     88e:	08 96       	adiw	r24, 0x08	; 8
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	9e bf       	out	0x3e, r25	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     89a:	21 96       	adiw	r28, 0x01	; 1
     89c:	c1 15       	cp	r28, r1
     89e:	98 e0       	ldi	r25, 0x08	; 8
     8a0:	d9 07       	cpc	r29, r25
     8a2:	e0 f2       	brcs	.-72     	; 0x85c <SRAM_test+0x28>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
     8a4:	c7 01       	movw	r24, r14
     8a6:	0e 94 14 05 	call	0xa28	; 0xa28 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     8aa:	c0 e0       	ldi	r28, 0x00	; 0
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
int SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     8ae:	e1 2c       	mov	r14, r1
     8b0:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     8b2:	20 c0       	rjmp	.+64     	; 0x8f4 <SRAM_test+0xc0>
		uint8_t some_value = rand();
     8b4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <rand>
		uint8_t retreived_value = ext_ram[i];
     8b8:	fe 01       	movw	r30, r28
     8ba:	f8 5e       	subi	r31, 0xE8	; 232
     8bc:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     8be:	28 17       	cp	r18, r24
     8c0:	c1 f0       	breq	.+48     	; 0x8f2 <SRAM_test+0xbe>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     8c2:	99 27       	eor	r25, r25
     8c4:	9f 93       	push	r25
     8c6:	8f 93       	push	r24
     8c8:	1f 92       	push	r1
     8ca:	2f 93       	push	r18
     8cc:	df 93       	push	r29
     8ce:	cf 93       	push	r28
     8d0:	84 ee       	ldi	r24, 0xE4	; 228
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	0e 94 6a 05 	call	0xad4	; 0xad4 <printf>
			retrieval_errors++;
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	e8 1a       	sub	r14, r24
     8e0:	f8 0a       	sbc	r15, r24
     8e2:	8d b7       	in	r24, 0x3d	; 61
     8e4:	9e b7       	in	r25, 0x3e	; 62
     8e6:	08 96       	adiw	r24, 0x08	; 8
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	9e bf       	out	0x3e, r25	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     8f2:	21 96       	adiw	r28, 0x01	; 1
     8f4:	c1 15       	cp	r28, r1
     8f6:	98 e0       	ldi	r25, 0x08	; 8
     8f8:	d9 07       	cpc	r29, r25
     8fa:	e0 f2       	brcs	.-72     	; 0x8b4 <SRAM_test+0x80>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors || write_errors) {
     8fc:	e1 14       	cp	r14, r1
     8fe:	f1 04       	cpc	r15, r1
     900:	b1 f4       	brne	.+44     	; 0x92e <SRAM_test+0xfa>
     902:	01 15       	cp	r16, r1
     904:	11 05       	cpc	r17, r1
     906:	b1 f4       	brne	.+44     	; 0x934 <SRAM_test+0x100>
		return 1;
	}
	printf("SRAM test completed with \r\n%4d errors in write phase and \r\n%4d errors in retrieval phase\r\n\r\n", write_errors, retrieval_errors);
     908:	ff 92       	push	r15
     90a:	ef 92       	push	r14
     90c:	1f 93       	push	r17
     90e:	0f 93       	push	r16
     910:	82 e2       	ldi	r24, 0x22	; 34
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	0e 94 6a 05 	call	0xad4	; 0xad4 <printf>
	return 0;
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	05 c0       	rjmp	.+10     	; 0x938 <SRAM_test+0x104>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors || write_errors) {
		return 1;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	02 c0       	rjmp	.+4      	; 0x938 <SRAM_test+0x104>
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
	}
	printf("SRAM test completed with \r\n%4d errors in write phase and \r\n%4d errors in retrieval phase\r\n\r\n", write_errors, retrieval_errors);
	return 0;
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	08 95       	ret

00000946 <usart_transmit>:



void usart_transmit(unsigned char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) {	
     946:	5d 9b       	sbis	0x0b, 5	; 11
     948:	fe cf       	rjmp	.-4      	; 0x946 <usart_transmit>
	}
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     94a:	8c b9       	out	0x0c, r24	; 12
     94c:	08 95       	ret

0000094e <usart_receive>:
}

unsigned char usart_receive(void) {
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) ) {
     94e:	5f 9b       	sbis	0x0b, 7	; 11
     950:	fe cf       	rjmp	.-4      	; 0x94e <usart_receive>
	}
	/* Get and return received data from buffer */
	return UDR0;
     952:	8c b1       	in	r24, 0x0c	; 12
}
     954:	08 95       	ret

00000956 <usart_init>:
#include <avr/io.h>
#include "uart_driver.h"

void usart_init(uint8_t ubrr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     956:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)ubrr;
     958:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     95a:	88 e1       	ldi	r24, 0x18	; 24
     95c:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     95e:	86 e8       	ldi	r24, 0x86	; 134
     960:	80 bd       	out	0x20, r24	; 32
	fdevopen(usart_transmit, usart_receive);
     962:	67 ea       	ldi	r22, 0xA7	; 167
     964:	74 e0       	ldi	r23, 0x04	; 4
     966:	83 ea       	ldi	r24, 0xA3	; 163
     968:	94 e0       	ldi	r25, 0x04	; 4
     96a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <fdevopen>
     96e:	08 95       	ret

00000970 <xmem_init>:
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1 << SRE); //enable XMEM
     970:	85 b7       	in	r24, 0x35	; 53
     972:	80 68       	ori	r24, 0x80	; 128
     974:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); //bit masking
     976:	80 b7       	in	r24, 0x30	; 48
     978:	80 62       	ori	r24, 0x20	; 32
     97a:	80 bf       	out	0x30, r24	; 48
	printf("-XMEM init-\n");	
     97c:	8f e7       	ldi	r24, 0x7F	; 127
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
     984:	08 95       	ret

00000986 <do_rand>:
     986:	8f 92       	push	r8
     988:	9f 92       	push	r9
     98a:	af 92       	push	r10
     98c:	bf 92       	push	r11
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	ec 01       	movw	r28, r24
     99c:	68 81       	ld	r22, Y
     99e:	79 81       	ldd	r23, Y+1	; 0x01
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	9b 81       	ldd	r25, Y+3	; 0x03
     9a4:	61 15       	cp	r22, r1
     9a6:	71 05       	cpc	r23, r1
     9a8:	81 05       	cpc	r24, r1
     9aa:	91 05       	cpc	r25, r1
     9ac:	21 f4       	brne	.+8      	; 0x9b6 <do_rand+0x30>
     9ae:	64 e2       	ldi	r22, 0x24	; 36
     9b0:	79 ed       	ldi	r23, 0xD9	; 217
     9b2:	8b e5       	ldi	r24, 0x5B	; 91
     9b4:	97 e0       	ldi	r25, 0x07	; 7
     9b6:	2d e1       	ldi	r18, 0x1D	; 29
     9b8:	33 ef       	ldi	r19, 0xF3	; 243
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	0e 94 85 09 	call	0x130a	; 0x130a <__divmodsi4>
     9c2:	49 01       	movw	r8, r18
     9c4:	5a 01       	movw	r10, r20
     9c6:	9b 01       	movw	r18, r22
     9c8:	ac 01       	movw	r20, r24
     9ca:	a7 ea       	ldi	r26, 0xA7	; 167
     9cc:	b1 e4       	ldi	r27, 0x41	; 65
     9ce:	0e 94 a4 09 	call	0x1348	; 0x1348 <__muluhisi3>
     9d2:	6b 01       	movw	r12, r22
     9d4:	7c 01       	movw	r14, r24
     9d6:	ac ee       	ldi	r26, 0xEC	; 236
     9d8:	b4 ef       	ldi	r27, 0xF4	; 244
     9da:	a5 01       	movw	r20, r10
     9dc:	94 01       	movw	r18, r8
     9de:	0e 94 b2 09 	call	0x1364	; 0x1364 <__mulohisi3>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	8c 0d       	add	r24, r12
     9e8:	9d 1d       	adc	r25, r13
     9ea:	ae 1d       	adc	r26, r14
     9ec:	bf 1d       	adc	r27, r15
     9ee:	b7 ff       	sbrs	r27, 7
     9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <do_rand+0x72>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b0 48       	sbci	r27, 0x80	; 128
     9f8:	88 83       	st	Y, r24
     9fa:	99 83       	std	Y+1, r25	; 0x01
     9fc:	aa 83       	std	Y+2, r26	; 0x02
     9fe:	bb 83       	std	Y+3, r27	; 0x03
     a00:	9f 77       	andi	r25, 0x7F	; 127
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	df 90       	pop	r13
     a0c:	cf 90       	pop	r12
     a0e:	bf 90       	pop	r11
     a10:	af 90       	pop	r10
     a12:	9f 90       	pop	r9
     a14:	8f 90       	pop	r8
     a16:	08 95       	ret

00000a18 <rand_r>:
     a18:	0e 94 c3 04 	call	0x986	; 0x986 <do_rand>
     a1c:	08 95       	ret

00000a1e <rand>:
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	0e 94 c3 04 	call	0x986	; 0x986 <do_rand>
     a26:	08 95       	ret

00000a28 <srand>:
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     a30:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a34:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     a38:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     a3c:	08 95       	ret

00000a3e <fdevopen>:
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	00 97       	sbiw	r24, 0x00	; 0
     a48:	31 f4       	brne	.+12     	; 0xa56 <fdevopen+0x18>
     a4a:	61 15       	cp	r22, r1
     a4c:	71 05       	cpc	r23, r1
     a4e:	19 f4       	brne	.+6      	; 0xa56 <fdevopen+0x18>
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	3a c0       	rjmp	.+116    	; 0xaca <fdevopen+0x8c>
     a56:	8b 01       	movw	r16, r22
     a58:	ec 01       	movw	r28, r24
     a5a:	6e e0       	ldi	r22, 0x0E	; 14
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 91 07 	call	0xf22	; 0xf22 <calloc>
     a66:	fc 01       	movw	r30, r24
     a68:	89 2b       	or	r24, r25
     a6a:	91 f3       	breq	.-28     	; 0xa50 <fdevopen+0x12>
     a6c:	80 e8       	ldi	r24, 0x80	; 128
     a6e:	83 83       	std	Z+3, r24	; 0x03
     a70:	01 15       	cp	r16, r1
     a72:	11 05       	cpc	r17, r1
     a74:	71 f0       	breq	.+28     	; 0xa92 <fdevopen+0x54>
     a76:	13 87       	std	Z+11, r17	; 0x0b
     a78:	02 87       	std	Z+10, r16	; 0x0a
     a7a:	81 e8       	ldi	r24, 0x81	; 129
     a7c:	83 83       	std	Z+3, r24	; 0x03
     a7e:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <__data_end>
     a82:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <__data_end+0x1>
     a86:	89 2b       	or	r24, r25
     a88:	21 f4       	brne	.+8      	; 0xa92 <fdevopen+0x54>
     a8a:	f0 93 8d 02 	sts	0x028D, r31	; 0x80028d <__data_end+0x1>
     a8e:	e0 93 8c 02 	sts	0x028C, r30	; 0x80028c <__data_end>
     a92:	20 97       	sbiw	r28, 0x00	; 0
     a94:	c9 f0       	breq	.+50     	; 0xac8 <fdevopen+0x8a>
     a96:	d1 87       	std	Z+9, r29	; 0x09
     a98:	c0 87       	std	Z+8, r28	; 0x08
     a9a:	83 81       	ldd	r24, Z+3	; 0x03
     a9c:	82 60       	ori	r24, 0x02	; 2
     a9e:	83 83       	std	Z+3, r24	; 0x03
     aa0:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end+0x2>
     aa4:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__data_end+0x3>
     aa8:	89 2b       	or	r24, r25
     aaa:	71 f4       	brne	.+28     	; 0xac8 <fdevopen+0x8a>
     aac:	f0 93 8f 02 	sts	0x028F, r31	; 0x80028f <__data_end+0x3>
     ab0:	e0 93 8e 02 	sts	0x028E, r30	; 0x80028e <__data_end+0x2>
     ab4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end+0x4>
     ab8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__data_end+0x5>
     abc:	89 2b       	or	r24, r25
     abe:	21 f4       	brne	.+8      	; 0xac8 <fdevopen+0x8a>
     ac0:	f0 93 91 02 	sts	0x0291, r31	; 0x800291 <__data_end+0x5>
     ac4:	e0 93 90 02 	sts	0x0290, r30	; 0x800290 <__data_end+0x4>
     ac8:	cf 01       	movw	r24, r30
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <printf>:
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	e0 e7       	ldi	r30, 0x70	; 112
     ada:	f5 e0       	ldi	r31, 0x05	; 5
     adc:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__prologue_saves__+0x20>
     ae0:	ae 01       	movw	r20, r28
     ae2:	4b 5f       	subi	r20, 0xFB	; 251
     ae4:	5f 4f       	sbci	r21, 0xFF	; 255
     ae6:	fa 01       	movw	r30, r20
     ae8:	61 91       	ld	r22, Z+
     aea:	71 91       	ld	r23, Z+
     aec:	af 01       	movw	r20, r30
     aee:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end+0x2>
     af2:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__data_end+0x3>
     af6:	0e 94 b0 05 	call	0xb60	; 0xb60 <vfprintf>
     afa:	e2 e0       	ldi	r30, 0x02	; 2
     afc:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__epilogue_restores__+0x20>

00000b00 <puts>:
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	e0 91 8e 02 	lds	r30, 0x028E	; 0x80028e <__data_end+0x2>
     b0c:	f0 91 8f 02 	lds	r31, 0x028F	; 0x80028f <__data_end+0x3>
     b10:	23 81       	ldd	r18, Z+3	; 0x03
     b12:	21 ff       	sbrs	r18, 1
     b14:	1b c0       	rjmp	.+54     	; 0xb4c <puts+0x4c>
     b16:	8c 01       	movw	r16, r24
     b18:	d0 e0       	ldi	r29, 0x00	; 0
     b1a:	c0 e0       	ldi	r28, 0x00	; 0
     b1c:	f8 01       	movw	r30, r16
     b1e:	81 91       	ld	r24, Z+
     b20:	8f 01       	movw	r16, r30
     b22:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <__data_end+0x2>
     b26:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <__data_end+0x3>
     b2a:	db 01       	movw	r26, r22
     b2c:	18 96       	adiw	r26, 0x08	; 8
     b2e:	ed 91       	ld	r30, X+
     b30:	fc 91       	ld	r31, X
     b32:	19 97       	sbiw	r26, 0x09	; 9
     b34:	88 23       	and	r24, r24
     b36:	31 f0       	breq	.+12     	; 0xb44 <puts+0x44>
     b38:	09 95       	icall
     b3a:	89 2b       	or	r24, r25
     b3c:	79 f3       	breq	.-34     	; 0xb1c <puts+0x1c>
     b3e:	df ef       	ldi	r29, 0xFF	; 255
     b40:	cf ef       	ldi	r28, 0xFF	; 255
     b42:	ec cf       	rjmp	.-40     	; 0xb1c <puts+0x1c>
     b44:	8a e0       	ldi	r24, 0x0A	; 10
     b46:	09 95       	icall
     b48:	89 2b       	or	r24, r25
     b4a:	19 f0       	breq	.+6      	; 0xb52 <puts+0x52>
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <puts+0x56>
     b52:	8d 2f       	mov	r24, r29
     b54:	9c 2f       	mov	r25, r28
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	08 95       	ret

00000b60 <vfprintf>:
     b60:	ab e0       	ldi	r26, 0x0B	; 11
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e6 eb       	ldi	r30, 0xB6	; 182
     b66:	f5 e0       	ldi	r31, 0x05	; 5
     b68:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__prologue_saves__>
     b6c:	6c 01       	movw	r12, r24
     b6e:	7b 01       	movw	r14, r22
     b70:	8a 01       	movw	r16, r20
     b72:	fc 01       	movw	r30, r24
     b74:	17 82       	std	Z+7, r1	; 0x07
     b76:	16 82       	std	Z+6, r1	; 0x06
     b78:	83 81       	ldd	r24, Z+3	; 0x03
     b7a:	81 ff       	sbrs	r24, 1
     b7c:	cc c1       	rjmp	.+920    	; 0xf16 <vfprintf+0x3b6>
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	3c 01       	movw	r6, r24
     b84:	f6 01       	movw	r30, r12
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	f7 01       	movw	r30, r14
     b8a:	93 fd       	sbrc	r25, 3
     b8c:	85 91       	lpm	r24, Z+
     b8e:	93 ff       	sbrs	r25, 3
     b90:	81 91       	ld	r24, Z+
     b92:	7f 01       	movw	r14, r30
     b94:	88 23       	and	r24, r24
     b96:	09 f4       	brne	.+2      	; 0xb9a <vfprintf+0x3a>
     b98:	ba c1       	rjmp	.+884    	; 0xf0e <vfprintf+0x3ae>
     b9a:	85 32       	cpi	r24, 0x25	; 37
     b9c:	39 f4       	brne	.+14     	; 0xbac <vfprintf+0x4c>
     b9e:	93 fd       	sbrc	r25, 3
     ba0:	85 91       	lpm	r24, Z+
     ba2:	93 ff       	sbrs	r25, 3
     ba4:	81 91       	ld	r24, Z+
     ba6:	7f 01       	movw	r14, r30
     ba8:	85 32       	cpi	r24, 0x25	; 37
     baa:	29 f4       	brne	.+10     	; 0xbb6 <vfprintf+0x56>
     bac:	b6 01       	movw	r22, r12
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     bb4:	e7 cf       	rjmp	.-50     	; 0xb84 <vfprintf+0x24>
     bb6:	91 2c       	mov	r9, r1
     bb8:	21 2c       	mov	r2, r1
     bba:	31 2c       	mov	r3, r1
     bbc:	ff e1       	ldi	r31, 0x1F	; 31
     bbe:	f3 15       	cp	r31, r3
     bc0:	d8 f0       	brcs	.+54     	; 0xbf8 <vfprintf+0x98>
     bc2:	8b 32       	cpi	r24, 0x2B	; 43
     bc4:	79 f0       	breq	.+30     	; 0xbe4 <vfprintf+0x84>
     bc6:	38 f4       	brcc	.+14     	; 0xbd6 <vfprintf+0x76>
     bc8:	80 32       	cpi	r24, 0x20	; 32
     bca:	79 f0       	breq	.+30     	; 0xbea <vfprintf+0x8a>
     bcc:	83 32       	cpi	r24, 0x23	; 35
     bce:	a1 f4       	brne	.+40     	; 0xbf8 <vfprintf+0x98>
     bd0:	23 2d       	mov	r18, r3
     bd2:	20 61       	ori	r18, 0x10	; 16
     bd4:	1d c0       	rjmp	.+58     	; 0xc10 <vfprintf+0xb0>
     bd6:	8d 32       	cpi	r24, 0x2D	; 45
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <vfprintf+0x92>
     bda:	80 33       	cpi	r24, 0x30	; 48
     bdc:	69 f4       	brne	.+26     	; 0xbf8 <vfprintf+0x98>
     bde:	23 2d       	mov	r18, r3
     be0:	21 60       	ori	r18, 0x01	; 1
     be2:	16 c0       	rjmp	.+44     	; 0xc10 <vfprintf+0xb0>
     be4:	83 2d       	mov	r24, r3
     be6:	82 60       	ori	r24, 0x02	; 2
     be8:	38 2e       	mov	r3, r24
     bea:	e3 2d       	mov	r30, r3
     bec:	e4 60       	ori	r30, 0x04	; 4
     bee:	3e 2e       	mov	r3, r30
     bf0:	2a c0       	rjmp	.+84     	; 0xc46 <vfprintf+0xe6>
     bf2:	f3 2d       	mov	r31, r3
     bf4:	f8 60       	ori	r31, 0x08	; 8
     bf6:	1d c0       	rjmp	.+58     	; 0xc32 <vfprintf+0xd2>
     bf8:	37 fc       	sbrc	r3, 7
     bfa:	2d c0       	rjmp	.+90     	; 0xc56 <vfprintf+0xf6>
     bfc:	20 ed       	ldi	r18, 0xD0	; 208
     bfe:	28 0f       	add	r18, r24
     c00:	2a 30       	cpi	r18, 0x0A	; 10
     c02:	40 f0       	brcs	.+16     	; 0xc14 <vfprintf+0xb4>
     c04:	8e 32       	cpi	r24, 0x2E	; 46
     c06:	b9 f4       	brne	.+46     	; 0xc36 <vfprintf+0xd6>
     c08:	36 fc       	sbrc	r3, 6
     c0a:	81 c1       	rjmp	.+770    	; 0xf0e <vfprintf+0x3ae>
     c0c:	23 2d       	mov	r18, r3
     c0e:	20 64       	ori	r18, 0x40	; 64
     c10:	32 2e       	mov	r3, r18
     c12:	19 c0       	rjmp	.+50     	; 0xc46 <vfprintf+0xe6>
     c14:	36 fe       	sbrs	r3, 6
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0xc4>
     c18:	8a e0       	ldi	r24, 0x0A	; 10
     c1a:	98 9e       	mul	r9, r24
     c1c:	20 0d       	add	r18, r0
     c1e:	11 24       	eor	r1, r1
     c20:	92 2e       	mov	r9, r18
     c22:	11 c0       	rjmp	.+34     	; 0xc46 <vfprintf+0xe6>
     c24:	ea e0       	ldi	r30, 0x0A	; 10
     c26:	2e 9e       	mul	r2, r30
     c28:	20 0d       	add	r18, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	22 2e       	mov	r2, r18
     c2e:	f3 2d       	mov	r31, r3
     c30:	f0 62       	ori	r31, 0x20	; 32
     c32:	3f 2e       	mov	r3, r31
     c34:	08 c0       	rjmp	.+16     	; 0xc46 <vfprintf+0xe6>
     c36:	8c 36       	cpi	r24, 0x6C	; 108
     c38:	21 f4       	brne	.+8      	; 0xc42 <vfprintf+0xe2>
     c3a:	83 2d       	mov	r24, r3
     c3c:	80 68       	ori	r24, 0x80	; 128
     c3e:	38 2e       	mov	r3, r24
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <vfprintf+0xe6>
     c42:	88 36       	cpi	r24, 0x68	; 104
     c44:	41 f4       	brne	.+16     	; 0xc56 <vfprintf+0xf6>
     c46:	f7 01       	movw	r30, r14
     c48:	93 fd       	sbrc	r25, 3
     c4a:	85 91       	lpm	r24, Z+
     c4c:	93 ff       	sbrs	r25, 3
     c4e:	81 91       	ld	r24, Z+
     c50:	7f 01       	movw	r14, r30
     c52:	81 11       	cpse	r24, r1
     c54:	b3 cf       	rjmp	.-154    	; 0xbbc <vfprintf+0x5c>
     c56:	98 2f       	mov	r25, r24
     c58:	9f 7d       	andi	r25, 0xDF	; 223
     c5a:	95 54       	subi	r25, 0x45	; 69
     c5c:	93 30       	cpi	r25, 0x03	; 3
     c5e:	28 f4       	brcc	.+10     	; 0xc6a <vfprintf+0x10a>
     c60:	0c 5f       	subi	r16, 0xFC	; 252
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
     c64:	9f e3       	ldi	r25, 0x3F	; 63
     c66:	99 83       	std	Y+1, r25	; 0x01
     c68:	0d c0       	rjmp	.+26     	; 0xc84 <vfprintf+0x124>
     c6a:	83 36       	cpi	r24, 0x63	; 99
     c6c:	31 f0       	breq	.+12     	; 0xc7a <vfprintf+0x11a>
     c6e:	83 37       	cpi	r24, 0x73	; 115
     c70:	71 f0       	breq	.+28     	; 0xc8e <vfprintf+0x12e>
     c72:	83 35       	cpi	r24, 0x53	; 83
     c74:	09 f0       	breq	.+2      	; 0xc78 <vfprintf+0x118>
     c76:	59 c0       	rjmp	.+178    	; 0xd2a <vfprintf+0x1ca>
     c78:	21 c0       	rjmp	.+66     	; 0xcbc <vfprintf+0x15c>
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 81       	ld	r24, Z
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	0e 5f       	subi	r16, 0xFE	; 254
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	88 24       	eor	r8, r8
     c86:	83 94       	inc	r8
     c88:	91 2c       	mov	r9, r1
     c8a:	53 01       	movw	r10, r6
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <vfprintf+0x154>
     c8e:	28 01       	movw	r4, r16
     c90:	f2 e0       	ldi	r31, 0x02	; 2
     c92:	4f 0e       	add	r4, r31
     c94:	51 1c       	adc	r5, r1
     c96:	f8 01       	movw	r30, r16
     c98:	a0 80       	ld	r10, Z
     c9a:	b1 80       	ldd	r11, Z+1	; 0x01
     c9c:	36 fe       	sbrs	r3, 6
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <vfprintf+0x146>
     ca0:	69 2d       	mov	r22, r9
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0x14a>
     ca6:	6f ef       	ldi	r22, 0xFF	; 255
     ca8:	7f ef       	ldi	r23, 0xFF	; 255
     caa:	c5 01       	movw	r24, r10
     cac:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <strnlen>
     cb0:	4c 01       	movw	r8, r24
     cb2:	82 01       	movw	r16, r4
     cb4:	f3 2d       	mov	r31, r3
     cb6:	ff 77       	andi	r31, 0x7F	; 127
     cb8:	3f 2e       	mov	r3, r31
     cba:	16 c0       	rjmp	.+44     	; 0xce8 <vfprintf+0x188>
     cbc:	28 01       	movw	r4, r16
     cbe:	22 e0       	ldi	r18, 0x02	; 2
     cc0:	42 0e       	add	r4, r18
     cc2:	51 1c       	adc	r5, r1
     cc4:	f8 01       	movw	r30, r16
     cc6:	a0 80       	ld	r10, Z
     cc8:	b1 80       	ldd	r11, Z+1	; 0x01
     cca:	36 fe       	sbrs	r3, 6
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <vfprintf+0x174>
     cce:	69 2d       	mov	r22, r9
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <vfprintf+0x178>
     cd4:	6f ef       	ldi	r22, 0xFF	; 255
     cd6:	7f ef       	ldi	r23, 0xFF	; 255
     cd8:	c5 01       	movw	r24, r10
     cda:	0e 94 ce 08 	call	0x119c	; 0x119c <strnlen_P>
     cde:	4c 01       	movw	r8, r24
     ce0:	f3 2d       	mov	r31, r3
     ce2:	f0 68       	ori	r31, 0x80	; 128
     ce4:	3f 2e       	mov	r3, r31
     ce6:	82 01       	movw	r16, r4
     ce8:	33 fc       	sbrc	r3, 3
     cea:	1b c0       	rjmp	.+54     	; 0xd22 <vfprintf+0x1c2>
     cec:	82 2d       	mov	r24, r2
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	88 16       	cp	r8, r24
     cf2:	99 06       	cpc	r9, r25
     cf4:	b0 f4       	brcc	.+44     	; 0xd22 <vfprintf+0x1c2>
     cf6:	b6 01       	movw	r22, r12
     cf8:	80 e2       	ldi	r24, 0x20	; 32
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     d00:	2a 94       	dec	r2
     d02:	f4 cf       	rjmp	.-24     	; 0xcec <vfprintf+0x18c>
     d04:	f5 01       	movw	r30, r10
     d06:	37 fc       	sbrc	r3, 7
     d08:	85 91       	lpm	r24, Z+
     d0a:	37 fe       	sbrs	r3, 7
     d0c:	81 91       	ld	r24, Z+
     d0e:	5f 01       	movw	r10, r30
     d10:	b6 01       	movw	r22, r12
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     d18:	21 10       	cpse	r2, r1
     d1a:	2a 94       	dec	r2
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	82 1a       	sub	r8, r18
     d20:	91 08       	sbc	r9, r1
     d22:	81 14       	cp	r8, r1
     d24:	91 04       	cpc	r9, r1
     d26:	71 f7       	brne	.-36     	; 0xd04 <vfprintf+0x1a4>
     d28:	e8 c0       	rjmp	.+464    	; 0xefa <vfprintf+0x39a>
     d2a:	84 36       	cpi	r24, 0x64	; 100
     d2c:	11 f0       	breq	.+4      	; 0xd32 <vfprintf+0x1d2>
     d2e:	89 36       	cpi	r24, 0x69	; 105
     d30:	41 f5       	brne	.+80     	; 0xd82 <vfprintf+0x222>
     d32:	f8 01       	movw	r30, r16
     d34:	37 fe       	sbrs	r3, 7
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <vfprintf+0x1e6>
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	0c 5f       	subi	r16, 0xFC	; 252
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <vfprintf+0x1f6>
     d46:	60 81       	ld	r22, Z
     d48:	71 81       	ldd	r23, Z+1	; 0x01
     d4a:	07 2e       	mov	r0, r23
     d4c:	00 0c       	add	r0, r0
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 5f       	subi	r16, 0xFE	; 254
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	f3 2d       	mov	r31, r3
     d58:	ff 76       	andi	r31, 0x6F	; 111
     d5a:	3f 2e       	mov	r3, r31
     d5c:	97 ff       	sbrs	r25, 7
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <vfprintf+0x212>
     d60:	90 95       	com	r25
     d62:	80 95       	com	r24
     d64:	70 95       	com	r23
     d66:	61 95       	neg	r22
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	8f 4f       	sbci	r24, 0xFF	; 255
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	f0 68       	ori	r31, 0x80	; 128
     d70:	3f 2e       	mov	r3, r31
     d72:	2a e0       	ldi	r18, 0x0A	; 10
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	a3 01       	movw	r20, r6
     d78:	0e 94 27 09 	call	0x124e	; 0x124e <__ultoa_invert>
     d7c:	88 2e       	mov	r8, r24
     d7e:	86 18       	sub	r8, r6
     d80:	45 c0       	rjmp	.+138    	; 0xe0c <vfprintf+0x2ac>
     d82:	85 37       	cpi	r24, 0x75	; 117
     d84:	31 f4       	brne	.+12     	; 0xd92 <vfprintf+0x232>
     d86:	23 2d       	mov	r18, r3
     d88:	2f 7e       	andi	r18, 0xEF	; 239
     d8a:	b2 2e       	mov	r11, r18
     d8c:	2a e0       	ldi	r18, 0x0A	; 10
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	25 c0       	rjmp	.+74     	; 0xddc <vfprintf+0x27c>
     d92:	93 2d       	mov	r25, r3
     d94:	99 7f       	andi	r25, 0xF9	; 249
     d96:	b9 2e       	mov	r11, r25
     d98:	8f 36       	cpi	r24, 0x6F	; 111
     d9a:	c1 f0       	breq	.+48     	; 0xdcc <vfprintf+0x26c>
     d9c:	18 f4       	brcc	.+6      	; 0xda4 <vfprintf+0x244>
     d9e:	88 35       	cpi	r24, 0x58	; 88
     da0:	79 f0       	breq	.+30     	; 0xdc0 <vfprintf+0x260>
     da2:	b5 c0       	rjmp	.+362    	; 0xf0e <vfprintf+0x3ae>
     da4:	80 37       	cpi	r24, 0x70	; 112
     da6:	19 f0       	breq	.+6      	; 0xdae <vfprintf+0x24e>
     da8:	88 37       	cpi	r24, 0x78	; 120
     daa:	21 f0       	breq	.+8      	; 0xdb4 <vfprintf+0x254>
     dac:	b0 c0       	rjmp	.+352    	; 0xf0e <vfprintf+0x3ae>
     dae:	e9 2f       	mov	r30, r25
     db0:	e0 61       	ori	r30, 0x10	; 16
     db2:	be 2e       	mov	r11, r30
     db4:	b4 fe       	sbrs	r11, 4
     db6:	0d c0       	rjmp	.+26     	; 0xdd2 <vfprintf+0x272>
     db8:	fb 2d       	mov	r31, r11
     dba:	f4 60       	ori	r31, 0x04	; 4
     dbc:	bf 2e       	mov	r11, r31
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <vfprintf+0x272>
     dc0:	34 fe       	sbrs	r3, 4
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <vfprintf+0x278>
     dc4:	29 2f       	mov	r18, r25
     dc6:	26 60       	ori	r18, 0x06	; 6
     dc8:	b2 2e       	mov	r11, r18
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <vfprintf+0x278>
     dcc:	28 e0       	ldi	r18, 0x08	; 8
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <vfprintf+0x27c>
     dd2:	20 e1       	ldi	r18, 0x10	; 16
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <vfprintf+0x27c>
     dd8:	20 e1       	ldi	r18, 0x10	; 16
     dda:	32 e0       	ldi	r19, 0x02	; 2
     ddc:	f8 01       	movw	r30, r16
     dde:	b7 fe       	sbrs	r11, 7
     de0:	07 c0       	rjmp	.+14     	; 0xdf0 <vfprintf+0x290>
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	0c 5f       	subi	r16, 0xFC	; 252
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <vfprintf+0x29c>
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 5f       	subi	r16, 0xFE	; 254
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	a3 01       	movw	r20, r6
     dfe:	0e 94 27 09 	call	0x124e	; 0x124e <__ultoa_invert>
     e02:	88 2e       	mov	r8, r24
     e04:	86 18       	sub	r8, r6
     e06:	fb 2d       	mov	r31, r11
     e08:	ff 77       	andi	r31, 0x7F	; 127
     e0a:	3f 2e       	mov	r3, r31
     e0c:	36 fe       	sbrs	r3, 6
     e0e:	0d c0       	rjmp	.+26     	; 0xe2a <vfprintf+0x2ca>
     e10:	23 2d       	mov	r18, r3
     e12:	2e 7f       	andi	r18, 0xFE	; 254
     e14:	a2 2e       	mov	r10, r18
     e16:	89 14       	cp	r8, r9
     e18:	58 f4       	brcc	.+22     	; 0xe30 <vfprintf+0x2d0>
     e1a:	34 fe       	sbrs	r3, 4
     e1c:	0b c0       	rjmp	.+22     	; 0xe34 <vfprintf+0x2d4>
     e1e:	32 fc       	sbrc	r3, 2
     e20:	09 c0       	rjmp	.+18     	; 0xe34 <vfprintf+0x2d4>
     e22:	83 2d       	mov	r24, r3
     e24:	8e 7e       	andi	r24, 0xEE	; 238
     e26:	a8 2e       	mov	r10, r24
     e28:	05 c0       	rjmp	.+10     	; 0xe34 <vfprintf+0x2d4>
     e2a:	b8 2c       	mov	r11, r8
     e2c:	a3 2c       	mov	r10, r3
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <vfprintf+0x2d6>
     e30:	b8 2c       	mov	r11, r8
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <vfprintf+0x2d6>
     e34:	b9 2c       	mov	r11, r9
     e36:	a4 fe       	sbrs	r10, 4
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <vfprintf+0x2f8>
     e3a:	fe 01       	movw	r30, r28
     e3c:	e8 0d       	add	r30, r8
     e3e:	f1 1d       	adc	r31, r1
     e40:	80 81       	ld	r24, Z
     e42:	80 33       	cpi	r24, 0x30	; 48
     e44:	21 f4       	brne	.+8      	; 0xe4e <vfprintf+0x2ee>
     e46:	9a 2d       	mov	r25, r10
     e48:	99 7e       	andi	r25, 0xE9	; 233
     e4a:	a9 2e       	mov	r10, r25
     e4c:	09 c0       	rjmp	.+18     	; 0xe60 <vfprintf+0x300>
     e4e:	a2 fe       	sbrs	r10, 2
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0x2fe>
     e52:	b3 94       	inc	r11
     e54:	b3 94       	inc	r11
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <vfprintf+0x300>
     e58:	8a 2d       	mov	r24, r10
     e5a:	86 78       	andi	r24, 0x86	; 134
     e5c:	09 f0       	breq	.+2      	; 0xe60 <vfprintf+0x300>
     e5e:	b3 94       	inc	r11
     e60:	a3 fc       	sbrc	r10, 3
     e62:	11 c0       	rjmp	.+34     	; 0xe86 <vfprintf+0x326>
     e64:	a0 fe       	sbrs	r10, 0
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <vfprintf+0x314>
     e68:	b2 14       	cp	r11, r2
     e6a:	88 f4       	brcc	.+34     	; 0xe8e <vfprintf+0x32e>
     e6c:	28 0c       	add	r2, r8
     e6e:	92 2c       	mov	r9, r2
     e70:	9b 18       	sub	r9, r11
     e72:	0e c0       	rjmp	.+28     	; 0xe90 <vfprintf+0x330>
     e74:	b2 14       	cp	r11, r2
     e76:	60 f4       	brcc	.+24     	; 0xe90 <vfprintf+0x330>
     e78:	b6 01       	movw	r22, r12
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     e82:	b3 94       	inc	r11
     e84:	f7 cf       	rjmp	.-18     	; 0xe74 <vfprintf+0x314>
     e86:	b2 14       	cp	r11, r2
     e88:	18 f4       	brcc	.+6      	; 0xe90 <vfprintf+0x330>
     e8a:	2b 18       	sub	r2, r11
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <vfprintf+0x332>
     e8e:	98 2c       	mov	r9, r8
     e90:	21 2c       	mov	r2, r1
     e92:	a4 fe       	sbrs	r10, 4
     e94:	10 c0       	rjmp	.+32     	; 0xeb6 <vfprintf+0x356>
     e96:	b6 01       	movw	r22, r12
     e98:	80 e3       	ldi	r24, 0x30	; 48
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     ea0:	a2 fe       	sbrs	r10, 2
     ea2:	17 c0       	rjmp	.+46     	; 0xed2 <vfprintf+0x372>
     ea4:	a1 fc       	sbrc	r10, 1
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <vfprintf+0x34e>
     ea8:	88 e7       	ldi	r24, 0x78	; 120
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x352>
     eae:	88 e5       	ldi	r24, 0x58	; 88
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	b6 01       	movw	r22, r12
     eb4:	0c c0       	rjmp	.+24     	; 0xece <vfprintf+0x36e>
     eb6:	8a 2d       	mov	r24, r10
     eb8:	86 78       	andi	r24, 0x86	; 134
     eba:	59 f0       	breq	.+22     	; 0xed2 <vfprintf+0x372>
     ebc:	a1 fe       	sbrs	r10, 1
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x364>
     ec0:	8b e2       	ldi	r24, 0x2B	; 43
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <vfprintf+0x366>
     ec4:	80 e2       	ldi	r24, 0x20	; 32
     ec6:	a7 fc       	sbrc	r10, 7
     ec8:	8d e2       	ldi	r24, 0x2D	; 45
     eca:	b6 01       	movw	r22, r12
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     ed2:	89 14       	cp	r8, r9
     ed4:	38 f4       	brcc	.+14     	; 0xee4 <vfprintf+0x384>
     ed6:	b6 01       	movw	r22, r12
     ed8:	80 e3       	ldi	r24, 0x30	; 48
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     ee0:	9a 94       	dec	r9
     ee2:	f7 cf       	rjmp	.-18     	; 0xed2 <vfprintf+0x372>
     ee4:	8a 94       	dec	r8
     ee6:	f3 01       	movw	r30, r6
     ee8:	e8 0d       	add	r30, r8
     eea:	f1 1d       	adc	r31, r1
     eec:	80 81       	ld	r24, Z
     eee:	b6 01       	movw	r22, r12
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     ef6:	81 10       	cpse	r8, r1
     ef8:	f5 cf       	rjmp	.-22     	; 0xee4 <vfprintf+0x384>
     efa:	22 20       	and	r2, r2
     efc:	09 f4       	brne	.+2      	; 0xf00 <vfprintf+0x3a0>
     efe:	42 ce       	rjmp	.-892    	; 0xb84 <vfprintf+0x24>
     f00:	b6 01       	movw	r22, r12
     f02:	80 e2       	ldi	r24, 0x20	; 32
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     f0a:	2a 94       	dec	r2
     f0c:	f6 cf       	rjmp	.-20     	; 0xefa <vfprintf+0x39a>
     f0e:	f6 01       	movw	r30, r12
     f10:	86 81       	ldd	r24, Z+6	; 0x06
     f12:	97 81       	ldd	r25, Z+7	; 0x07
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x3ba>
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	9f ef       	ldi	r25, 0xFF	; 255
     f1a:	2b 96       	adiw	r28, 0x0b	; 11
     f1c:	e2 e1       	ldi	r30, 0x12	; 18
     f1e:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__epilogue_restores__>

00000f22 <calloc>:
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	86 9f       	mul	r24, r22
     f2c:	80 01       	movw	r16, r0
     f2e:	87 9f       	mul	r24, r23
     f30:	10 0d       	add	r17, r0
     f32:	96 9f       	mul	r25, r22
     f34:	10 0d       	add	r17, r0
     f36:	11 24       	eor	r1, r1
     f38:	c8 01       	movw	r24, r16
     f3a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <malloc>
     f3e:	ec 01       	movw	r28, r24
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	29 f0       	breq	.+10     	; 0xf4e <calloc+0x2c>
     f44:	a8 01       	movw	r20, r16
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <memset>
     f4e:	ce 01       	movw	r24, r28
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <malloc>:
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	91 05       	cpc	r25, r1
     f66:	10 f4       	brcc	.+4      	; 0xf6c <malloc+0x12>
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <__flp>
     f70:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <__flp+0x1>
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	a0 e0       	ldi	r26, 0x00	; 0
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	30 97       	sbiw	r30, 0x00	; 0
     f7e:	19 f1       	breq	.+70     	; 0xfc6 <malloc+0x6c>
     f80:	40 81       	ld	r20, Z
     f82:	51 81       	ldd	r21, Z+1	; 0x01
     f84:	02 81       	ldd	r16, Z+2	; 0x02
     f86:	13 81       	ldd	r17, Z+3	; 0x03
     f88:	48 17       	cp	r20, r24
     f8a:	59 07       	cpc	r21, r25
     f8c:	c8 f0       	brcs	.+50     	; 0xfc0 <malloc+0x66>
     f8e:	84 17       	cp	r24, r20
     f90:	95 07       	cpc	r25, r21
     f92:	69 f4       	brne	.+26     	; 0xfae <malloc+0x54>
     f94:	10 97       	sbiw	r26, 0x00	; 0
     f96:	31 f0       	breq	.+12     	; 0xfa4 <malloc+0x4a>
     f98:	12 96       	adiw	r26, 0x02	; 2
     f9a:	0c 93       	st	X, r16
     f9c:	12 97       	sbiw	r26, 0x02	; 2
     f9e:	13 96       	adiw	r26, 0x03	; 3
     fa0:	1c 93       	st	X, r17
     fa2:	27 c0       	rjmp	.+78     	; 0xff2 <malloc+0x98>
     fa4:	00 93 94 02 	sts	0x0294, r16	; 0x800294 <__flp>
     fa8:	10 93 95 02 	sts	0x0295, r17	; 0x800295 <__flp+0x1>
     fac:	22 c0       	rjmp	.+68     	; 0xff2 <malloc+0x98>
     fae:	21 15       	cp	r18, r1
     fb0:	31 05       	cpc	r19, r1
     fb2:	19 f0       	breq	.+6      	; 0xfba <malloc+0x60>
     fb4:	42 17       	cp	r20, r18
     fb6:	53 07       	cpc	r21, r19
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <malloc+0x66>
     fba:	9a 01       	movw	r18, r20
     fbc:	bd 01       	movw	r22, r26
     fbe:	ef 01       	movw	r28, r30
     fc0:	df 01       	movw	r26, r30
     fc2:	f8 01       	movw	r30, r16
     fc4:	db cf       	rjmp	.-74     	; 0xf7c <malloc+0x22>
     fc6:	21 15       	cp	r18, r1
     fc8:	31 05       	cpc	r19, r1
     fca:	f9 f0       	breq	.+62     	; 0x100a <malloc+0xb0>
     fcc:	28 1b       	sub	r18, r24
     fce:	39 0b       	sbc	r19, r25
     fd0:	24 30       	cpi	r18, 0x04	; 4
     fd2:	31 05       	cpc	r19, r1
     fd4:	80 f4       	brcc	.+32     	; 0xff6 <malloc+0x9c>
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	61 15       	cp	r22, r1
     fdc:	71 05       	cpc	r23, r1
     fde:	21 f0       	breq	.+8      	; 0xfe8 <malloc+0x8e>
     fe0:	fb 01       	movw	r30, r22
     fe2:	93 83       	std	Z+3, r25	; 0x03
     fe4:	82 83       	std	Z+2, r24	; 0x02
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <malloc+0x96>
     fe8:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <__flp+0x1>
     fec:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <__flp>
     ff0:	fe 01       	movw	r30, r28
     ff2:	32 96       	adiw	r30, 0x02	; 2
     ff4:	44 c0       	rjmp	.+136    	; 0x107e <malloc+0x124>
     ff6:	fe 01       	movw	r30, r28
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	81 93       	st	Z+, r24
     ffe:	91 93       	st	Z+, r25
    1000:	22 50       	subi	r18, 0x02	; 2
    1002:	31 09       	sbc	r19, r1
    1004:	39 83       	std	Y+1, r19	; 0x01
    1006:	28 83       	st	Y, r18
    1008:	3a c0       	rjmp	.+116    	; 0x107e <malloc+0x124>
    100a:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <__brkval>
    100e:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <__brkval+0x1>
    1012:	23 2b       	or	r18, r19
    1014:	41 f4       	brne	.+16     	; 0x1026 <malloc+0xcc>
    1016:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    101a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    101e:	30 93 93 02 	sts	0x0293, r19	; 0x800293 <__brkval+0x1>
    1022:	20 93 92 02 	sts	0x0292, r18	; 0x800292 <__brkval>
    1026:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    102a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 f4       	brne	.+16     	; 0x1044 <malloc+0xea>
    1034:	2d b7       	in	r18, 0x3d	; 61
    1036:	3e b7       	in	r19, 0x3e	; 62
    1038:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    103c:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    1040:	24 1b       	sub	r18, r20
    1042:	35 0b       	sbc	r19, r21
    1044:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <__brkval>
    1048:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <__brkval+0x1>
    104c:	e2 17       	cp	r30, r18
    104e:	f3 07       	cpc	r31, r19
    1050:	a0 f4       	brcc	.+40     	; 0x107a <malloc+0x120>
    1052:	2e 1b       	sub	r18, r30
    1054:	3f 0b       	sbc	r19, r31
    1056:	28 17       	cp	r18, r24
    1058:	39 07       	cpc	r19, r25
    105a:	78 f0       	brcs	.+30     	; 0x107a <malloc+0x120>
    105c:	ac 01       	movw	r20, r24
    105e:	4e 5f       	subi	r20, 0xFE	; 254
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	24 17       	cp	r18, r20
    1064:	35 07       	cpc	r19, r21
    1066:	48 f0       	brcs	.+18     	; 0x107a <malloc+0x120>
    1068:	4e 0f       	add	r20, r30
    106a:	5f 1f       	adc	r21, r31
    106c:	50 93 93 02 	sts	0x0293, r21	; 0x800293 <__brkval+0x1>
    1070:	40 93 92 02 	sts	0x0292, r20	; 0x800292 <__brkval>
    1074:	81 93       	st	Z+, r24
    1076:	91 93       	st	Z+, r25
    1078:	02 c0       	rjmp	.+4      	; 0x107e <malloc+0x124>
    107a:	e0 e0       	ldi	r30, 0x00	; 0
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	cf 01       	movw	r24, r30
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <free>:
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	09 f4       	brne	.+2      	; 0x1094 <free+0xa>
    1092:	81 c0       	rjmp	.+258    	; 0x1196 <free+0x10c>
    1094:	fc 01       	movw	r30, r24
    1096:	32 97       	sbiw	r30, 0x02	; 2
    1098:	13 82       	std	Z+3, r1	; 0x03
    109a:	12 82       	std	Z+2, r1	; 0x02
    109c:	a0 91 94 02 	lds	r26, 0x0294	; 0x800294 <__flp>
    10a0:	b0 91 95 02 	lds	r27, 0x0295	; 0x800295 <__flp+0x1>
    10a4:	10 97       	sbiw	r26, 0x00	; 0
    10a6:	81 f4       	brne	.+32     	; 0x10c8 <free+0x3e>
    10a8:	20 81       	ld	r18, Z
    10aa:	31 81       	ldd	r19, Z+1	; 0x01
    10ac:	82 0f       	add	r24, r18
    10ae:	93 1f       	adc	r25, r19
    10b0:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <__brkval>
    10b4:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <__brkval+0x1>
    10b8:	28 17       	cp	r18, r24
    10ba:	39 07       	cpc	r19, r25
    10bc:	51 f5       	brne	.+84     	; 0x1112 <free+0x88>
    10be:	f0 93 93 02 	sts	0x0293, r31	; 0x800293 <__brkval+0x1>
    10c2:	e0 93 92 02 	sts	0x0292, r30	; 0x800292 <__brkval>
    10c6:	67 c0       	rjmp	.+206    	; 0x1196 <free+0x10c>
    10c8:	ed 01       	movw	r28, r26
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	ce 17       	cp	r28, r30
    10d0:	df 07       	cpc	r29, r31
    10d2:	40 f4       	brcc	.+16     	; 0x10e4 <free+0x5a>
    10d4:	4a 81       	ldd	r20, Y+2	; 0x02
    10d6:	5b 81       	ldd	r21, Y+3	; 0x03
    10d8:	9e 01       	movw	r18, r28
    10da:	41 15       	cp	r20, r1
    10dc:	51 05       	cpc	r21, r1
    10de:	f1 f0       	breq	.+60     	; 0x111c <free+0x92>
    10e0:	ea 01       	movw	r28, r20
    10e2:	f5 cf       	rjmp	.-22     	; 0x10ce <free+0x44>
    10e4:	d3 83       	std	Z+3, r29	; 0x03
    10e6:	c2 83       	std	Z+2, r28	; 0x02
    10e8:	40 81       	ld	r20, Z
    10ea:	51 81       	ldd	r21, Z+1	; 0x01
    10ec:	84 0f       	add	r24, r20
    10ee:	95 1f       	adc	r25, r21
    10f0:	c8 17       	cp	r28, r24
    10f2:	d9 07       	cpc	r29, r25
    10f4:	59 f4       	brne	.+22     	; 0x110c <free+0x82>
    10f6:	88 81       	ld	r24, Y
    10f8:	99 81       	ldd	r25, Y+1	; 0x01
    10fa:	84 0f       	add	r24, r20
    10fc:	95 1f       	adc	r25, r21
    10fe:	02 96       	adiw	r24, 0x02	; 2
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	9b 81       	ldd	r25, Y+3	; 0x03
    1108:	93 83       	std	Z+3, r25	; 0x03
    110a:	82 83       	std	Z+2, r24	; 0x02
    110c:	21 15       	cp	r18, r1
    110e:	31 05       	cpc	r19, r1
    1110:	29 f4       	brne	.+10     	; 0x111c <free+0x92>
    1112:	f0 93 95 02 	sts	0x0295, r31	; 0x800295 <__flp+0x1>
    1116:	e0 93 94 02 	sts	0x0294, r30	; 0x800294 <__flp>
    111a:	3d c0       	rjmp	.+122    	; 0x1196 <free+0x10c>
    111c:	e9 01       	movw	r28, r18
    111e:	fb 83       	std	Y+3, r31	; 0x03
    1120:	ea 83       	std	Y+2, r30	; 0x02
    1122:	49 91       	ld	r20, Y+
    1124:	59 91       	ld	r21, Y+
    1126:	c4 0f       	add	r28, r20
    1128:	d5 1f       	adc	r29, r21
    112a:	ec 17       	cp	r30, r28
    112c:	fd 07       	cpc	r31, r29
    112e:	61 f4       	brne	.+24     	; 0x1148 <free+0xbe>
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	84 0f       	add	r24, r20
    1136:	95 1f       	adc	r25, r21
    1138:	02 96       	adiw	r24, 0x02	; 2
    113a:	e9 01       	movw	r28, r18
    113c:	99 83       	std	Y+1, r25	; 0x01
    113e:	88 83       	st	Y, r24
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	93 81       	ldd	r25, Z+3	; 0x03
    1144:	9b 83       	std	Y+3, r25	; 0x03
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	e0 e0       	ldi	r30, 0x00	; 0
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	12 96       	adiw	r26, 0x02	; 2
    114e:	8d 91       	ld	r24, X+
    1150:	9c 91       	ld	r25, X
    1152:	13 97       	sbiw	r26, 0x03	; 3
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	19 f0       	breq	.+6      	; 0x115e <free+0xd4>
    1158:	fd 01       	movw	r30, r26
    115a:	dc 01       	movw	r26, r24
    115c:	f7 cf       	rjmp	.-18     	; 0x114c <free+0xc2>
    115e:	8d 91       	ld	r24, X+
    1160:	9c 91       	ld	r25, X
    1162:	11 97       	sbiw	r26, 0x01	; 1
    1164:	9d 01       	movw	r18, r26
    1166:	2e 5f       	subi	r18, 0xFE	; 254
    1168:	3f 4f       	sbci	r19, 0xFF	; 255
    116a:	82 0f       	add	r24, r18
    116c:	93 1f       	adc	r25, r19
    116e:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <__brkval>
    1172:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <__brkval+0x1>
    1176:	28 17       	cp	r18, r24
    1178:	39 07       	cpc	r19, r25
    117a:	69 f4       	brne	.+26     	; 0x1196 <free+0x10c>
    117c:	30 97       	sbiw	r30, 0x00	; 0
    117e:	29 f4       	brne	.+10     	; 0x118a <free+0x100>
    1180:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <__flp+0x1>
    1184:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <__flp>
    1188:	02 c0       	rjmp	.+4      	; 0x118e <free+0x104>
    118a:	13 82       	std	Z+3, r1	; 0x03
    118c:	12 82       	std	Z+2, r1	; 0x02
    118e:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <__brkval+0x1>
    1192:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <__brkval>
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <strnlen_P>:
    119c:	fc 01       	movw	r30, r24
    119e:	05 90       	lpm	r0, Z+
    11a0:	61 50       	subi	r22, 0x01	; 1
    11a2:	70 40       	sbci	r23, 0x00	; 0
    11a4:	01 10       	cpse	r0, r1
    11a6:	d8 f7       	brcc	.-10     	; 0x119e <strnlen_P+0x2>
    11a8:	80 95       	com	r24
    11aa:	90 95       	com	r25
    11ac:	8e 0f       	add	r24, r30
    11ae:	9f 1f       	adc	r25, r31
    11b0:	08 95       	ret

000011b2 <memset>:
    11b2:	dc 01       	movw	r26, r24
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <memset+0x6>
    11b6:	6d 93       	st	X+, r22
    11b8:	41 50       	subi	r20, 0x01	; 1
    11ba:	50 40       	sbci	r21, 0x00	; 0
    11bc:	e0 f7       	brcc	.-8      	; 0x11b6 <memset+0x4>
    11be:	08 95       	ret

000011c0 <strnlen>:
    11c0:	fc 01       	movw	r30, r24
    11c2:	61 50       	subi	r22, 0x01	; 1
    11c4:	70 40       	sbci	r23, 0x00	; 0
    11c6:	01 90       	ld	r0, Z+
    11c8:	01 10       	cpse	r0, r1
    11ca:	d8 f7       	brcc	.-10     	; 0x11c2 <strnlen+0x2>
    11cc:	80 95       	com	r24
    11ce:	90 95       	com	r25
    11d0:	8e 0f       	add	r24, r30
    11d2:	9f 1f       	adc	r25, r31
    11d4:	08 95       	ret

000011d6 <fputc>:
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	fb 01       	movw	r30, r22
    11e0:	23 81       	ldd	r18, Z+3	; 0x03
    11e2:	21 fd       	sbrc	r18, 1
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <fputc+0x16>
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	9f ef       	ldi	r25, 0xFF	; 255
    11ea:	2c c0       	rjmp	.+88     	; 0x1244 <fputc+0x6e>
    11ec:	22 ff       	sbrs	r18, 2
    11ee:	16 c0       	rjmp	.+44     	; 0x121c <fputc+0x46>
    11f0:	46 81       	ldd	r20, Z+6	; 0x06
    11f2:	57 81       	ldd	r21, Z+7	; 0x07
    11f4:	24 81       	ldd	r18, Z+4	; 0x04
    11f6:	35 81       	ldd	r19, Z+5	; 0x05
    11f8:	42 17       	cp	r20, r18
    11fa:	53 07       	cpc	r21, r19
    11fc:	44 f4       	brge	.+16     	; 0x120e <fputc+0x38>
    11fe:	a0 81       	ld	r26, Z
    1200:	b1 81       	ldd	r27, Z+1	; 0x01
    1202:	9d 01       	movw	r18, r26
    1204:	2f 5f       	subi	r18, 0xFF	; 255
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	31 83       	std	Z+1, r19	; 0x01
    120a:	20 83       	st	Z, r18
    120c:	8c 93       	st	X, r24
    120e:	26 81       	ldd	r18, Z+6	; 0x06
    1210:	37 81       	ldd	r19, Z+7	; 0x07
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	37 83       	std	Z+7, r19	; 0x07
    1218:	26 83       	std	Z+6, r18	; 0x06
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <fputc+0x6e>
    121c:	8b 01       	movw	r16, r22
    121e:	ec 01       	movw	r28, r24
    1220:	fb 01       	movw	r30, r22
    1222:	00 84       	ldd	r0, Z+8	; 0x08
    1224:	f1 85       	ldd	r31, Z+9	; 0x09
    1226:	e0 2d       	mov	r30, r0
    1228:	09 95       	icall
    122a:	89 2b       	or	r24, r25
    122c:	e1 f6       	brne	.-72     	; 0x11e6 <fputc+0x10>
    122e:	d8 01       	movw	r26, r16
    1230:	16 96       	adiw	r26, 0x06	; 6
    1232:	8d 91       	ld	r24, X+
    1234:	9c 91       	ld	r25, X
    1236:	17 97       	sbiw	r26, 0x07	; 7
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	17 96       	adiw	r26, 0x07	; 7
    123c:	9c 93       	st	X, r25
    123e:	8e 93       	st	-X, r24
    1240:	16 97       	sbiw	r26, 0x06	; 6
    1242:	ce 01       	movw	r24, r28
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <__ultoa_invert>:
    124e:	fa 01       	movw	r30, r20
    1250:	aa 27       	eor	r26, r26
    1252:	28 30       	cpi	r18, 0x08	; 8
    1254:	51 f1       	breq	.+84     	; 0x12aa <__ultoa_invert+0x5c>
    1256:	20 31       	cpi	r18, 0x10	; 16
    1258:	81 f1       	breq	.+96     	; 0x12ba <__ultoa_invert+0x6c>
    125a:	e8 94       	clt
    125c:	6f 93       	push	r22
    125e:	6e 7f       	andi	r22, 0xFE	; 254
    1260:	6e 5f       	subi	r22, 0xFE	; 254
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	af 4f       	sbci	r26, 0xFF	; 255
    126a:	b1 e0       	ldi	r27, 0x01	; 1
    126c:	3e d0       	rcall	.+124    	; 0x12ea <__ultoa_invert+0x9c>
    126e:	b4 e0       	ldi	r27, 0x04	; 4
    1270:	3c d0       	rcall	.+120    	; 0x12ea <__ultoa_invert+0x9c>
    1272:	67 0f       	add	r22, r23
    1274:	78 1f       	adc	r23, r24
    1276:	89 1f       	adc	r24, r25
    1278:	9a 1f       	adc	r25, r26
    127a:	a1 1d       	adc	r26, r1
    127c:	68 0f       	add	r22, r24
    127e:	79 1f       	adc	r23, r25
    1280:	8a 1f       	adc	r24, r26
    1282:	91 1d       	adc	r25, r1
    1284:	a1 1d       	adc	r26, r1
    1286:	6a 0f       	add	r22, r26
    1288:	71 1d       	adc	r23, r1
    128a:	81 1d       	adc	r24, r1
    128c:	91 1d       	adc	r25, r1
    128e:	a1 1d       	adc	r26, r1
    1290:	20 d0       	rcall	.+64     	; 0x12d2 <__ultoa_invert+0x84>
    1292:	09 f4       	brne	.+2      	; 0x1296 <__ultoa_invert+0x48>
    1294:	68 94       	set
    1296:	3f 91       	pop	r19
    1298:	2a e0       	ldi	r18, 0x0A	; 10
    129a:	26 9f       	mul	r18, r22
    129c:	11 24       	eor	r1, r1
    129e:	30 19       	sub	r19, r0
    12a0:	30 5d       	subi	r19, 0xD0	; 208
    12a2:	31 93       	st	Z+, r19
    12a4:	de f6       	brtc	.-74     	; 0x125c <__ultoa_invert+0xe>
    12a6:	cf 01       	movw	r24, r30
    12a8:	08 95       	ret
    12aa:	46 2f       	mov	r20, r22
    12ac:	47 70       	andi	r20, 0x07	; 7
    12ae:	40 5d       	subi	r20, 0xD0	; 208
    12b0:	41 93       	st	Z+, r20
    12b2:	b3 e0       	ldi	r27, 0x03	; 3
    12b4:	0f d0       	rcall	.+30     	; 0x12d4 <__ultoa_invert+0x86>
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <__ultoa_invert+0x5c>
    12b8:	f6 cf       	rjmp	.-20     	; 0x12a6 <__ultoa_invert+0x58>
    12ba:	46 2f       	mov	r20, r22
    12bc:	4f 70       	andi	r20, 0x0F	; 15
    12be:	40 5d       	subi	r20, 0xD0	; 208
    12c0:	4a 33       	cpi	r20, 0x3A	; 58
    12c2:	18 f0       	brcs	.+6      	; 0x12ca <__ultoa_invert+0x7c>
    12c4:	49 5d       	subi	r20, 0xD9	; 217
    12c6:	31 fd       	sbrc	r19, 1
    12c8:	40 52       	subi	r20, 0x20	; 32
    12ca:	41 93       	st	Z+, r20
    12cc:	02 d0       	rcall	.+4      	; 0x12d2 <__ultoa_invert+0x84>
    12ce:	a9 f7       	brne	.-22     	; 0x12ba <__ultoa_invert+0x6c>
    12d0:	ea cf       	rjmp	.-44     	; 0x12a6 <__ultoa_invert+0x58>
    12d2:	b4 e0       	ldi	r27, 0x04	; 4
    12d4:	a6 95       	lsr	r26
    12d6:	97 95       	ror	r25
    12d8:	87 95       	ror	r24
    12da:	77 95       	ror	r23
    12dc:	67 95       	ror	r22
    12de:	ba 95       	dec	r27
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__ultoa_invert+0x86>
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 05       	cpc	r22, r1
    12e6:	71 05       	cpc	r23, r1
    12e8:	08 95       	ret
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
    12ee:	0a 2e       	mov	r0, r26
    12f0:	06 94       	lsr	r0
    12f2:	57 95       	ror	r21
    12f4:	47 95       	ror	r20
    12f6:	37 95       	ror	r19
    12f8:	27 95       	ror	r18
    12fa:	ba 95       	dec	r27
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__ultoa_invert+0xa2>
    12fe:	62 0f       	add	r22, r18
    1300:	73 1f       	adc	r23, r19
    1302:	84 1f       	adc	r24, r20
    1304:	95 1f       	adc	r25, r21
    1306:	a0 1d       	adc	r26, r0
    1308:	08 95       	ret

0000130a <__divmodsi4>:
    130a:	05 2e       	mov	r0, r21
    130c:	97 fb       	bst	r25, 7
    130e:	1e f4       	brtc	.+6      	; 0x1316 <__divmodsi4+0xc>
    1310:	00 94       	com	r0
    1312:	0e 94 9c 09 	call	0x1338	; 0x1338 <__negsi2>
    1316:	57 fd       	sbrc	r21, 7
    1318:	07 d0       	rcall	.+14     	; 0x1328 <__divmodsi4_neg2>
    131a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__udivmodsi4>
    131e:	07 fc       	sbrc	r0, 7
    1320:	03 d0       	rcall	.+6      	; 0x1328 <__divmodsi4_neg2>
    1322:	4e f4       	brtc	.+18     	; 0x1336 <__divmodsi4_exit>
    1324:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__negsi2>

00001328 <__divmodsi4_neg2>:
    1328:	50 95       	com	r21
    132a:	40 95       	com	r20
    132c:	30 95       	com	r19
    132e:	21 95       	neg	r18
    1330:	3f 4f       	sbci	r19, 0xFF	; 255
    1332:	4f 4f       	sbci	r20, 0xFF	; 255
    1334:	5f 4f       	sbci	r21, 0xFF	; 255

00001336 <__divmodsi4_exit>:
    1336:	08 95       	ret

00001338 <__negsi2>:
    1338:	90 95       	com	r25
    133a:	80 95       	com	r24
    133c:	70 95       	com	r23
    133e:	61 95       	neg	r22
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	8f 4f       	sbci	r24, 0xFF	; 255
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    1346:	08 95       	ret

00001348 <__muluhisi3>:
    1348:	0e 94 10 0a 	call	0x1420	; 0x1420 <__umulhisi3>
    134c:	a5 9f       	mul	r26, r21
    134e:	90 0d       	add	r25, r0
    1350:	b4 9f       	mul	r27, r20
    1352:	90 0d       	add	r25, r0
    1354:	a4 9f       	mul	r26, r20
    1356:	80 0d       	add	r24, r0
    1358:	91 1d       	adc	r25, r1
    135a:	11 24       	eor	r1, r1
    135c:	08 95       	ret

0000135e <__mulshisi3>:
    135e:	b7 ff       	sbrs	r27, 7
    1360:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__muluhisi3>

00001364 <__mulohisi3>:
    1364:	0e 94 a4 09 	call	0x1348	; 0x1348 <__muluhisi3>
    1368:	82 1b       	sub	r24, r18
    136a:	93 0b       	sbc	r25, r19
    136c:	08 95       	ret

0000136e <__prologue_saves__>:
    136e:	2f 92       	push	r2
    1370:	3f 92       	push	r3
    1372:	4f 92       	push	r4
    1374:	5f 92       	push	r5
    1376:	6f 92       	push	r6
    1378:	7f 92       	push	r7
    137a:	8f 92       	push	r8
    137c:	9f 92       	push	r9
    137e:	af 92       	push	r10
    1380:	bf 92       	push	r11
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	ca 1b       	sub	r28, r26
    1398:	db 0b       	sbc	r29, r27
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	09 94       	ijmp

000013a6 <__epilogue_restores__>:
    13a6:	2a 88       	ldd	r2, Y+18	; 0x12
    13a8:	39 88       	ldd	r3, Y+17	; 0x11
    13aa:	48 88       	ldd	r4, Y+16	; 0x10
    13ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    13b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    13b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    13b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    13b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    13b8:	b9 84       	ldd	r11, Y+9	; 0x09
    13ba:	c8 84       	ldd	r12, Y+8	; 0x08
    13bc:	df 80       	ldd	r13, Y+7	; 0x07
    13be:	ee 80       	ldd	r14, Y+6	; 0x06
    13c0:	fd 80       	ldd	r15, Y+5	; 0x05
    13c2:	0c 81       	ldd	r16, Y+4	; 0x04
    13c4:	1b 81       	ldd	r17, Y+3	; 0x03
    13c6:	aa 81       	ldd	r26, Y+2	; 0x02
    13c8:	b9 81       	ldd	r27, Y+1	; 0x01
    13ca:	ce 0f       	add	r28, r30
    13cc:	d1 1d       	adc	r29, r1
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	ed 01       	movw	r28, r26
    13da:	08 95       	ret

000013dc <__udivmodsi4>:
    13dc:	a1 e2       	ldi	r26, 0x21	; 33
    13de:	1a 2e       	mov	r1, r26
    13e0:	aa 1b       	sub	r26, r26
    13e2:	bb 1b       	sub	r27, r27
    13e4:	fd 01       	movw	r30, r26
    13e6:	0d c0       	rjmp	.+26     	; 0x1402 <__udivmodsi4_ep>

000013e8 <__udivmodsi4_loop>:
    13e8:	aa 1f       	adc	r26, r26
    13ea:	bb 1f       	adc	r27, r27
    13ec:	ee 1f       	adc	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	a2 17       	cp	r26, r18
    13f2:	b3 07       	cpc	r27, r19
    13f4:	e4 07       	cpc	r30, r20
    13f6:	f5 07       	cpc	r31, r21
    13f8:	20 f0       	brcs	.+8      	; 0x1402 <__udivmodsi4_ep>
    13fa:	a2 1b       	sub	r26, r18
    13fc:	b3 0b       	sbc	r27, r19
    13fe:	e4 0b       	sbc	r30, r20
    1400:	f5 0b       	sbc	r31, r21

00001402 <__udivmodsi4_ep>:
    1402:	66 1f       	adc	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	88 1f       	adc	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	1a 94       	dec	r1
    140c:	69 f7       	brne	.-38     	; 0x13e8 <__udivmodsi4_loop>
    140e:	60 95       	com	r22
    1410:	70 95       	com	r23
    1412:	80 95       	com	r24
    1414:	90 95       	com	r25
    1416:	9b 01       	movw	r18, r22
    1418:	ac 01       	movw	r20, r24
    141a:	bd 01       	movw	r22, r26
    141c:	cf 01       	movw	r24, r30
    141e:	08 95       	ret

00001420 <__umulhisi3>:
    1420:	a2 9f       	mul	r26, r18
    1422:	b0 01       	movw	r22, r0
    1424:	b3 9f       	mul	r27, r19
    1426:	c0 01       	movw	r24, r0
    1428:	a3 9f       	mul	r26, r19
    142a:	70 0d       	add	r23, r0
    142c:	81 1d       	adc	r24, r1
    142e:	11 24       	eor	r1, r1
    1430:	91 1d       	adc	r25, r1
    1432:	b2 9f       	mul	r27, r18
    1434:	70 0d       	add	r23, r0
    1436:	81 1d       	adc	r24, r1
    1438:	11 24       	eor	r1, r1
    143a:	91 1d       	adc	r25, r1
    143c:	08 95       	ret

0000143e <_exit>:
    143e:	f8 94       	cli

00001440 <__stop_program>:
    1440:	ff cf       	rjmp	.-2      	; 0x1440 <__stop_program>
