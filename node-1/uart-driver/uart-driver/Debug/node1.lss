
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022a  00800100  000019e4  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080032a  0080032a  00001ca2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ca2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026cd  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a9  00000000  00000000  00004681  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001551  00000000  00000000  0000592a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00006e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083e  00000000  00000000  0000745c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001181  00000000  00000000  00007c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00008e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a2 02 	jmp	0x544	; 0x544 <__ctors_end>
       4:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
       8:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
       c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      10:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      14:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      18:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      1c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      20:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      24:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      28:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      2c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      30:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      34:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      38:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      3c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      40:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      44:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      48:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      4c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      50:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      54:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      58:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      5c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      60:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      64:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      68:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      6c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5f       	subi	r16, 0xF0	; 240
      78:	00 00       	nop
      7a:	00 07       	cpc	r16, r16
      7c:	00 07       	cpc	r16, r16
      7e:	00 14       	cp	r0, r0
      80:	7f 14       	cp	r7, r15
      82:	7f 14       	cp	r7, r15
      84:	24 2a       	or	r2, r20
      86:	7f 2a       	or	r7, r31
      88:	12 23       	and	r17, r18
      8a:	13 08       	sbc	r1, r3
      8c:	64 62       	ori	r22, 0x24	; 36
      8e:	36 49       	sbci	r19, 0x96	; 150
      90:	55 22       	and	r5, r21
      92:	50 00       	.word	0x0050	; ????
      94:	05 03       	mulsu	r16, r21
      96:	00 00       	nop
      98:	00 1c       	adc	r0, r0
      9a:	22 41       	sbci	r18, 0x12	; 18
      9c:	00 00       	nop
      9e:	41 22       	and	r4, r17
      a0:	1c 00       	.word	0x001c	; ????
      a2:	08 2a       	or	r0, r24
      a4:	1c 2a       	or	r1, r28
      a6:	08 08       	sbc	r0, r8
      a8:	08 3e       	cpi	r16, 0xE8	; 232
      aa:	08 08       	sbc	r0, r8
      ac:	00 50       	subi	r16, 0x00	; 0
      ae:	30 00       	.word	0x0030	; ????
      b0:	00 08       	sbc	r0, r0
      b2:	08 08       	sbc	r0, r8
      b4:	08 08       	sbc	r0, r8
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 02       	muls	r16, r20
      c0:	3e 51       	subi	r19, 0x1E	; 30
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	3e 00       	.word	0x003e	; ????
      c6:	42 7f       	andi	r20, 0xF2	; 242
      c8:	40 00       	.word	0x0040	; ????
      ca:	42 61       	ori	r20, 0x12	; 18
      cc:	51 49       	sbci	r21, 0x91	; 145
      ce:	46 21       	and	r20, r6
      d0:	41 45       	sbci	r20, 0x51	; 81
      d2:	4b 31       	cpi	r20, 0x1B	; 27
      d4:	18 14       	cp	r1, r8
      d6:	12 7f       	andi	r17, 0xF2	; 242
      d8:	10 27       	eor	r17, r16
      da:	45 45       	sbci	r20, 0x55	; 85
      dc:	45 39       	cpi	r20, 0x95	; 149
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	49 49       	sbci	r20, 0x99	; 153
      e2:	30 01       	movw	r6, r0
      e4:	71 09       	sbc	r23, r1
      e6:	05 03       	mulsu	r16, r21
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	49 49       	sbci	r20, 0x99	; 153
      ec:	36 06       	cpc	r3, r22
      ee:	49 49       	sbci	r20, 0x99	; 153
      f0:	29 1e       	adc	r2, r25
      f2:	00 36       	cpi	r16, 0x60	; 96
      f4:	36 00       	.word	0x0036	; ????
      f6:	00 00       	nop
      f8:	56 36       	cpi	r21, 0x66	; 102
      fa:	00 00       	nop
      fc:	00 08       	sbc	r0, r0
      fe:	14 22       	and	r1, r20
     100:	41 14       	cp	r4, r1
     102:	14 14       	cp	r1, r4
     104:	14 14       	cp	r1, r4
     106:	41 22       	and	r4, r17
     108:	14 08       	sbc	r1, r4
     10a:	00 02       	muls	r16, r16
     10c:	01 51       	subi	r16, 0x11	; 17
     10e:	09 06       	cpc	r0, r25
     110:	32 49       	sbci	r19, 0x92	; 146
     112:	79 41       	sbci	r23, 0x19	; 25
     114:	3e 7e       	andi	r19, 0xEE	; 238
     116:	11 11       	cpse	r17, r1
     118:	11 7e       	andi	r17, 0xE1	; 225
     11a:	7f 49       	sbci	r23, 0x9F	; 159
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	36 3e       	cpi	r19, 0xE6	; 230
     120:	41 41       	sbci	r20, 0x11	; 17
     122:	41 22       	and	r4, r17
     124:	7f 41       	sbci	r23, 0x1F	; 31
     126:	41 22       	and	r4, r17
     128:	1c 7f       	andi	r17, 0xFC	; 252
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	49 41       	sbci	r20, 0x19	; 25
     12e:	7f 09       	sbc	r23, r15
     130:	09 01       	movw	r0, r18
     132:	01 3e       	cpi	r16, 0xE1	; 225
     134:	41 41       	sbci	r20, 0x11	; 17
     136:	51 32       	cpi	r21, 0x21	; 33
     138:	7f 08       	sbc	r7, r15
     13a:	08 08       	sbc	r0, r8
     13c:	7f 00       	.word	0x007f	; ????
     13e:	41 7f       	andi	r20, 0xF1	; 241
     140:	41 00       	.word	0x0041	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	41 3f       	cpi	r20, 0xF1	; 241
     146:	01 7f       	andi	r16, 0xF1	; 241
     148:	08 14       	cp	r0, r8
     14a:	22 41       	sbci	r18, 0x12	; 18
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	40 7f       	andi	r20, 0xF0	; 240
     152:	02 04       	cpc	r0, r2
     154:	02 7f       	andi	r16, 0xF2	; 242
     156:	7f 04       	cpc	r7, r15
     158:	08 10       	cpse	r0, r8
     15a:	7f 3e       	cpi	r23, 0xEF	; 239
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 3e       	cpi	r20, 0xE1	; 225
     160:	7f 09       	sbc	r23, r15
     162:	09 09       	sbc	r16, r9
     164:	06 3e       	cpi	r16, 0xE6	; 230
     166:	41 51       	subi	r20, 0x11	; 17
     168:	21 5e       	subi	r18, 0xE1	; 225
     16a:	7f 09       	sbc	r23, r15
     16c:	19 29       	or	r17, r9
     16e:	46 46       	sbci	r20, 0x66	; 102
     170:	49 49       	sbci	r20, 0x99	; 153
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	01 01       	movw	r0, r2
     176:	7f 01       	movw	r14, r30
     178:	01 3f       	cpi	r16, 0xF1	; 241
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	40 3f       	cpi	r20, 0xF0	; 240
     17e:	1f 20       	and	r1, r15
     180:	40 20       	and	r4, r0
     182:	1f 7f       	andi	r17, 0xFF	; 255
     184:	20 18       	sub	r2, r0
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	63 14       	cp	r6, r3
     18a:	08 14       	cp	r0, r8
     18c:	63 03       	mulsu	r22, r19
     18e:	04 78       	andi	r16, 0x84	; 132
     190:	04 03       	mulsu	r16, r20
     192:	61 51       	subi	r22, 0x11	; 17
     194:	49 45       	sbci	r20, 0x59	; 89
     196:	43 00       	.word	0x0043	; ????
     198:	00 7f       	andi	r16, 0xF0	; 240
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	02 04       	cpc	r0, r2
     19e:	08 10       	cpse	r0, r8
     1a0:	20 41       	sbci	r18, 0x10	; 16
     1a2:	41 7f       	andi	r20, 0xF1	; 241
     1a4:	00 00       	nop
     1a6:	04 02       	muls	r16, r20
     1a8:	01 02       	muls	r16, r17
     1aa:	04 40       	sbci	r16, 0x04	; 4
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 40       	sbci	r20, 0x00	; 0
     1b0:	00 01       	movw	r0, r0
     1b2:	02 04       	cpc	r0, r2
     1b4:	00 20       	and	r0, r0
     1b6:	54 54       	subi	r21, 0x44	; 68
     1b8:	54 78       	andi	r21, 0x84	; 132
     1ba:	7f 48       	sbci	r23, 0x8F	; 143
     1bc:	44 44       	sbci	r20, 0x44	; 68
     1be:	38 38       	cpi	r19, 0x88	; 136
     1c0:	44 44       	sbci	r20, 0x44	; 68
     1c2:	44 20       	and	r4, r4
     1c4:	38 44       	sbci	r19, 0x48	; 72
     1c6:	44 48       	sbci	r20, 0x84	; 132
     1c8:	7f 38       	cpi	r23, 0x8F	; 143
     1ca:	54 54       	subi	r21, 0x44	; 68
     1cc:	54 18       	sub	r5, r4
     1ce:	08 7e       	andi	r16, 0xE8	; 232
     1d0:	09 01       	movw	r0, r18
     1d2:	02 08       	sbc	r0, r2
     1d4:	14 54       	subi	r17, 0x44	; 68
     1d6:	54 3c       	cpi	r21, 0xC4	; 196
     1d8:	7f 08       	sbc	r7, r15
     1da:	04 04       	cpc	r0, r4
     1dc:	78 00       	.word	0x0078	; ????
     1de:	44 7d       	andi	r20, 0xD4	; 212
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	44 3d       	cpi	r20, 0xD4	; 212
     1e6:	00 00       	nop
     1e8:	7f 10       	cpse	r7, r15
     1ea:	28 44       	sbci	r18, 0x48	; 72
     1ec:	00 41       	sbci	r16, 0x10	; 16
     1ee:	7f 40       	sbci	r23, 0x0F	; 15
     1f0:	00 7c       	andi	r16, 0xC0	; 192
     1f2:	04 18       	sub	r0, r4
     1f4:	04 78       	andi	r16, 0x84	; 132
     1f6:	7c 08       	sbc	r7, r12
     1f8:	04 04       	cpc	r0, r4
     1fa:	78 38       	cpi	r23, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 38       	cpi	r20, 0x84	; 132
     200:	7c 14       	cp	r7, r12
     202:	14 14       	cp	r1, r4
     204:	08 08       	sbc	r0, r8
     206:	14 14       	cp	r1, r4
     208:	18 7c       	andi	r17, 0xC8	; 200
     20a:	7c 08       	sbc	r7, r12
     20c:	04 04       	cpc	r0, r4
     20e:	08 48       	sbci	r16, 0x88	; 136
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 20       	and	r5, r4
     214:	04 3f       	cpi	r16, 0xF4	; 244
     216:	44 40       	sbci	r20, 0x04	; 4
     218:	20 3c       	cpi	r18, 0xC0	; 192
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	20 7c       	andi	r18, 0xC0	; 192
     21e:	1c 20       	and	r1, r12
     220:	40 20       	and	r4, r0
     222:	1c 3c       	cpi	r17, 0xCC	; 204
     224:	40 30       	cpi	r20, 0x00	; 0
     226:	40 3c       	cpi	r20, 0xC0	; 192
     228:	44 28       	or	r4, r4
     22a:	10 28       	or	r1, r0
     22c:	44 0c       	add	r4, r4
     22e:	50 50       	subi	r21, 0x00	; 0
     230:	50 3c       	cpi	r21, 0xC0	; 192
     232:	44 64       	ori	r20, 0x44	; 68
     234:	54 4c       	sbci	r21, 0xC4	; 196
     236:	44 00       	.word	0x0044	; ????
     238:	08 36       	cpi	r16, 0x68	; 104
     23a:	41 00       	.word	0x0041	; ????
     23c:	00 00       	nop
     23e:	7f 00       	.word	0x007f	; ????
     240:	00 00       	nop
     242:	41 36       	cpi	r20, 0x61	; 97
     244:	08 00       	.word	0x0008	; ????
     246:	02 01       	movw	r0, r4
     248:	03 02       	muls	r16, r19
     24a:	01 00       	Address 0x0000024a is out of bounds.
.word	0xffff	; ????

0000024b <font8>:
	...
     253:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     263:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     273:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     283:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     293:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     2a3:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     2b3:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     2c3:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     2d3:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     2e3:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     2f3:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     303:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     313:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     323:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     333:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     343:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     353:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     363:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     373:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     383:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     393:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     3a3:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     3b3:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     3c3:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     3d3:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     3e3:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     3f3:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     403:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     413:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     423:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     433:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     443:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     453:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     463:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     473:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     483:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     493:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     4a3:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     4b3:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     4c3:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     4d3:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     4e3:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     4f3:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     503:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     513:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     523:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     533:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

00000544 <__ctors_end>:
     544:	11 24       	eor	r1, r1
     546:	1f be       	out	0x3f, r1	; 63
     548:	cf ef       	ldi	r28, 0xFF	; 255
     54a:	d4 e0       	ldi	r29, 0x04	; 4
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	cd bf       	out	0x3d, r28	; 61

00000550 <__do_copy_data>:
     550:	13 e0       	ldi	r17, 0x03	; 3
     552:	a0 e0       	ldi	r26, 0x00	; 0
     554:	b1 e0       	ldi	r27, 0x01	; 1
     556:	e4 ee       	ldi	r30, 0xE4	; 228
     558:	f9 e1       	ldi	r31, 0x19	; 25
     55a:	02 c0       	rjmp	.+4      	; 0x560 <__do_copy_data+0x10>
     55c:	05 90       	lpm	r0, Z+
     55e:	0d 92       	st	X+, r0
     560:	aa 32       	cpi	r26, 0x2A	; 42
     562:	b1 07       	cpc	r27, r17
     564:	d9 f7       	brne	.-10     	; 0x55c <__do_copy_data+0xc>

00000566 <__do_clear_bss>:
     566:	23 e0       	ldi	r18, 0x03	; 3
     568:	aa e2       	ldi	r26, 0x2A	; 42
     56a:	b3 e0       	ldi	r27, 0x03	; 3
     56c:	01 c0       	rjmp	.+2      	; 0x570 <.do_clear_bss_start>

0000056e <.do_clear_bss_loop>:
     56e:	1d 92       	st	X+, r1

00000570 <.do_clear_bss_start>:
     570:	a4 33       	cpi	r26, 0x34	; 52
     572:	b2 07       	cpc	r27, r18
     574:	e1 f7       	brne	.-8      	; 0x56e <.do_clear_bss_loop>
     576:	0e 94 44 05 	call	0xa88	; 0xa88 <main>
     57a:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <_exit>

0000057e <__bad_interrupt>:
     57e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000582 <adc_init>:
	//TCCR3A |= (1 << WGM31);
	//TCCR3A |= (1 << WGM30);

void adc_init() {
	//All code in function inits pwm
	OCR3A = 0x02;
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     58a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
	DDRD |= (1 << PD4);
     58e:	81 b3       	in	r24, 0x11	; 17
     590:	80 61       	ori	r24, 0x10	; 16
     592:	81 bb       	out	0x11, r24	; 17
	//TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
	TCCR3B |= (1 << WGM32); //Setting CTC
     594:	ea e8       	ldi	r30, 0x8A	; 138
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	88 60       	ori	r24, 0x08	; 8
     59c:	80 83       	st	Z, r24
	TCCR3A |= (1 << COM3A0); //Clear OC3A on Compare Match, set OC3A at TOP. or toggle or smth.
     59e:	ab e8       	ldi	r26, 0x8B	; 139
     5a0:	b0 e0       	ldi	r27, 0x00	; 0
     5a2:	8c 91       	ld	r24, X
     5a4:	80 64       	ori	r24, 0x40	; 64
     5a6:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS30);
     5a8:	80 81       	ld	r24, Z
     5aa:	81 60       	ori	r24, 0x01	; 1
     5ac:	80 83       	st	Z, r24
	printf("-PWM init-\n");
     5ae:	8a e0       	ldi	r24, 0x0A	; 10
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
     5b6:	08 95       	ret

000005b8 <adc_read>:
}

uint8_t adc_read(uint8_t channel) {
	volatile uint8_t *ADC = (uint8_t*)0x1401;
	*ADC = 1;
     5b8:	e1 e0       	ldi	r30, 0x01	; 1
     5ba:	f4 e1       	ldi	r31, 0x14	; 20
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	90 83       	st	Z, r25
	
	int ch0 = *ADC;
     5c0:	20 81       	ld	r18, Z
	int ch1 = *ADC;
     5c2:	90 81       	ld	r25, Z
	int ch2 = *ADC;
     5c4:	40 81       	ld	r20, Z
	int ch3 = *ADC;
     5c6:	30 81       	ld	r19, Z
	
	switch(channel) {
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	c1 f0       	breq	.+48     	; 0x5fc <adc_read+0x44>
     5cc:	b0 f0       	brcs	.+44     	; 0x5fa <adc_read+0x42>
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <adc_read+0x20>
     5d2:	83 30       	cpi	r24, 0x03	; 3
     5d4:	19 f0       	breq	.+6      	; 0x5dc <adc_read+0x24>
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <adc_read+0x28>
		case 0:
			return ch0;
		case 1:
			return ch1;
		case 2:
			return ch2;
     5d8:	94 2f       	mov	r25, r20
     5da:	10 c0       	rjmp	.+32     	; 0x5fc <adc_read+0x44>
		case 3:
			return ch3;
     5dc:	93 2f       	mov	r25, r19
     5de:	0e c0       	rjmp	.+28     	; 0x5fc <adc_read+0x44>
		default:
			printf("Channel not found, arg given: %d", channel);
     5e0:	1f 92       	push	r1
     5e2:	8f 93       	push	r24
     5e4:	85 e1       	ldi	r24, 0x15	; 21
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	0e 94 3b 08 	call	0x1076	; 0x1076 <printf>
			break;

	}
}
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	08 95       	ret
	int ch2 = *ADC;
	int ch3 = *ADC;
	
	switch(channel) {
		case 0:
			return ch0;
     5fa:	92 2f       	mov	r25, r18
     5fc:	89 2f       	mov	r24, r25
		default:
			printf("Channel not found, arg given: %d", channel);
			break;

	}
}
     5fe:	08 95       	ret

00000600 <can_write>:
    

    return err;
}

void can_write(struct Message msg) {
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	2b 97       	sbiw	r28, 0x0b	; 11
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	e9 82       	std	Y+1, r14	; 0x01
     61e:	fa 82       	std	Y+2, r15	; 0x02
     620:	f0 2e       	mov	r15, r16
     622:	0b 83       	std	Y+3, r16	; 0x03
     624:	1c 83       	std	Y+4, r17	; 0x04
     626:	2d 83       	std	Y+5, r18	; 0x05
     628:	3e 83       	std	Y+6, r19	; 0x06
     62a:	4f 83       	std	Y+7, r20	; 0x07
     62c:	58 87       	std	Y+8, r21	; 0x08
     62e:	69 87       	std	Y+9, r22	; 0x09
     630:	7a 87       	std	Y+10, r23	; 0x0a
     632:	8b 87       	std	Y+11, r24	; 0x0b
    if (msg.length > 8) {
     634:	88 e0       	ldi	r24, 0x08	; 8
     636:	80 17       	cp	r24, r16
     638:	28 f4       	brcc	.+10     	; 0x644 <can_write+0x44>
        printf("ERROR, message length value to high \r\n");
     63a:	86 e3       	ldi	r24, 0x36	; 54
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
        return -1;
     642:	2a c0       	rjmp	.+84     	; 0x698 <can_write+0x98>
    }
	//mcp2515_write(BFPCTRL, 0b00000101); //enable interrupt on rx0bf pin. Not needed since we only need interrupt when received message on caninte rx.
	// mcp2515_bit_modify(MCP_TXB0CTRL, 0b00001011, 0b000001011); //sjekke om denne også trengs?

	mcp2515_write(MCP_TXB0SIDH, msg.id);
     644:	69 81       	ldd	r22, Y+1	; 0x01
     646:	81 e3       	ldi	r24, 0x31	; 49
     648:	0e 94 ff 03 	call	0x7fe	; 0x7fe <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, 0);
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	82 e3       	ldi	r24, 0x32	; 50
     650:	0e 94 ff 03 	call	0x7fe	; 0x7fe <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC, msg.length); 
     654:	60 2f       	mov	r22, r16
     656:	85 e3       	ldi	r24, 0x35	; 53
     658:	0e 94 ff 03 	call	0x7fe	; 0x7fe <mcp2515_write>

    for (int i = 0; i < msg.length; i++) {
     65c:	00 e0       	ldi	r16, 0x00	; 0
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	0d c0       	rjmp	.+26     	; 0x67c <can_write+0x7c>
	    mcp2515_write(MCP_TXB0D0+i, msg.data[i]);
     662:	e4 e0       	ldi	r30, 0x04	; 4
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	ec 0f       	add	r30, r28
     668:	fd 1f       	adc	r31, r29
     66a:	e0 0f       	add	r30, r16
     66c:	f1 1f       	adc	r31, r17
     66e:	60 81       	ld	r22, Z
     670:	86 e3       	ldi	r24, 0x36	; 54
     672:	80 0f       	add	r24, r16
     674:	0e 94 ff 03 	call	0x7fe	; 0x7fe <mcp2515_write>

	mcp2515_write(MCP_TXB0SIDH, msg.id);
	mcp2515_write(MCP_TXB0SIDL, 0);
	mcp2515_write(MCP_TXB0DLC, msg.length); 

    for (int i = 0; i < msg.length; i++) {
     678:	0f 5f       	subi	r16, 0xFF	; 255
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	8f 2d       	mov	r24, r15
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	08 17       	cp	r16, r24
     682:	19 07       	cpc	r17, r25
     684:	74 f3       	brlt	.-36     	; 0x662 <can_write+0x62>
	    mcp2515_write(MCP_TXB0D0+i, msg.data[i]);
    }
	
	if (mcp2515_read(MCP_CANINTF) & 0b10100000) {
     686:	8c e2       	ldi	r24, 0x2C	; 44
     688:	0e 94 15 04 	call	0x82a	; 0x82a <mcp2515_read>
     68c:	80 7a       	andi	r24, 0xA0	; 160
     68e:	21 f0       	breq	.+8      	; 0x698 <can_write+0x98>
		printf("Message error \r\n");	
     690:	8c e5       	ldi	r24, 0x5C	; 92
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
	}
}
     698:	2b 96       	adiw	r28, 0x0b	; 11
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	08 95       	ret

000006b2 <can_read>:

struct Message can_read() {
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	8c 01       	movw	r16, r24
    struct Message msg_read;
    msg_read.id = (mcp2515_read(MCP_RXB0SIDH) << 3) + (mcp2515_read(MCP_RXB0SIDL) >> 5);
     6be:	81 e6       	ldi	r24, 0x61	; 97
     6c0:	0e 94 15 04 	call	0x82a	; 0x82a <mcp2515_read>
     6c4:	c8 2f       	mov	r28, r24
     6c6:	d0 e0       	ldi	r29, 0x00	; 0
     6c8:	cc 0f       	add	r28, r28
     6ca:	dd 1f       	adc	r29, r29
     6cc:	cc 0f       	add	r28, r28
     6ce:	dd 1f       	adc	r29, r29
     6d0:	cc 0f       	add	r28, r28
     6d2:	dd 1f       	adc	r29, r29
     6d4:	82 e6       	ldi	r24, 0x62	; 98
     6d6:	0e 94 15 04 	call	0x82a	; 0x82a <mcp2515_read>
     6da:	82 95       	swap	r24
     6dc:	86 95       	lsr	r24
     6de:	87 70       	andi	r24, 0x07	; 7
     6e0:	c8 0f       	add	r28, r24
     6e2:	d1 1d       	adc	r29, r1
     6e4:	f8 01       	movw	r30, r16
     6e6:	d1 83       	std	Z+1, r29	; 0x01
     6e8:	c0 83       	st	Z, r28
    msg_read.length = mcp2515_read(MCP_RXB0DLC);
     6ea:	85 e6       	ldi	r24, 0x65	; 101
     6ec:	0e 94 15 04 	call	0x82a	; 0x82a <mcp2515_read>
     6f0:	f8 2e       	mov	r15, r24
     6f2:	f8 01       	movw	r30, r16
     6f4:	82 83       	std	Z+2, r24	; 0x02

    for (int i = 0; i < msg_read.length; i++) {
     6f6:	c0 e0       	ldi	r28, 0x00	; 0
     6f8:	d0 e0       	ldi	r29, 0x00	; 0
     6fa:	09 c0       	rjmp	.+18     	; 0x70e <can_read+0x5c>
	    msg_read.data[i] = mcp2515_read(MCP_RXB0D0+i); //Bruke alle 8 registre RXB0D0-8
     6fc:	8c 2f       	mov	r24, r28
     6fe:	8a 59       	subi	r24, 0x9A	; 154
     700:	0e 94 15 04 	call	0x82a	; 0x82a <mcp2515_read>
     704:	f8 01       	movw	r30, r16
     706:	ec 0f       	add	r30, r28
     708:	fd 1f       	adc	r31, r29
     70a:	83 83       	std	Z+3, r24	; 0x03
struct Message can_read() {
    struct Message msg_read;
    msg_read.id = (mcp2515_read(MCP_RXB0SIDH) << 3) + (mcp2515_read(MCP_RXB0SIDL) >> 5);
    msg_read.length = mcp2515_read(MCP_RXB0DLC);

    for (int i = 0; i < msg_read.length; i++) {
     70c:	21 96       	adiw	r28, 0x01	; 1
     70e:	8f 2d       	mov	r24, r15
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	c8 17       	cp	r28, r24
     714:	d9 07       	cpc	r29, r25
     716:	94 f3       	brlt	.-28     	; 0x6fc <can_read+0x4a>
	    msg_read.data[i] = mcp2515_read(MCP_RXB0D0+i); //Bruke alle 8 registre RXB0D0-8
    }

    return msg_read;
}
     718:	c8 01       	movw	r24, r16
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	08 95       	ret

00000726 <can_loopback_test>:


void can_loopback_test(char *str) {
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	a1 97       	sbiw	r28, 0x21	; 33
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	d8 2e       	mov	r13, r24
    mcp2515_mode_select(MODE_LOOPBACK);
     748:	80 e4       	ldi	r24, 0x40	; 64
     74a:	0e 94 45 04 	call	0x88a	; 0x88a <mcp2515_mode_select>

    struct Message m_w = {
     74e:	8b e0       	ldi	r24, 0x0B	; 11
     750:	fe 01       	movw	r30, r28
     752:	31 96       	adiw	r30, 0x01	; 1
     754:	df 01       	movw	r26, r30
     756:	98 2f       	mov	r25, r24
     758:	1d 92       	st	X+, r1
     75a:	9a 95       	dec	r25
     75c:	e9 f7       	brne	.-6      	; 0x758 <can_loopback_test+0x32>
     75e:	20 ed       	ldi	r18, 0xD0	; 208
     760:	37 e0       	ldi	r19, 0x07	; 7
     762:	3a 83       	std	Y+2, r19	; 0x02
     764:	29 83       	std	Y+1, r18	; 0x01
     766:	98 e0       	ldi	r25, 0x08	; 8
     768:	9b 83       	std	Y+3, r25	; 0x03
     76a:	dc 82       	std	Y+4, r13	; 0x04
        .id = 2000,
        .length = 8,
        .data = str
    };

    struct Message m_r = {0};
     76c:	6e 01       	movw	r12, r28
     76e:	ac e0       	ldi	r26, 0x0C	; 12
     770:	ca 0e       	add	r12, r26
     772:	d1 1c       	adc	r13, r1
     774:	f6 01       	movw	r30, r12
     776:	11 92       	st	Z+, r1
     778:	8a 95       	dec	r24
     77a:	e9 f7       	brne	.-6      	; 0x776 <can_loopback_test+0x50>

    can_write(m_w);
     77c:	e9 80       	ldd	r14, Y+1	; 0x01
     77e:	fa 80       	ldd	r15, Y+2	; 0x02
     780:	0b 81       	ldd	r16, Y+3	; 0x03
     782:	1c 81       	ldd	r17, Y+4	; 0x04
     784:	2d 81       	ldd	r18, Y+5	; 0x05
     786:	3e 81       	ldd	r19, Y+6	; 0x06
     788:	4f 81       	ldd	r20, Y+7	; 0x07
     78a:	58 85       	ldd	r21, Y+8	; 0x08
     78c:	69 85       	ldd	r22, Y+9	; 0x09
     78e:	7a 85       	ldd	r23, Y+10	; 0x0a
     790:	8b 85       	ldd	r24, Y+11	; 0x0b
     792:	0e 94 00 03 	call	0x600	; 0x600 <can_write>
    m_r = can_read();
     796:	ce 01       	movw	r24, r28
     798:	47 96       	adiw	r24, 0x17	; 23
     79a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <can_read>
     79e:	8b e0       	ldi	r24, 0x0B	; 11
     7a0:	fe 01       	movw	r30, r28
     7a2:	77 96       	adiw	r30, 0x17	; 23
     7a4:	d6 01       	movw	r26, r12
     7a6:	01 90       	ld	r0, Z+
     7a8:	0d 92       	st	X+, r0
     7aa:	8a 95       	dec	r24
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <can_loopback_test+0x80>

    printf("msg received ID:  %d\t", m_r.id);
     7ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b0:	8f 93       	push	r24
     7b2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b4:	8f 93       	push	r24
     7b6:	8c e6       	ldi	r24, 0x6C	; 108
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	0e 94 3b 08 	call	0x1076	; 0x1076 <printf>
    printf("msg received data %s\r\n", m_r.data);
     7c2:	ce 01       	movw	r24, r28
     7c4:	0f 96       	adiw	r24, 0x0f	; 15
     7c6:	9f 93       	push	r25
     7c8:	8f 93       	push	r24
     7ca:	82 e8       	ldi	r24, 0x82	; 130
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	0e 94 3b 08 	call	0x1076	; 0x1076 <printf>
}
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	a1 96       	adiw	r28, 0x21	; 33
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	08 95       	ret

000007fe <mcp2515_write>:
	uint8_t status_data = spi_read();
	
	spi_ss_set(1);
	
	return status_data;
}
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	d8 2f       	mov	r29, r24
     804:	c6 2f       	mov	r28, r22
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 d5 06 	call	0xdaa	; 0xdaa <spi_ss_set>
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
     812:	8d 2f       	mov	r24, r29
     814:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
     818:	8c 2f       	mov	r24, r28
     81a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 d5 06 	call	0xdaa	; 0xdaa <spi_ss_set>
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <mcp2515_read>:
     82a:	cf 93       	push	r28
     82c:	c8 2f       	mov	r28, r24
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 d5 06 	call	0xdaa	; 0xdaa <spi_ss_set>
     834:	83 e0       	ldi	r24, 0x03	; 3
     836:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
     83a:	8c 2f       	mov	r24, r28
     83c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
     840:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <spi_read>
     844:	c8 2f       	mov	r28, r24
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	0e 94 d5 06 	call	0xdaa	; 0xdaa <spi_ss_set>
     84c:	8c 2f       	mov	r24, r28
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	18 2f       	mov	r17, r24
     85a:	d6 2f       	mov	r29, r22
     85c:	c4 2f       	mov	r28, r20
	spi_ss_set(0);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 d5 06 	call	0xdaa	; 0xdaa <spi_ss_set>
	spi_write(MCP_BITMOD);
     864:	85 e0       	ldi	r24, 0x05	; 5
     866:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
	spi_write(address);
     86a:	81 2f       	mov	r24, r17
     86c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
	spi_write(mask);
     870:	8d 2f       	mov	r24, r29
     872:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
	spi_write(data);
     876:	8c 2f       	mov	r24, r28
     878:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
	spi_ss_set(1);
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <spi_ss_set>
}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	08 95       	ret

0000088a <mcp2515_mode_select>:


//Setter modus ved � maske CANCTRL-registeret med 0b11100000 (bare 3 MSB som gjelder) med moduser definert i mcp2515.h
void mcp2515_mode_select(uint8_t mode) {
	mcp2515_bit_modify(MCP_CANCTRL, 0b11100000, mode);
     88a:	48 2f       	mov	r20, r24
     88c:	60 ee       	ldi	r22, 0xE0	; 224
     88e:	8f e0       	ldi	r24, 0x0F	; 15
     890:	0e 94 29 04 	call	0x852	; 0x852 <mcp2515_bit_modify>
     894:	08 95       	ret

00000896 <game_fsm>:

void set_menu(){
	
}

void game_fsm() {
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	00 d0       	rcall	.+0      	; 0x89c <game_fsm+0x6>
     89c:	00 d0       	rcall	.+0      	; 0x89e <game_fsm+0x8>
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
	volatile int menu_index = 1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	9a 83       	std	Y+2, r25	; 0x02
     8a8:	89 83       	std	Y+1, r24	; 0x01
	oled_set_home();
     8aa:	0e 94 84 06 	call	0xd08	; 0xd08 <oled_set_home>
	oled_set_position(menu_index, 120);
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	9a 81       	ldd	r25, Y+2	; 0x02
     8b2:	68 e7       	ldi	r22, 0x78	; 120
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
	oled_print_string_large("<");
     8ba:	89 e9       	ldi	r24, 0x99	; 153
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 58 06 	call	0xcb0	; 0xcb0 <oled_print_string_large>
	volatile int direction = dir();
     8c2:	0e 94 2b 05 	call	0xa56	; 0xa56 <dir>
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	9c 83       	std	Y+4, r25	; 0x04
     8ca:	8b 83       	std	Y+3, r24	; 0x03
     8cc:	1e c0       	rjmp	.+60     	; 0x90a <game_fsm+0x74>
	while(1) {
		while(direction == NEUTRAL) {
			direction = dir();
     8ce:	0e 94 2b 05 	call	0xa56	; 0xa56 <dir>
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9c 83       	std	Y+4, r25	; 0x04
     8d6:	8b 83       	std	Y+3, r24	; 0x03
			if (!(PIND & (1<<5) )) {
     8d8:	85 99       	sbic	0x10, 5	; 16
     8da:	0e c0       	rjmp	.+28     	; 0x8f8 <game_fsm+0x62>
				printf("CLICKED Menu index: %d\r\n", menu_index);
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	9f 93       	push	r25
     8e2:	8f 93       	push	r24
     8e4:	8b e9       	ldi	r24, 0x9B	; 155
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	0e 94 3b 08 	call	0x1076	; 0x1076 <printf>
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f8:	2f ee       	ldi	r18, 0xEF	; 239
     8fa:	89 e4       	ldi	r24, 0x49	; 73
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	21 50       	subi	r18, 0x01	; 1
     900:	80 40       	sbci	r24, 0x00	; 0
     902:	90 40       	sbci	r25, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <game_fsm+0x68>
     906:	00 c0       	rjmp	.+0      	; 0x908 <game_fsm+0x72>
     908:	00 00       	nop
	oled_set_home();
	oled_set_position(menu_index, 120);
	oled_print_string_large("<");
	volatile int direction = dir();
	while(1) {
		while(direction == NEUTRAL) {
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	89 2b       	or	r24, r25
     910:	f1 f2       	breq	.-68     	; 0x8ce <game_fsm+0x38>
			if (!(PIND & (1<<5) )) {
				printf("CLICKED Menu index: %d\r\n", menu_index);
			}
			_delay_ms(750);
		}
		if (direction == UP && menu_index > 1) {
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	03 97       	sbiw	r24, 0x03	; 3
     918:	11 f5       	brne	.+68     	; 0x95e <game_fsm+0xc8>
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	02 97       	sbiw	r24, 0x02	; 2
     920:	f4 f0       	brlt	.+60     	; 0x95e <game_fsm+0xc8>
			printf("UP\r\n");
     922:	84 eb       	ldi	r24, 0xB4	; 180
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
			oled_set_position(menu_index, 120);
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	68 e7       	ldi	r22, 0x78	; 120
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
			oled_print_string_large(" ");
     936:	88 eb       	ldi	r24, 0xB8	; 184
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <oled_print_string_large>
			menu_index--;
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	9a 81       	ldd	r25, Y+2	; 0x02
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	9a 83       	std	Y+2, r25	; 0x02
     946:	89 83       	std	Y+1, r24	; 0x01
			oled_set_position(menu_index, 120);
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	68 e7       	ldi	r22, 0x78	; 120
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
			oled_print_string_large("<");
     954:	89 e9       	ldi	r24, 0x99	; 153
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 58 06 	call	0xcb0	; 0xcb0 <oled_print_string_large>
			if (!(PIND & (1<<5) )) {
				printf("CLICKED Menu index: %d\r\n", menu_index);
			}
			_delay_ms(750);
		}
		if (direction == UP && menu_index > 1) {
     95c:	25 c0       	rjmp	.+74     	; 0x9a8 <game_fsm+0x112>
			oled_print_string_large(" ");
			menu_index--;
			oled_set_position(menu_index, 120);
			oled_print_string_large("<");
		}
		else if (direction == DOWN && menu_index < 7) {
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	9c 81       	ldd	r25, Y+4	; 0x04
     962:	04 97       	sbiw	r24, 0x04	; 4
     964:	09 f5       	brne	.+66     	; 0x9a8 <game_fsm+0x112>
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	07 97       	sbiw	r24, 0x07	; 7
     96c:	ec f4       	brge	.+58     	; 0x9a8 <game_fsm+0x112>
			printf("DOWN\r\n");
     96e:	8a eb       	ldi	r24, 0xBA	; 186
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
			oled_set_position(menu_index, 120);
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	68 e7       	ldi	r22, 0x78	; 120
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
			oled_print_string_large(" ");
     982:	88 eb       	ldi	r24, 0xB8	; 184
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 58 06 	call	0xcb0	; 0xcb0 <oled_print_string_large>
			menu_index++;
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	9a 83       	std	Y+2, r25	; 0x02
     992:	89 83       	std	Y+1, r24	; 0x01
			oled_set_position(menu_index, 120);
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	68 e7       	ldi	r22, 0x78	; 120
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
			oled_print_string_large("<");
     9a0:	89 e9       	ldi	r24, 0x99	; 153
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <oled_print_string_large>
		}
		direction = NEUTRAL;
     9a8:	1c 82       	std	Y+4, r1	; 0x04
     9aa:	1b 82       	std	Y+3, r1	; 0x03
	}
     9ac:	ae cf       	rjmp	.-164    	; 0x90a <game_fsm+0x74>

000009ae <joystick_init>:
#include "joystick.h"
#include "adc.h"
#include <avr/io.h>

void joystick_init(){
	PORTD |= (1 << PD5); //setup pullup for PD5 which is button input from Joystick
     9ae:	82 b3       	in	r24, 0x12	; 18
     9b0:	80 62       	ori	r24, 0x20	; 32
     9b2:	82 bb       	out	0x12, r24	; 18
     9b4:	08 95       	ret

000009b6 <pos_read>:
}

struct pos pos_read(void) {
     9b6:	cf 92       	push	r12
     9b8:	df 92       	push	r13
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
	int g_f = 200/190; // gain factor to scale interval correctly
	int x_neutral = 160;
	int y_neutral = 162; // midpoint of interval
	
	struct pos position = {
		.x_pos = adc_read(0) * g_f - x_neutral, 
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <adc_read>
     9c8:	c8 2f       	mov	r28, r24
     9ca:	d0 e0       	ldi	r29, 0x00	; 0
     9cc:	c0 5a       	subi	r28, 0xA0	; 160
     9ce:	d1 09       	sbc	r29, r1
struct pos pos_read(void) {
	int g_f = 200/190; // gain factor to scale interval correctly
	int x_neutral = 160;
	int y_neutral = 162; // midpoint of interval
	
	struct pos position = {
     9d0:	6e 01       	movw	r12, r28
		.x_pos = adc_read(0) * g_f - x_neutral, 
		.y_pos = adc_read(1) * g_f - y_neutral
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <adc_read>
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	82 5a       	subi	r24, 0xA2	; 162
     9dc:	91 09       	sbc	r25, r1
struct pos pos_read(void) {
	int g_f = 200/190; // gain factor to scale interval correctly
	int x_neutral = 160;
	int y_neutral = 162; // midpoint of interval
	
	struct pos position = {
     9de:	7c 01       	movw	r14, r24
		.x_pos = adc_read(0) * g_f - x_neutral, 
		.y_pos = adc_read(1) * g_f - y_neutral
	};

	if (position.x_pos > -5 && position.x_pos < 5) {
     9e0:	24 96       	adiw	r28, 0x04	; 4
     9e2:	29 97       	sbiw	r28, 0x09	; 9
     9e4:	10 f4       	brcc	.+4      	; 0x9ea <pos_read+0x34>
		position.x_pos = 0;
     9e6:	c1 2c       	mov	r12, r1
     9e8:	d1 2c       	mov	r13, r1
	}
	if (position.y_pos > -5 && position.y_pos < 5) {
     9ea:	04 96       	adiw	r24, 0x04	; 4
     9ec:	09 97       	sbiw	r24, 0x09	; 9
     9ee:	10 f4       	brcc	.+4      	; 0x9f4 <pos_read+0x3e>
		position.y_pos = 0;
     9f0:	e1 2c       	mov	r14, r1
     9f2:	f1 2c       	mov	r15, r1
	}
	if (position.x_pos <= -100) {
     9f4:	8d e9       	ldi	r24, 0x9D	; 157
     9f6:	c8 16       	cp	r12, r24
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	d8 06       	cpc	r13, r24
     9fc:	34 f4       	brge	.+12     	; 0xa0a <pos_read+0x54>
		position.x_pos = -100;
     9fe:	0f 2e       	mov	r0, r31
     a00:	fc e9       	ldi	r31, 0x9C	; 156
     a02:	cf 2e       	mov	r12, r31
     a04:	dd 24       	eor	r13, r13
     a06:	da 94       	dec	r13
     a08:	f0 2d       	mov	r31, r0
	}
	if (position.y_pos <= -100) {
     a0a:	8d e9       	ldi	r24, 0x9D	; 157
     a0c:	e8 16       	cp	r14, r24
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	f8 06       	cpc	r15, r24
     a12:	34 f4       	brge	.+12     	; 0xa20 <pos_read+0x6a>
		position.y_pos = -100;
     a14:	0f 2e       	mov	r0, r31
     a16:	fc e9       	ldi	r31, 0x9C	; 156
     a18:	ef 2e       	mov	r14, r31
     a1a:	ff 24       	eor	r15, r15
     a1c:	fa 94       	dec	r15
     a1e:	f0 2d       	mov	r31, r0
	}
	if (position.x_pos >= 92) {
     a20:	8c e5       	ldi	r24, 0x5C	; 92
     a22:	c8 16       	cp	r12, r24
     a24:	d1 04       	cpc	r13, r1
     a26:	2c f0       	brlt	.+10     	; 0xa32 <pos_read+0x7c>
		position.x_pos = 100;
     a28:	0f 2e       	mov	r0, r31
     a2a:	f4 e6       	ldi	r31, 0x64	; 100
     a2c:	cf 2e       	mov	r12, r31
     a2e:	d1 2c       	mov	r13, r1
     a30:	f0 2d       	mov	r31, r0
	}
	if (position.y_pos >= 92) {
     a32:	8c e5       	ldi	r24, 0x5C	; 92
     a34:	e8 16       	cp	r14, r24
     a36:	f1 04       	cpc	r15, r1
     a38:	2c f0       	brlt	.+10     	; 0xa44 <pos_read+0x8e>
		position.y_pos = 100;
     a3a:	0f 2e       	mov	r0, r31
     a3c:	f4 e6       	ldi	r31, 0x64	; 100
     a3e:	ef 2e       	mov	r14, r31
     a40:	f1 2c       	mov	r15, r1
     a42:	f0 2d       	mov	r31, r0
	}
	
	return position;
}
     a44:	c7 01       	movw	r24, r14
     a46:	b6 01       	movw	r22, r12
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	08 95       	ret

00000a56 <dir>:

dir_t dir() {
	struct pos position = pos_read();
     a56:	0e 94 db 04 	call	0x9b6	; 0x9b6 <pos_read>
	int x_input = position.x_pos;
	int y_input = position.y_pos;
	if (x_input < -50) {
     a5a:	6e 3c       	cpi	r22, 0xCE	; 206
     a5c:	4f ef       	ldi	r20, 0xFF	; 255
     a5e:	74 07       	cpc	r23, r20
     a60:	5c f0       	brlt	.+22     	; 0xa78 <dir+0x22>
		return LEFT;
	} 
	else if (x_input > 50) {
     a62:	63 33       	cpi	r22, 0x33	; 51
     a64:	71 05       	cpc	r23, r1
     a66:	54 f4       	brge	.+20     	; 0xa7c <dir+0x26>
		return RIGHT;
	}
	if (y_input < -50) {
     a68:	8e 3c       	cpi	r24, 0xCE	; 206
     a6a:	2f ef       	ldi	r18, 0xFF	; 255
     a6c:	92 07       	cpc	r25, r18
     a6e:	44 f0       	brlt	.+16     	; 0xa80 <dir+0x2a>
		return DOWN;
	}
	else if (y_input > 50) {
     a70:	c3 97       	sbiw	r24, 0x33	; 51
     a72:	44 f0       	brlt	.+16     	; 0xa84 <dir+0x2e>
		return UP;
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	08 95       	ret
dir_t dir() {
	struct pos position = pos_read();
	int x_input = position.x_pos;
	int y_input = position.y_pos;
	if (x_input < -50) {
		return LEFT;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	08 95       	ret
	} 
	else if (x_input > 50) {
		return RIGHT;
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	08 95       	ret
	}
	if (y_input < -50) {
		return DOWN;
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	08 95       	ret
	}
	else if (y_input > 50) {
		return UP;
	}
	else if ((y_input > -50)&&(y_input <50)) {
		return NEUTRAL;
     a84:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if ((x_input > -50)&&(x_input <50)) {
		return NEUTRAL;
	}
	return NEUTRAL;
     a86:	08 95       	ret

00000a88 <main>:
{
	// Set main sleep time
    //_delay_ms(sleep_time);
	
	// Initialize functions
	usart_init(MYUBRR);
     a88:	8f e1       	ldi	r24, 0x1F	; 31
     a8a:	0e 94 7c 07 	call	0xef8	; 0xef8 <usart_init>
	xmem_init();
     a8e:	0e 94 89 07 	call	0xf12	; 0xf12 <xmem_init>
	adc_init();
     a92:	0e 94 c1 02 	call	0x582	; 0x582 <adc_init>
	joystick_init();
     a96:	0e 94 d7 04 	call	0x9ae	; 0x9ae <joystick_init>
	oled_init();
     a9a:	0e 94 c9 05 	call	0xb92	; 0xb92 <oled_init>
		//printf("Can init failed \r\n");
		//return -1;
	//}
	
	// Test SRAM functionality
	if (SRAM_test()) {
     a9e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <SRAM_test>
     aa2:	89 2b       	or	r24, r25
     aa4:	c9 f4       	brne	.+50     	; 0xad8 <main+0x50>
		printf("SRAM test failed\r\n");
		return -1;
	}
	
	game_fsm();
     aa6:	0e 94 4b 04 	call	0x896	; 0x896 <game_fsm>
	// MAIN LOOP
    while (1) {
		can_loopback_test("HEI DER");
     aaa:	82 ed       	ldi	r24, 0xD2	; 210
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	0e 94 93 03 	call	0x726	; 0x726 <can_loopback_test>
     ab2:	2f e7       	ldi	r18, 0x7F	; 127
     ab4:	8f e4       	ldi	r24, 0x4F	; 79
     ab6:	92 e1       	ldi	r25, 0x12	; 18
     ab8:	21 50       	subi	r18, 0x01	; 1
     aba:	80 40       	sbci	r24, 0x00	; 0
     abc:	90 40       	sbci	r25, 0x00	; 0
     abe:	e1 f7       	brne	.-8      	; 0xab8 <main+0x30>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <main+0x3a>
     ac2:	00 00       	nop
     ac4:	2f e3       	ldi	r18, 0x3F	; 63
     ac6:	8d e0       	ldi	r24, 0x0D	; 13
     ac8:	93 e0       	ldi	r25, 0x03	; 3
     aca:	21 50       	subi	r18, 0x01	; 1
     acc:	80 40       	sbci	r24, 0x00	; 0
     ace:	90 40       	sbci	r25, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <main+0x42>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <main+0x4c>
     ad4:	00 00       	nop
     ad6:	e9 cf       	rjmp	.-46     	; 0xaaa <main+0x22>
		//return -1;
	//}
	
	// Test SRAM functionality
	if (SRAM_test()) {
		printf("SRAM test failed\r\n");
     ad8:	80 ec       	ldi	r24, 0xC0	; 192
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
		//mcp2515_reception(0x11, 2);
		_delay_ms(1000);
	}

	return 0;
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	08 95       	ret

00000ae6 <write_command>:
	int i = 0;
	while (string[i] != '\0') {
		oled_print_char_small(string[i]);
		++i;
	}
}
     ae6:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xccc>
     aea:	08 95       	ret

00000aec <oled_goto_column>:
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	80 38       	cpi	r24, 0x80	; 128
     af2:	91 05       	cpc	r25, r1
     af4:	90 f4       	brcc	.+36     	; 0xb1a <oled_goto_column+0x2e>
     af6:	ec 01       	movw	r28, r24
     af8:	8f 70       	andi	r24, 0x0F	; 15
     afa:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     afe:	ce 01       	movw	r24, r28
     b00:	80 7f       	andi	r24, 0xF0	; 240
     b02:	99 27       	eor	r25, r25
     b04:	95 95       	asr	r25
     b06:	87 95       	ror	r24
     b08:	95 95       	asr	r25
     b0a:	87 95       	ror	r24
     b0c:	95 95       	asr	r25
     b0e:	87 95       	ror	r24
     b10:	95 95       	asr	r25
     b12:	87 95       	ror	r24
     b14:	80 5f       	subi	r24, 0xF0	; 240
     b16:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <oled_goto_page>:
     b20:	28 2f       	mov	r18, r24
     b22:	39 2f       	mov	r19, r25
     b24:	28 30       	cpi	r18, 0x08	; 8
     b26:	31 05       	cpc	r19, r1
     b28:	18 f4       	brcc	.+6      	; 0xb30 <oled_goto_page+0x10>
     b2a:	80 55       	subi	r24, 0x50	; 80
     b2c:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     b30:	08 95       	ret

00000b32 <oled_set_position>:
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	eb 01       	movw	r28, r22
     b38:	0e 94 90 05 	call	0xb20	; 0xb20 <oled_goto_page>
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 76 05 	call	0xaec	; 0xaec <oled_goto_column>
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <write_data>:
     b48:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xecc>
     b4c:	08 95       	ret

00000b4e <oled_reset>:
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	00 e0       	ldi	r16, 0x00	; 0
     b58:	10 e0       	ldi	r17, 0x00	; 0
     b5a:	13 c0       	rjmp	.+38     	; 0xb82 <oled_reset+0x34>
     b5c:	c8 01       	movw	r24, r16
     b5e:	0e 94 90 05 	call	0xb20	; 0xb20 <oled_goto_page>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 76 05 	call	0xaec	; 0xaec <oled_goto_column>
     b6a:	c0 e0       	ldi	r28, 0x00	; 0
     b6c:	d0 e0       	ldi	r29, 0x00	; 0
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <oled_reset+0x2a>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 a4 05 	call	0xb48	; 0xb48 <write_data>
     b76:	21 96       	adiw	r28, 0x01	; 1
     b78:	c0 38       	cpi	r28, 0x80	; 128
     b7a:	d1 05       	cpc	r29, r1
     b7c:	cc f3       	brlt	.-14     	; 0xb70 <oled_reset+0x22>
     b7e:	0f 5f       	subi	r16, 0xFF	; 255
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	08 30       	cpi	r16, 0x08	; 8
     b84:	11 05       	cpc	r17, r1
     b86:	54 f3       	brlt	.-44     	; 0xb5c <oled_reset+0xe>
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	08 95       	ret

00000b92 <oled_init>:
     b92:	8e ea       	ldi	r24, 0xAE	; 174
     b94:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     b98:	81 ea       	ldi	r24, 0xA1	; 161
     b9a:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     b9e:	8a ed       	ldi	r24, 0xDA	; 218
     ba0:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     ba4:	82 e1       	ldi	r24, 0x12	; 18
     ba6:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     baa:	88 ec       	ldi	r24, 0xC8	; 200
     bac:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bb0:	88 ea       	ldi	r24, 0xA8	; 168
     bb2:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bb6:	8f e3       	ldi	r24, 0x3F	; 63
     bb8:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bbc:	85 ed       	ldi	r24, 0xD5	; 213
     bbe:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bc2:	80 e8       	ldi	r24, 0x80	; 128
     bc4:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bc8:	81 e8       	ldi	r24, 0x81	; 129
     bca:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bce:	80 e5       	ldi	r24, 0x50	; 80
     bd0:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bd4:	89 ed       	ldi	r24, 0xD9	; 217
     bd6:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bda:	81 e2       	ldi	r24, 0x21	; 33
     bdc:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bec:	8b ed       	ldi	r24, 0xDB	; 219
     bee:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bf2:	80 e3       	ldi	r24, 0x30	; 48
     bf4:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bf8:	8d ea       	ldi	r24, 0xAD	; 173
     bfa:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     c04:	84 ea       	ldi	r24, 0xA4	; 164
     c06:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     c0a:	86 ea       	ldi	r24, 0xA6	; 166
     c0c:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     c10:	8f ea       	ldi	r24, 0xAF	; 175
     c12:	0e 94 73 05 	call	0xae6	; 0xae6 <write_command>
     c16:	0e 94 a7 05 	call	0xb4e	; 0xb4e <oled_reset>
     c1a:	08 95       	ret

00000c1c <oled_print_char_large>:
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	90 ee       	ldi	r25, 0xE0	; 224
     c24:	98 0f       	add	r25, r24
     c26:	9f 35       	cpi	r25, 0x5F	; 95
     c28:	98 f0       	brcs	.+38     	; 0xc50 <oled_print_char_large+0x34>
     c2a:	18 c0       	rjmp	.+48     	; 0xc5c <oled_print_char_large+0x40>
     c2c:	e1 2f       	mov	r30, r17
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	b0 97       	sbiw	r30, 0x20	; 32
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	ec 0f       	add	r30, r28
     c40:	fd 1f       	adc	r31, r29
     c42:	e5 5b       	subi	r30, 0xB5	; 181
     c44:	fd 4f       	sbci	r31, 0xFD	; 253
     c46:	84 91       	lpm	r24, Z
     c48:	0e 94 a4 05 	call	0xb48	; 0xb48 <write_data>
     c4c:	21 96       	adiw	r28, 0x01	; 1
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <oled_print_char_large+0x3a>
     c50:	18 2f       	mov	r17, r24
     c52:	c0 e0       	ldi	r28, 0x00	; 0
     c54:	d0 e0       	ldi	r29, 0x00	; 0
     c56:	c8 30       	cpi	r28, 0x08	; 8
     c58:	d1 05       	cpc	r29, r1
     c5a:	44 f3       	brlt	.-48     	; 0xc2c <oled_print_char_large+0x10>
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	08 95       	ret

00000c64 <oled_print_char_normal>:
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	90 ee       	ldi	r25, 0xE0	; 224
     c6c:	98 0f       	add	r25, r24
     c6e:	9f 35       	cpi	r25, 0x5F	; 95
     c70:	a8 f0       	brcs	.+42     	; 0xc9c <oled_print_char_normal+0x38>
     c72:	1a c0       	rjmp	.+52     	; 0xca8 <oled_print_char_normal+0x44>
     c74:	21 2f       	mov	r18, r17
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	20 52       	subi	r18, 0x20	; 32
     c7a:	31 09       	sbc	r19, r1
     c7c:	f9 01       	movw	r30, r18
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	e2 0f       	add	r30, r18
     c88:	f3 1f       	adc	r31, r19
     c8a:	ec 0f       	add	r30, r28
     c8c:	fd 1f       	adc	r31, r29
     c8e:	e0 59       	subi	r30, 0x90	; 144
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	84 91       	lpm	r24, Z
     c94:	0e 94 a4 05 	call	0xb48	; 0xb48 <write_data>
     c98:	21 96       	adiw	r28, 0x01	; 1
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <oled_print_char_normal+0x3e>
     c9c:	18 2f       	mov	r17, r24
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
     ca0:	d0 e0       	ldi	r29, 0x00	; 0
     ca2:	c5 30       	cpi	r28, 0x05	; 5
     ca4:	d1 05       	cpc	r29, r1
     ca6:	34 f3       	brlt	.-52     	; 0xc74 <oled_print_char_normal+0x10>
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	08 95       	ret

00000cb0 <oled_print_string_large>:
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	8c 01       	movw	r16, r24
     cba:	c0 e0       	ldi	r28, 0x00	; 0
     cbc:	d0 e0       	ldi	r29, 0x00	; 0
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <oled_print_string_large+0x16>
     cc0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <oled_print_char_large>
     cc4:	21 96       	adiw	r28, 0x01	; 1
     cc6:	f8 01       	movw	r30, r16
     cc8:	ec 0f       	add	r30, r28
     cca:	fd 1f       	adc	r31, r29
     ccc:	80 81       	ld	r24, Z
     cce:	81 11       	cpse	r24, r1
     cd0:	f7 cf       	rjmp	.-18     	; 0xcc0 <oled_print_string_large+0x10>
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	08 95       	ret

00000cdc <oled_print_string_normal>:
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	8c 01       	movw	r16, r24
     ce6:	c0 e0       	ldi	r28, 0x00	; 0
     ce8:	d0 e0       	ldi	r29, 0x00	; 0
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <oled_print_string_normal+0x16>
     cec:	0e 94 32 06 	call	0xc64	; 0xc64 <oled_print_char_normal>
     cf0:	21 96       	adiw	r28, 0x01	; 1
     cf2:	f8 01       	movw	r30, r16
     cf4:	ec 0f       	add	r30, r28
     cf6:	fd 1f       	adc	r31, r29
     cf8:	80 81       	ld	r24, Z
     cfa:	81 11       	cpse	r24, r1
     cfc:	f7 cf       	rjmp	.-18     	; 0xcec <oled_print_string_normal+0x10>
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	08 95       	ret

00000d08 <oled_set_home>:
		.menu_index4 = " Select team",
		.menu_index5 = " Highscores",
		.menu_index6 = " Settings"
	};
	
	oled_set_position(0,1);
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
	oled_print_string_large("---MAIN MENU---");
     d14:	8a ed       	ldi	r24, 0xDA	; 218
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 58 06 	call	0xcb0	; 0xcb0 <oled_print_string_large>
	
	oled_set_position(1,1);
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
	oled_print_string_normal(menu.menu_index1);
     d28:	8a ee       	ldi	r24, 0xEA	; 234
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <oled_print_string_normal>
	
	oled_set_position(2,1);
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
	oled_print_string_normal(menu.menu_index2);
     d3c:	80 ef       	ldi	r24, 0xF0	; 240
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 6e 06 	call	0xcdc	; 0xcdc <oled_print_string_normal>
	
	oled_set_position(3,1);
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
	oled_print_string_normal(menu.menu_index3);
     d50:	8a ef       	ldi	r24, 0xFA	; 250
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 6e 06 	call	0xcdc	; 0xcdc <oled_print_string_normal>
	
	oled_set_position(4,1);
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	84 e0       	ldi	r24, 0x04	; 4
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
	oled_print_string_normal(menu.menu_index4);
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	0e 94 6e 06 	call	0xcdc	; 0xcdc <oled_print_string_normal>
	
	oled_set_position(5,1);
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	85 e0       	ldi	r24, 0x05	; 5
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
	oled_print_string_normal(menu.menu_index5);
     d78:	81 e1       	ldi	r24, 0x11	; 17
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <oled_print_string_normal>
	
	oled_set_position(6,1);
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	86 e0       	ldi	r24, 0x06	; 6
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
	oled_print_string_normal(menu.menu_index6);
     d8c:	8d e1       	ldi	r24, 0x1D	; 29
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	0e 94 6e 06 	call	0xcdc	; 0xcdc <oled_print_string_normal>
	
	oled_set_position(7,1);
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	87 e0       	ldi	r24, 0x07	; 7
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_set_position>
	oled_print_string_large("<< Return");
     da0:	87 e2       	ldi	r24, 0x27	; 39
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <oled_print_string_large>
     da8:	08 95       	ret

00000daa <spi_ss_set>:
	//maybe set SPIE to 1, interrupt enable
	
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
	spi_ss_set(1);
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	19 f4       	brne	.+6      	; 0xdb4 <spi_ss_set+0xa>
     dae:	98 b3       	in	r25, 0x18	; 24
     db0:	90 61       	ori	r25, 0x10	; 16
     db2:	98 bb       	out	0x18, r25	; 24
     db4:	81 11       	cpse	r24, r1
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <spi_ss_set+0x14>
     db8:	88 b3       	in	r24, 0x18	; 24
     dba:	8f 7e       	andi	r24, 0xEF	; 239
     dbc:	88 bb       	out	0x18, r24	; 24
     dbe:	08 95       	ret

00000dc0 <spi_write>:
}

void spi_write(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
     dc0:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     dc2:	77 9b       	sbis	0x0e, 7	; 14
     dc4:	fe cf       	rjmp	.-4      	; 0xdc2 <spi_write+0x2>
}
     dc6:	08 95       	ret

00000dc8 <spi_read>:

uint8_t spi_read() {
	//dummy byte transmit to start reading
	spi_write(0x00);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <spi_write>
	/* Wait for reception complete*/
	while(!(SPSR & (1<<SPIF)));
     dce:	77 9b       	sbis	0x0e, 7	; 14
     dd0:	fe cf       	rjmp	.-4      	; 0xdce <spi_read+0x6>
	/* Return data register */
	uint8_t sp = SPDR;
     dd2:	8f b1       	in	r24, 0x0f	; 15
	return sp;
	
	
}
     dd4:	08 95       	ret

00000dd6 <SRAM_test>:
#include "sram_test.h"

#include <stdlib.h>
#include <stdint.h>
int SRAM_test(void)
{
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\r\n");
     de2:	81 e3       	ldi	r24, 0x31	; 49
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     dea:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <rand>
     dee:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     df0:	0e 94 e5 07 	call	0xfca	; 0xfca <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     df4:	c0 e0       	ldi	r28, 0x00	; 0
     df6:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdint.h>
int SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     df8:	00 e0       	ldi	r16, 0x00	; 0
     dfa:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     dfc:	20 c0       	rjmp	.+64     	; 0xe3e <SRAM_test+0x68>
		uint8_t some_value = rand();
     dfe:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <rand>
		ext_ram[i] = some_value;
     e02:	fe 01       	movw	r30, r28
     e04:	f8 5e       	subi	r31, 0xE8	; 232
     e06:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     e08:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     e0a:	28 17       	cp	r18, r24
     e0c:	b9 f0       	breq	.+46     	; 0xe3c <SRAM_test+0x66>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     e0e:	99 27       	eor	r25, r25
     e10:	9f 93       	push	r25
     e12:	8f 93       	push	r24
     e14:	1f 92       	push	r1
     e16:	2f 93       	push	r18
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	88 e4       	ldi	r24, 0x48	; 72
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	9f 93       	push	r25
     e22:	8f 93       	push	r24
     e24:	0e 94 3b 08 	call	0x1076	; 0x1076 <printf>
			write_errors++;
     e28:	0f 5f       	subi	r16, 0xFF	; 255
     e2a:	1f 4f       	sbci	r17, 0xFF	; 255
     e2c:	8d b7       	in	r24, 0x3d	; 61
     e2e:	9e b7       	in	r25, 0x3e	; 62
     e30:	08 96       	adiw	r24, 0x08	; 8
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	9e bf       	out	0x3e, r25	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     e3c:	21 96       	adiw	r28, 0x01	; 1
     e3e:	c1 15       	cp	r28, r1
     e40:	98 e0       	ldi	r25, 0x08	; 8
     e42:	d9 07       	cpc	r29, r25
     e44:	e0 f2       	brcs	.-72     	; 0xdfe <SRAM_test+0x28>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
     e46:	c7 01       	movw	r24, r14
     e48:	0e 94 e5 07 	call	0xfca	; 0xfca <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     e4c:	c0 e0       	ldi	r28, 0x00	; 0
     e4e:	d0 e0       	ldi	r29, 0x00	; 0
int SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     e50:	e1 2c       	mov	r14, r1
     e52:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     e54:	20 c0       	rjmp	.+64     	; 0xe96 <SRAM_test+0xc0>
		uint8_t some_value = rand();
     e56:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <rand>
		uint8_t retreived_value = ext_ram[i];
     e5a:	fe 01       	movw	r30, r28
     e5c:	f8 5e       	subi	r31, 0xE8	; 232
     e5e:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     e60:	28 17       	cp	r18, r24
     e62:	c1 f0       	breq	.+48     	; 0xe94 <SRAM_test+0xbe>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     e64:	99 27       	eor	r25, r25
     e66:	9f 93       	push	r25
     e68:	8f 93       	push	r24
     e6a:	1f 92       	push	r1
     e6c:	2f 93       	push	r18
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	82 e8       	ldi	r24, 0x82	; 130
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	9f 93       	push	r25
     e78:	8f 93       	push	r24
     e7a:	0e 94 3b 08 	call	0x1076	; 0x1076 <printf>
			retrieval_errors++;
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	e8 1a       	sub	r14, r24
     e82:	f8 0a       	sbc	r15, r24
     e84:	8d b7       	in	r24, 0x3d	; 61
     e86:	9e b7       	in	r25, 0x3e	; 62
     e88:	08 96       	adiw	r24, 0x08	; 8
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	9e bf       	out	0x3e, r25	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     e94:	21 96       	adiw	r28, 0x01	; 1
     e96:	c1 15       	cp	r28, r1
     e98:	98 e0       	ldi	r25, 0x08	; 8
     e9a:	d9 07       	cpc	r29, r25
     e9c:	e0 f2       	brcs	.-72     	; 0xe56 <SRAM_test+0x80>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors || write_errors) {
     e9e:	e1 14       	cp	r14, r1
     ea0:	f1 04       	cpc	r15, r1
     ea2:	b1 f4       	brne	.+44     	; 0xed0 <SRAM_test+0xfa>
     ea4:	01 15       	cp	r16, r1
     ea6:	11 05       	cpc	r17, r1
     ea8:	b1 f4       	brne	.+44     	; 0xed6 <SRAM_test+0x100>
		return 1;
	}
	printf("SRAM test completed with \r\n%4d errors in write phase and \r\n%4d errors in retrieval phase\r\n\r\n", write_errors, retrieval_errors);
     eaa:	ff 92       	push	r15
     eac:	ef 92       	push	r14
     eae:	1f 93       	push	r17
     eb0:	0f 93       	push	r16
     eb2:	80 ec       	ldi	r24, 0xC0	; 192
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	0e 94 3b 08 	call	0x1076	; 0x1076 <printf>
	return 0;
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	05 c0       	rjmp	.+10     	; 0xeda <SRAM_test+0x104>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors || write_errors) {
		return 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <SRAM_test+0x104>
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
	}
	printf("SRAM test completed with \r\n%4d errors in write phase and \r\n%4d errors in retrieval phase\r\n\r\n", write_errors, retrieval_errors);
	return 0;
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	08 95       	ret

00000ee8 <usart_transmit>:



void usart_transmit(uint8_t data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) {	
     ee8:	5d 9b       	sbis	0x0b, 5	; 11
     eea:	fe cf       	rjmp	.-4      	; 0xee8 <usart_transmit>
	}
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     eec:	8c b9       	out	0x0c, r24	; 12
     eee:	08 95       	ret

00000ef0 <usart_receive>:
}

uint8_t usart_receive(void) {
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) ) {
     ef0:	5f 9b       	sbis	0x0b, 7	; 11
     ef2:	fe cf       	rjmp	.-4      	; 0xef0 <usart_receive>
	}
	/* Get and return received data from buffer */
	return UDR0;
     ef4:	8c b1       	in	r24, 0x0c	; 12
}
     ef6:	08 95       	ret

00000ef8 <usart_init>:
#include <avr/io.h>
#include "uart_driver.h"

void usart_init(uint8_t ubrr) {
	/* Set baud rate */
	UBRR0H = (uint8_t)(ubrr>>8);
     ef8:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (uint8_t)ubrr;
     efa:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     efc:	88 e1       	ldi	r24, 0x18	; 24
     efe:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     f00:	86 e8       	ldi	r24, 0x86	; 134
     f02:	80 bd       	out	0x20, r24	; 32
	fdevopen(usart_transmit, usart_receive);
     f04:	68 e7       	ldi	r22, 0x78	; 120
     f06:	77 e0       	ldi	r23, 0x07	; 7
     f08:	84 e7       	ldi	r24, 0x74	; 116
     f0a:	97 e0       	ldi	r25, 0x07	; 7
     f0c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <fdevopen>
     f10:	08 95       	ret

00000f12 <xmem_init>:
#include <avr/io.h>
#include "xmem.h"

void xmem_init(void) {
	MCUCR |= (1 << SRE); //enable XMEM
     f12:	85 b7       	in	r24, 0x35	; 53
     f14:	80 68       	ori	r24, 0x80	; 128
     f16:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); //bit masking
     f18:	80 b7       	in	r24, 0x30	; 48
     f1a:	80 62       	ori	r24, 0x20	; 32
     f1c:	80 bf       	out	0x30, r24	; 48
	printf("-XMEM init-\n");	
     f1e:	8d e1       	ldi	r24, 0x1D	; 29
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	0e 94 51 08 	call	0x10a2	; 0x10a2 <puts>
     f26:	08 95       	ret

00000f28 <do_rand>:
     f28:	8f 92       	push	r8
     f2a:	9f 92       	push	r9
     f2c:	af 92       	push	r10
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
     f3e:	68 81       	ld	r22, Y
     f40:	79 81       	ldd	r23, Y+1	; 0x01
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	61 15       	cp	r22, r1
     f48:	71 05       	cpc	r23, r1
     f4a:	81 05       	cpc	r24, r1
     f4c:	91 05       	cpc	r25, r1
     f4e:	21 f4       	brne	.+8      	; 0xf58 <do_rand+0x30>
     f50:	64 e2       	ldi	r22, 0x24	; 36
     f52:	79 ed       	ldi	r23, 0xD9	; 217
     f54:	8b e5       	ldi	r24, 0x5B	; 91
     f56:	97 e0       	ldi	r25, 0x07	; 7
     f58:	2d e1       	ldi	r18, 0x1D	; 29
     f5a:	33 ef       	ldi	r19, 0xF3	; 243
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__divmodsi4>
     f64:	49 01       	movw	r8, r18
     f66:	5a 01       	movw	r10, r20
     f68:	9b 01       	movw	r18, r22
     f6a:	ac 01       	movw	r20, r24
     f6c:	a7 ea       	ldi	r26, 0xA7	; 167
     f6e:	b1 e4       	ldi	r27, 0x41	; 65
     f70:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__muluhisi3>
     f74:	6b 01       	movw	r12, r22
     f76:	7c 01       	movw	r14, r24
     f78:	ac ee       	ldi	r26, 0xEC	; 236
     f7a:	b4 ef       	ldi	r27, 0xF4	; 244
     f7c:	a5 01       	movw	r20, r10
     f7e:	94 01       	movw	r18, r8
     f80:	0e 94 83 0c 	call	0x1906	; 0x1906 <__mulohisi3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	8c 0d       	add	r24, r12
     f8a:	9d 1d       	adc	r25, r13
     f8c:	ae 1d       	adc	r26, r14
     f8e:	bf 1d       	adc	r27, r15
     f90:	b7 ff       	sbrs	r27, 7
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <do_rand+0x72>
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	a1 09       	sbc	r26, r1
     f98:	b0 48       	sbci	r27, 0x80	; 128
     f9a:	88 83       	st	Y, r24
     f9c:	99 83       	std	Y+1, r25	; 0x01
     f9e:	aa 83       	std	Y+2, r26	; 0x02
     fa0:	bb 83       	std	Y+3, r27	; 0x03
     fa2:	9f 77       	andi	r25, 0x7F	; 127
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	cf 90       	pop	r12
     fb0:	bf 90       	pop	r11
     fb2:	af 90       	pop	r10
     fb4:	9f 90       	pop	r9
     fb6:	8f 90       	pop	r8
     fb8:	08 95       	ret

00000fba <rand_r>:
     fba:	0e 94 94 07 	call	0xf28	; 0xf28 <do_rand>
     fbe:	08 95       	ret

00000fc0 <rand>:
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	0e 94 94 07 	call	0xf28	; 0xf28 <do_rand>
     fc8:	08 95       	ret

00000fca <srand>:
     fca:	a0 e0       	ldi	r26, 0x00	; 0
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     fd2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     fd6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     fda:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     fde:	08 95       	ret

00000fe0 <fdevopen>:
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	31 f4       	brne	.+12     	; 0xff8 <fdevopen+0x18>
     fec:	61 15       	cp	r22, r1
     fee:	71 05       	cpc	r23, r1
     ff0:	19 f4       	brne	.+6      	; 0xff8 <fdevopen+0x18>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	3a c0       	rjmp	.+116    	; 0x106c <fdevopen+0x8c>
     ff8:	8b 01       	movw	r16, r22
     ffa:	ec 01       	movw	r28, r24
     ffc:	6e e0       	ldi	r22, 0x0E	; 14
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <calloc>
    1008:	fc 01       	movw	r30, r24
    100a:	89 2b       	or	r24, r25
    100c:	91 f3       	breq	.-28     	; 0xff2 <fdevopen+0x12>
    100e:	80 e8       	ldi	r24, 0x80	; 128
    1010:	83 83       	std	Z+3, r24	; 0x03
    1012:	01 15       	cp	r16, r1
    1014:	11 05       	cpc	r17, r1
    1016:	71 f0       	breq	.+28     	; 0x1034 <fdevopen+0x54>
    1018:	13 87       	std	Z+11, r17	; 0x0b
    101a:	02 87       	std	Z+10, r16	; 0x0a
    101c:	81 e8       	ldi	r24, 0x81	; 129
    101e:	83 83       	std	Z+3, r24	; 0x03
    1020:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <__data_end>
    1024:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <__data_end+0x1>
    1028:	89 2b       	or	r24, r25
    102a:	21 f4       	brne	.+8      	; 0x1034 <fdevopen+0x54>
    102c:	f0 93 2b 03 	sts	0x032B, r31	; 0x80032b <__data_end+0x1>
    1030:	e0 93 2a 03 	sts	0x032A, r30	; 0x80032a <__data_end>
    1034:	20 97       	sbiw	r28, 0x00	; 0
    1036:	c9 f0       	breq	.+50     	; 0x106a <fdevopen+0x8a>
    1038:	d1 87       	std	Z+9, r29	; 0x09
    103a:	c0 87       	std	Z+8, r28	; 0x08
    103c:	83 81       	ldd	r24, Z+3	; 0x03
    103e:	82 60       	ori	r24, 0x02	; 2
    1040:	83 83       	std	Z+3, r24	; 0x03
    1042:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <__data_end+0x2>
    1046:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <__data_end+0x3>
    104a:	89 2b       	or	r24, r25
    104c:	71 f4       	brne	.+28     	; 0x106a <fdevopen+0x8a>
    104e:	f0 93 2d 03 	sts	0x032D, r31	; 0x80032d <__data_end+0x3>
    1052:	e0 93 2c 03 	sts	0x032C, r30	; 0x80032c <__data_end+0x2>
    1056:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <__data_end+0x4>
    105a:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <__data_end+0x5>
    105e:	89 2b       	or	r24, r25
    1060:	21 f4       	brne	.+8      	; 0x106a <fdevopen+0x8a>
    1062:	f0 93 2f 03 	sts	0x032F, r31	; 0x80032f <__data_end+0x5>
    1066:	e0 93 2e 03 	sts	0x032E, r30	; 0x80032e <__data_end+0x4>
    106a:	cf 01       	movw	r24, r30
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <printf>:
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e1 e4       	ldi	r30, 0x41	; 65
    107c:	f8 e0       	ldi	r31, 0x08	; 8
    107e:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__prologue_saves__+0x20>
    1082:	ae 01       	movw	r20, r28
    1084:	4b 5f       	subi	r20, 0xFB	; 251
    1086:	5f 4f       	sbci	r21, 0xFF	; 255
    1088:	fa 01       	movw	r30, r20
    108a:	61 91       	ld	r22, Z+
    108c:	71 91       	ld	r23, Z+
    108e:	af 01       	movw	r20, r30
    1090:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <__data_end+0x2>
    1094:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <__data_end+0x3>
    1098:	0e 94 81 08 	call	0x1102	; 0x1102 <vfprintf>
    109c:	e2 e0       	ldi	r30, 0x02	; 2
    109e:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__epilogue_restores__+0x20>

000010a2 <puts>:
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <__data_end+0x2>
    10ae:	f0 91 2d 03 	lds	r31, 0x032D	; 0x80032d <__data_end+0x3>
    10b2:	23 81       	ldd	r18, Z+3	; 0x03
    10b4:	21 ff       	sbrs	r18, 1
    10b6:	1b c0       	rjmp	.+54     	; 0x10ee <puts+0x4c>
    10b8:	8c 01       	movw	r16, r24
    10ba:	d0 e0       	ldi	r29, 0x00	; 0
    10bc:	c0 e0       	ldi	r28, 0x00	; 0
    10be:	f8 01       	movw	r30, r16
    10c0:	81 91       	ld	r24, Z+
    10c2:	8f 01       	movw	r16, r30
    10c4:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <__data_end+0x2>
    10c8:	70 91 2d 03 	lds	r23, 0x032D	; 0x80032d <__data_end+0x3>
    10cc:	db 01       	movw	r26, r22
    10ce:	18 96       	adiw	r26, 0x08	; 8
    10d0:	ed 91       	ld	r30, X+
    10d2:	fc 91       	ld	r31, X
    10d4:	19 97       	sbiw	r26, 0x09	; 9
    10d6:	88 23       	and	r24, r24
    10d8:	31 f0       	breq	.+12     	; 0x10e6 <puts+0x44>
    10da:	09 95       	icall
    10dc:	89 2b       	or	r24, r25
    10de:	79 f3       	breq	.-34     	; 0x10be <puts+0x1c>
    10e0:	df ef       	ldi	r29, 0xFF	; 255
    10e2:	cf ef       	ldi	r28, 0xFF	; 255
    10e4:	ec cf       	rjmp	.-40     	; 0x10be <puts+0x1c>
    10e6:	8a e0       	ldi	r24, 0x0A	; 10
    10e8:	09 95       	icall
    10ea:	89 2b       	or	r24, r25
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <puts+0x52>
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <puts+0x56>
    10f4:	8d 2f       	mov	r24, r29
    10f6:	9c 2f       	mov	r25, r28
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <vfprintf>:
    1102:	ab e0       	ldi	r26, 0x0B	; 11
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e7 e8       	ldi	r30, 0x87	; 135
    1108:	f8 e0       	ldi	r31, 0x08	; 8
    110a:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__prologue_saves__>
    110e:	6c 01       	movw	r12, r24
    1110:	7b 01       	movw	r14, r22
    1112:	8a 01       	movw	r16, r20
    1114:	fc 01       	movw	r30, r24
    1116:	17 82       	std	Z+7, r1	; 0x07
    1118:	16 82       	std	Z+6, r1	; 0x06
    111a:	83 81       	ldd	r24, Z+3	; 0x03
    111c:	81 ff       	sbrs	r24, 1
    111e:	cc c1       	rjmp	.+920    	; 0x14b8 <vfprintf+0x3b6>
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	3c 01       	movw	r6, r24
    1126:	f6 01       	movw	r30, r12
    1128:	93 81       	ldd	r25, Z+3	; 0x03
    112a:	f7 01       	movw	r30, r14
    112c:	93 fd       	sbrc	r25, 3
    112e:	85 91       	lpm	r24, Z+
    1130:	93 ff       	sbrs	r25, 3
    1132:	81 91       	ld	r24, Z+
    1134:	7f 01       	movw	r14, r30
    1136:	88 23       	and	r24, r24
    1138:	09 f4       	brne	.+2      	; 0x113c <vfprintf+0x3a>
    113a:	ba c1       	rjmp	.+884    	; 0x14b0 <vfprintf+0x3ae>
    113c:	85 32       	cpi	r24, 0x25	; 37
    113e:	39 f4       	brne	.+14     	; 0x114e <vfprintf+0x4c>
    1140:	93 fd       	sbrc	r25, 3
    1142:	85 91       	lpm	r24, Z+
    1144:	93 ff       	sbrs	r25, 3
    1146:	81 91       	ld	r24, Z+
    1148:	7f 01       	movw	r14, r30
    114a:	85 32       	cpi	r24, 0x25	; 37
    114c:	29 f4       	brne	.+10     	; 0x1158 <vfprintf+0x56>
    114e:	b6 01       	movw	r22, r12
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1156:	e7 cf       	rjmp	.-50     	; 0x1126 <vfprintf+0x24>
    1158:	91 2c       	mov	r9, r1
    115a:	21 2c       	mov	r2, r1
    115c:	31 2c       	mov	r3, r1
    115e:	ff e1       	ldi	r31, 0x1F	; 31
    1160:	f3 15       	cp	r31, r3
    1162:	d8 f0       	brcs	.+54     	; 0x119a <vfprintf+0x98>
    1164:	8b 32       	cpi	r24, 0x2B	; 43
    1166:	79 f0       	breq	.+30     	; 0x1186 <vfprintf+0x84>
    1168:	38 f4       	brcc	.+14     	; 0x1178 <vfprintf+0x76>
    116a:	80 32       	cpi	r24, 0x20	; 32
    116c:	79 f0       	breq	.+30     	; 0x118c <vfprintf+0x8a>
    116e:	83 32       	cpi	r24, 0x23	; 35
    1170:	a1 f4       	brne	.+40     	; 0x119a <vfprintf+0x98>
    1172:	23 2d       	mov	r18, r3
    1174:	20 61       	ori	r18, 0x10	; 16
    1176:	1d c0       	rjmp	.+58     	; 0x11b2 <vfprintf+0xb0>
    1178:	8d 32       	cpi	r24, 0x2D	; 45
    117a:	61 f0       	breq	.+24     	; 0x1194 <vfprintf+0x92>
    117c:	80 33       	cpi	r24, 0x30	; 48
    117e:	69 f4       	brne	.+26     	; 0x119a <vfprintf+0x98>
    1180:	23 2d       	mov	r18, r3
    1182:	21 60       	ori	r18, 0x01	; 1
    1184:	16 c0       	rjmp	.+44     	; 0x11b2 <vfprintf+0xb0>
    1186:	83 2d       	mov	r24, r3
    1188:	82 60       	ori	r24, 0x02	; 2
    118a:	38 2e       	mov	r3, r24
    118c:	e3 2d       	mov	r30, r3
    118e:	e4 60       	ori	r30, 0x04	; 4
    1190:	3e 2e       	mov	r3, r30
    1192:	2a c0       	rjmp	.+84     	; 0x11e8 <vfprintf+0xe6>
    1194:	f3 2d       	mov	r31, r3
    1196:	f8 60       	ori	r31, 0x08	; 8
    1198:	1d c0       	rjmp	.+58     	; 0x11d4 <vfprintf+0xd2>
    119a:	37 fc       	sbrc	r3, 7
    119c:	2d c0       	rjmp	.+90     	; 0x11f8 <vfprintf+0xf6>
    119e:	20 ed       	ldi	r18, 0xD0	; 208
    11a0:	28 0f       	add	r18, r24
    11a2:	2a 30       	cpi	r18, 0x0A	; 10
    11a4:	40 f0       	brcs	.+16     	; 0x11b6 <vfprintf+0xb4>
    11a6:	8e 32       	cpi	r24, 0x2E	; 46
    11a8:	b9 f4       	brne	.+46     	; 0x11d8 <vfprintf+0xd6>
    11aa:	36 fc       	sbrc	r3, 6
    11ac:	81 c1       	rjmp	.+770    	; 0x14b0 <vfprintf+0x3ae>
    11ae:	23 2d       	mov	r18, r3
    11b0:	20 64       	ori	r18, 0x40	; 64
    11b2:	32 2e       	mov	r3, r18
    11b4:	19 c0       	rjmp	.+50     	; 0x11e8 <vfprintf+0xe6>
    11b6:	36 fe       	sbrs	r3, 6
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <vfprintf+0xc4>
    11ba:	8a e0       	ldi	r24, 0x0A	; 10
    11bc:	98 9e       	mul	r9, r24
    11be:	20 0d       	add	r18, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	92 2e       	mov	r9, r18
    11c4:	11 c0       	rjmp	.+34     	; 0x11e8 <vfprintf+0xe6>
    11c6:	ea e0       	ldi	r30, 0x0A	; 10
    11c8:	2e 9e       	mul	r2, r30
    11ca:	20 0d       	add	r18, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	22 2e       	mov	r2, r18
    11d0:	f3 2d       	mov	r31, r3
    11d2:	f0 62       	ori	r31, 0x20	; 32
    11d4:	3f 2e       	mov	r3, r31
    11d6:	08 c0       	rjmp	.+16     	; 0x11e8 <vfprintf+0xe6>
    11d8:	8c 36       	cpi	r24, 0x6C	; 108
    11da:	21 f4       	brne	.+8      	; 0x11e4 <vfprintf+0xe2>
    11dc:	83 2d       	mov	r24, r3
    11de:	80 68       	ori	r24, 0x80	; 128
    11e0:	38 2e       	mov	r3, r24
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <vfprintf+0xe6>
    11e4:	88 36       	cpi	r24, 0x68	; 104
    11e6:	41 f4       	brne	.+16     	; 0x11f8 <vfprintf+0xf6>
    11e8:	f7 01       	movw	r30, r14
    11ea:	93 fd       	sbrc	r25, 3
    11ec:	85 91       	lpm	r24, Z+
    11ee:	93 ff       	sbrs	r25, 3
    11f0:	81 91       	ld	r24, Z+
    11f2:	7f 01       	movw	r14, r30
    11f4:	81 11       	cpse	r24, r1
    11f6:	b3 cf       	rjmp	.-154    	; 0x115e <vfprintf+0x5c>
    11f8:	98 2f       	mov	r25, r24
    11fa:	9f 7d       	andi	r25, 0xDF	; 223
    11fc:	95 54       	subi	r25, 0x45	; 69
    11fe:	93 30       	cpi	r25, 0x03	; 3
    1200:	28 f4       	brcc	.+10     	; 0x120c <vfprintf+0x10a>
    1202:	0c 5f       	subi	r16, 0xFC	; 252
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	9f e3       	ldi	r25, 0x3F	; 63
    1208:	99 83       	std	Y+1, r25	; 0x01
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <vfprintf+0x124>
    120c:	83 36       	cpi	r24, 0x63	; 99
    120e:	31 f0       	breq	.+12     	; 0x121c <vfprintf+0x11a>
    1210:	83 37       	cpi	r24, 0x73	; 115
    1212:	71 f0       	breq	.+28     	; 0x1230 <vfprintf+0x12e>
    1214:	83 35       	cpi	r24, 0x53	; 83
    1216:	09 f0       	breq	.+2      	; 0x121a <vfprintf+0x118>
    1218:	59 c0       	rjmp	.+178    	; 0x12cc <vfprintf+0x1ca>
    121a:	21 c0       	rjmp	.+66     	; 0x125e <vfprintf+0x15c>
    121c:	f8 01       	movw	r30, r16
    121e:	80 81       	ld	r24, Z
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	0e 5f       	subi	r16, 0xFE	; 254
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	88 24       	eor	r8, r8
    1228:	83 94       	inc	r8
    122a:	91 2c       	mov	r9, r1
    122c:	53 01       	movw	r10, r6
    122e:	13 c0       	rjmp	.+38     	; 0x1256 <vfprintf+0x154>
    1230:	28 01       	movw	r4, r16
    1232:	f2 e0       	ldi	r31, 0x02	; 2
    1234:	4f 0e       	add	r4, r31
    1236:	51 1c       	adc	r5, r1
    1238:	f8 01       	movw	r30, r16
    123a:	a0 80       	ld	r10, Z
    123c:	b1 80       	ldd	r11, Z+1	; 0x01
    123e:	36 fe       	sbrs	r3, 6
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <vfprintf+0x146>
    1242:	69 2d       	mov	r22, r9
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <vfprintf+0x14a>
    1248:	6f ef       	ldi	r22, 0xFF	; 255
    124a:	7f ef       	ldi	r23, 0xFF	; 255
    124c:	c5 01       	movw	r24, r10
    124e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <strnlen>
    1252:	4c 01       	movw	r8, r24
    1254:	82 01       	movw	r16, r4
    1256:	f3 2d       	mov	r31, r3
    1258:	ff 77       	andi	r31, 0x7F	; 127
    125a:	3f 2e       	mov	r3, r31
    125c:	16 c0       	rjmp	.+44     	; 0x128a <vfprintf+0x188>
    125e:	28 01       	movw	r4, r16
    1260:	22 e0       	ldi	r18, 0x02	; 2
    1262:	42 0e       	add	r4, r18
    1264:	51 1c       	adc	r5, r1
    1266:	f8 01       	movw	r30, r16
    1268:	a0 80       	ld	r10, Z
    126a:	b1 80       	ldd	r11, Z+1	; 0x01
    126c:	36 fe       	sbrs	r3, 6
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <vfprintf+0x174>
    1270:	69 2d       	mov	r22, r9
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <vfprintf+0x178>
    1276:	6f ef       	ldi	r22, 0xFF	; 255
    1278:	7f ef       	ldi	r23, 0xFF	; 255
    127a:	c5 01       	movw	r24, r10
    127c:	0e 94 9f 0b 	call	0x173e	; 0x173e <strnlen_P>
    1280:	4c 01       	movw	r8, r24
    1282:	f3 2d       	mov	r31, r3
    1284:	f0 68       	ori	r31, 0x80	; 128
    1286:	3f 2e       	mov	r3, r31
    1288:	82 01       	movw	r16, r4
    128a:	33 fc       	sbrc	r3, 3
    128c:	1b c0       	rjmp	.+54     	; 0x12c4 <vfprintf+0x1c2>
    128e:	82 2d       	mov	r24, r2
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	88 16       	cp	r8, r24
    1294:	99 06       	cpc	r9, r25
    1296:	b0 f4       	brcc	.+44     	; 0x12c4 <vfprintf+0x1c2>
    1298:	b6 01       	movw	r22, r12
    129a:	80 e2       	ldi	r24, 0x20	; 32
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    12a2:	2a 94       	dec	r2
    12a4:	f4 cf       	rjmp	.-24     	; 0x128e <vfprintf+0x18c>
    12a6:	f5 01       	movw	r30, r10
    12a8:	37 fc       	sbrc	r3, 7
    12aa:	85 91       	lpm	r24, Z+
    12ac:	37 fe       	sbrs	r3, 7
    12ae:	81 91       	ld	r24, Z+
    12b0:	5f 01       	movw	r10, r30
    12b2:	b6 01       	movw	r22, r12
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    12ba:	21 10       	cpse	r2, r1
    12bc:	2a 94       	dec	r2
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	82 1a       	sub	r8, r18
    12c2:	91 08       	sbc	r9, r1
    12c4:	81 14       	cp	r8, r1
    12c6:	91 04       	cpc	r9, r1
    12c8:	71 f7       	brne	.-36     	; 0x12a6 <vfprintf+0x1a4>
    12ca:	e8 c0       	rjmp	.+464    	; 0x149c <vfprintf+0x39a>
    12cc:	84 36       	cpi	r24, 0x64	; 100
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <vfprintf+0x1d2>
    12d0:	89 36       	cpi	r24, 0x69	; 105
    12d2:	41 f5       	brne	.+80     	; 0x1324 <vfprintf+0x222>
    12d4:	f8 01       	movw	r30, r16
    12d6:	37 fe       	sbrs	r3, 7
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <vfprintf+0x1e6>
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	0c 5f       	subi	r16, 0xFC	; 252
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <vfprintf+0x1f6>
    12e8:	60 81       	ld	r22, Z
    12ea:	71 81       	ldd	r23, Z+1	; 0x01
    12ec:	07 2e       	mov	r0, r23
    12ee:	00 0c       	add	r0, r0
    12f0:	88 0b       	sbc	r24, r24
    12f2:	99 0b       	sbc	r25, r25
    12f4:	0e 5f       	subi	r16, 0xFE	; 254
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	f3 2d       	mov	r31, r3
    12fa:	ff 76       	andi	r31, 0x6F	; 111
    12fc:	3f 2e       	mov	r3, r31
    12fe:	97 ff       	sbrs	r25, 7
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <vfprintf+0x212>
    1302:	90 95       	com	r25
    1304:	80 95       	com	r24
    1306:	70 95       	com	r23
    1308:	61 95       	neg	r22
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	f0 68       	ori	r31, 0x80	; 128
    1312:	3f 2e       	mov	r3, r31
    1314:	2a e0       	ldi	r18, 0x0A	; 10
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	a3 01       	movw	r20, r6
    131a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__ultoa_invert>
    131e:	88 2e       	mov	r8, r24
    1320:	86 18       	sub	r8, r6
    1322:	45 c0       	rjmp	.+138    	; 0x13ae <vfprintf+0x2ac>
    1324:	85 37       	cpi	r24, 0x75	; 117
    1326:	31 f4       	brne	.+12     	; 0x1334 <vfprintf+0x232>
    1328:	23 2d       	mov	r18, r3
    132a:	2f 7e       	andi	r18, 0xEF	; 239
    132c:	b2 2e       	mov	r11, r18
    132e:	2a e0       	ldi	r18, 0x0A	; 10
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	25 c0       	rjmp	.+74     	; 0x137e <vfprintf+0x27c>
    1334:	93 2d       	mov	r25, r3
    1336:	99 7f       	andi	r25, 0xF9	; 249
    1338:	b9 2e       	mov	r11, r25
    133a:	8f 36       	cpi	r24, 0x6F	; 111
    133c:	c1 f0       	breq	.+48     	; 0x136e <vfprintf+0x26c>
    133e:	18 f4       	brcc	.+6      	; 0x1346 <vfprintf+0x244>
    1340:	88 35       	cpi	r24, 0x58	; 88
    1342:	79 f0       	breq	.+30     	; 0x1362 <vfprintf+0x260>
    1344:	b5 c0       	rjmp	.+362    	; 0x14b0 <vfprintf+0x3ae>
    1346:	80 37       	cpi	r24, 0x70	; 112
    1348:	19 f0       	breq	.+6      	; 0x1350 <vfprintf+0x24e>
    134a:	88 37       	cpi	r24, 0x78	; 120
    134c:	21 f0       	breq	.+8      	; 0x1356 <vfprintf+0x254>
    134e:	b0 c0       	rjmp	.+352    	; 0x14b0 <vfprintf+0x3ae>
    1350:	e9 2f       	mov	r30, r25
    1352:	e0 61       	ori	r30, 0x10	; 16
    1354:	be 2e       	mov	r11, r30
    1356:	b4 fe       	sbrs	r11, 4
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <vfprintf+0x272>
    135a:	fb 2d       	mov	r31, r11
    135c:	f4 60       	ori	r31, 0x04	; 4
    135e:	bf 2e       	mov	r11, r31
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <vfprintf+0x272>
    1362:	34 fe       	sbrs	r3, 4
    1364:	0a c0       	rjmp	.+20     	; 0x137a <vfprintf+0x278>
    1366:	29 2f       	mov	r18, r25
    1368:	26 60       	ori	r18, 0x06	; 6
    136a:	b2 2e       	mov	r11, r18
    136c:	06 c0       	rjmp	.+12     	; 0x137a <vfprintf+0x278>
    136e:	28 e0       	ldi	r18, 0x08	; 8
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	05 c0       	rjmp	.+10     	; 0x137e <vfprintf+0x27c>
    1374:	20 e1       	ldi	r18, 0x10	; 16
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <vfprintf+0x27c>
    137a:	20 e1       	ldi	r18, 0x10	; 16
    137c:	32 e0       	ldi	r19, 0x02	; 2
    137e:	f8 01       	movw	r30, r16
    1380:	b7 fe       	sbrs	r11, 7
    1382:	07 c0       	rjmp	.+14     	; 0x1392 <vfprintf+0x290>
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	0c 5f       	subi	r16, 0xFC	; 252
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	06 c0       	rjmp	.+12     	; 0x139e <vfprintf+0x29c>
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 5f       	subi	r16, 0xFE	; 254
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	a3 01       	movw	r20, r6
    13a0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__ultoa_invert>
    13a4:	88 2e       	mov	r8, r24
    13a6:	86 18       	sub	r8, r6
    13a8:	fb 2d       	mov	r31, r11
    13aa:	ff 77       	andi	r31, 0x7F	; 127
    13ac:	3f 2e       	mov	r3, r31
    13ae:	36 fe       	sbrs	r3, 6
    13b0:	0d c0       	rjmp	.+26     	; 0x13cc <vfprintf+0x2ca>
    13b2:	23 2d       	mov	r18, r3
    13b4:	2e 7f       	andi	r18, 0xFE	; 254
    13b6:	a2 2e       	mov	r10, r18
    13b8:	89 14       	cp	r8, r9
    13ba:	58 f4       	brcc	.+22     	; 0x13d2 <vfprintf+0x2d0>
    13bc:	34 fe       	sbrs	r3, 4
    13be:	0b c0       	rjmp	.+22     	; 0x13d6 <vfprintf+0x2d4>
    13c0:	32 fc       	sbrc	r3, 2
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <vfprintf+0x2d4>
    13c4:	83 2d       	mov	r24, r3
    13c6:	8e 7e       	andi	r24, 0xEE	; 238
    13c8:	a8 2e       	mov	r10, r24
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <vfprintf+0x2d4>
    13cc:	b8 2c       	mov	r11, r8
    13ce:	a3 2c       	mov	r10, r3
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <vfprintf+0x2d6>
    13d2:	b8 2c       	mov	r11, r8
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <vfprintf+0x2d6>
    13d6:	b9 2c       	mov	r11, r9
    13d8:	a4 fe       	sbrs	r10, 4
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <vfprintf+0x2f8>
    13dc:	fe 01       	movw	r30, r28
    13de:	e8 0d       	add	r30, r8
    13e0:	f1 1d       	adc	r31, r1
    13e2:	80 81       	ld	r24, Z
    13e4:	80 33       	cpi	r24, 0x30	; 48
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <vfprintf+0x2ee>
    13e8:	9a 2d       	mov	r25, r10
    13ea:	99 7e       	andi	r25, 0xE9	; 233
    13ec:	a9 2e       	mov	r10, r25
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <vfprintf+0x300>
    13f0:	a2 fe       	sbrs	r10, 2
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <vfprintf+0x2fe>
    13f4:	b3 94       	inc	r11
    13f6:	b3 94       	inc	r11
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <vfprintf+0x300>
    13fa:	8a 2d       	mov	r24, r10
    13fc:	86 78       	andi	r24, 0x86	; 134
    13fe:	09 f0       	breq	.+2      	; 0x1402 <vfprintf+0x300>
    1400:	b3 94       	inc	r11
    1402:	a3 fc       	sbrc	r10, 3
    1404:	11 c0       	rjmp	.+34     	; 0x1428 <vfprintf+0x326>
    1406:	a0 fe       	sbrs	r10, 0
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <vfprintf+0x314>
    140a:	b2 14       	cp	r11, r2
    140c:	88 f4       	brcc	.+34     	; 0x1430 <vfprintf+0x32e>
    140e:	28 0c       	add	r2, r8
    1410:	92 2c       	mov	r9, r2
    1412:	9b 18       	sub	r9, r11
    1414:	0e c0       	rjmp	.+28     	; 0x1432 <vfprintf+0x330>
    1416:	b2 14       	cp	r11, r2
    1418:	60 f4       	brcc	.+24     	; 0x1432 <vfprintf+0x330>
    141a:	b6 01       	movw	r22, r12
    141c:	80 e2       	ldi	r24, 0x20	; 32
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1424:	b3 94       	inc	r11
    1426:	f7 cf       	rjmp	.-18     	; 0x1416 <vfprintf+0x314>
    1428:	b2 14       	cp	r11, r2
    142a:	18 f4       	brcc	.+6      	; 0x1432 <vfprintf+0x330>
    142c:	2b 18       	sub	r2, r11
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x332>
    1430:	98 2c       	mov	r9, r8
    1432:	21 2c       	mov	r2, r1
    1434:	a4 fe       	sbrs	r10, 4
    1436:	10 c0       	rjmp	.+32     	; 0x1458 <vfprintf+0x356>
    1438:	b6 01       	movw	r22, r12
    143a:	80 e3       	ldi	r24, 0x30	; 48
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1442:	a2 fe       	sbrs	r10, 2
    1444:	17 c0       	rjmp	.+46     	; 0x1474 <vfprintf+0x372>
    1446:	a1 fc       	sbrc	r10, 1
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <vfprintf+0x34e>
    144a:	88 e7       	ldi	r24, 0x78	; 120
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <vfprintf+0x352>
    1450:	88 e5       	ldi	r24, 0x58	; 88
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	b6 01       	movw	r22, r12
    1456:	0c c0       	rjmp	.+24     	; 0x1470 <vfprintf+0x36e>
    1458:	8a 2d       	mov	r24, r10
    145a:	86 78       	andi	r24, 0x86	; 134
    145c:	59 f0       	breq	.+22     	; 0x1474 <vfprintf+0x372>
    145e:	a1 fe       	sbrs	r10, 1
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <vfprintf+0x364>
    1462:	8b e2       	ldi	r24, 0x2B	; 43
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <vfprintf+0x366>
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	a7 fc       	sbrc	r10, 7
    146a:	8d e2       	ldi	r24, 0x2D	; 45
    146c:	b6 01       	movw	r22, r12
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1474:	89 14       	cp	r8, r9
    1476:	38 f4       	brcc	.+14     	; 0x1486 <vfprintf+0x384>
    1478:	b6 01       	movw	r22, r12
    147a:	80 e3       	ldi	r24, 0x30	; 48
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1482:	9a 94       	dec	r9
    1484:	f7 cf       	rjmp	.-18     	; 0x1474 <vfprintf+0x372>
    1486:	8a 94       	dec	r8
    1488:	f3 01       	movw	r30, r6
    148a:	e8 0d       	add	r30, r8
    148c:	f1 1d       	adc	r31, r1
    148e:	80 81       	ld	r24, Z
    1490:	b6 01       	movw	r22, r12
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1498:	81 10       	cpse	r8, r1
    149a:	f5 cf       	rjmp	.-22     	; 0x1486 <vfprintf+0x384>
    149c:	22 20       	and	r2, r2
    149e:	09 f4       	brne	.+2      	; 0x14a2 <vfprintf+0x3a0>
    14a0:	42 ce       	rjmp	.-892    	; 0x1126 <vfprintf+0x24>
    14a2:	b6 01       	movw	r22, r12
    14a4:	80 e2       	ldi	r24, 0x20	; 32
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    14ac:	2a 94       	dec	r2
    14ae:	f6 cf       	rjmp	.-20     	; 0x149c <vfprintf+0x39a>
    14b0:	f6 01       	movw	r30, r12
    14b2:	86 81       	ldd	r24, Z+6	; 0x06
    14b4:	97 81       	ldd	r25, Z+7	; 0x07
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <vfprintf+0x3ba>
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	9f ef       	ldi	r25, 0xFF	; 255
    14bc:	2b 96       	adiw	r28, 0x0b	; 11
    14be:	e2 e1       	ldi	r30, 0x12	; 18
    14c0:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__epilogue_restores__>

000014c4 <calloc>:
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	86 9f       	mul	r24, r22
    14ce:	80 01       	movw	r16, r0
    14d0:	87 9f       	mul	r24, r23
    14d2:	10 0d       	add	r17, r0
    14d4:	96 9f       	mul	r25, r22
    14d6:	10 0d       	add	r17, r0
    14d8:	11 24       	eor	r1, r1
    14da:	c8 01       	movw	r24, r16
    14dc:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <malloc>
    14e0:	ec 01       	movw	r28, r24
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	29 f0       	breq	.+10     	; 0x14f0 <calloc+0x2c>
    14e6:	a8 01       	movw	r20, r16
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	0e 94 aa 0b 	call	0x1754	; 0x1754 <memset>
    14f0:	ce 01       	movw	r24, r28
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <malloc>:
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	91 05       	cpc	r25, r1
    1508:	10 f4       	brcc	.+4      	; 0x150e <malloc+0x12>
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <__flp>
    1512:	f0 91 33 03 	lds	r31, 0x0333	; 0x800333 <__flp+0x1>
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	a0 e0       	ldi	r26, 0x00	; 0
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	30 97       	sbiw	r30, 0x00	; 0
    1520:	19 f1       	breq	.+70     	; 0x1568 <malloc+0x6c>
    1522:	40 81       	ld	r20, Z
    1524:	51 81       	ldd	r21, Z+1	; 0x01
    1526:	02 81       	ldd	r16, Z+2	; 0x02
    1528:	13 81       	ldd	r17, Z+3	; 0x03
    152a:	48 17       	cp	r20, r24
    152c:	59 07       	cpc	r21, r25
    152e:	c8 f0       	brcs	.+50     	; 0x1562 <malloc+0x66>
    1530:	84 17       	cp	r24, r20
    1532:	95 07       	cpc	r25, r21
    1534:	69 f4       	brne	.+26     	; 0x1550 <malloc+0x54>
    1536:	10 97       	sbiw	r26, 0x00	; 0
    1538:	31 f0       	breq	.+12     	; 0x1546 <malloc+0x4a>
    153a:	12 96       	adiw	r26, 0x02	; 2
    153c:	0c 93       	st	X, r16
    153e:	12 97       	sbiw	r26, 0x02	; 2
    1540:	13 96       	adiw	r26, 0x03	; 3
    1542:	1c 93       	st	X, r17
    1544:	27 c0       	rjmp	.+78     	; 0x1594 <malloc+0x98>
    1546:	00 93 32 03 	sts	0x0332, r16	; 0x800332 <__flp>
    154a:	10 93 33 03 	sts	0x0333, r17	; 0x800333 <__flp+0x1>
    154e:	22 c0       	rjmp	.+68     	; 0x1594 <malloc+0x98>
    1550:	21 15       	cp	r18, r1
    1552:	31 05       	cpc	r19, r1
    1554:	19 f0       	breq	.+6      	; 0x155c <malloc+0x60>
    1556:	42 17       	cp	r20, r18
    1558:	53 07       	cpc	r21, r19
    155a:	18 f4       	brcc	.+6      	; 0x1562 <malloc+0x66>
    155c:	9a 01       	movw	r18, r20
    155e:	bd 01       	movw	r22, r26
    1560:	ef 01       	movw	r28, r30
    1562:	df 01       	movw	r26, r30
    1564:	f8 01       	movw	r30, r16
    1566:	db cf       	rjmp	.-74     	; 0x151e <malloc+0x22>
    1568:	21 15       	cp	r18, r1
    156a:	31 05       	cpc	r19, r1
    156c:	f9 f0       	breq	.+62     	; 0x15ac <malloc+0xb0>
    156e:	28 1b       	sub	r18, r24
    1570:	39 0b       	sbc	r19, r25
    1572:	24 30       	cpi	r18, 0x04	; 4
    1574:	31 05       	cpc	r19, r1
    1576:	80 f4       	brcc	.+32     	; 0x1598 <malloc+0x9c>
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	9b 81       	ldd	r25, Y+3	; 0x03
    157c:	61 15       	cp	r22, r1
    157e:	71 05       	cpc	r23, r1
    1580:	21 f0       	breq	.+8      	; 0x158a <malloc+0x8e>
    1582:	fb 01       	movw	r30, r22
    1584:	93 83       	std	Z+3, r25	; 0x03
    1586:	82 83       	std	Z+2, r24	; 0x02
    1588:	04 c0       	rjmp	.+8      	; 0x1592 <malloc+0x96>
    158a:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <__flp+0x1>
    158e:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <__flp>
    1592:	fe 01       	movw	r30, r28
    1594:	32 96       	adiw	r30, 0x02	; 2
    1596:	44 c0       	rjmp	.+136    	; 0x1620 <malloc+0x124>
    1598:	fe 01       	movw	r30, r28
    159a:	e2 0f       	add	r30, r18
    159c:	f3 1f       	adc	r31, r19
    159e:	81 93       	st	Z+, r24
    15a0:	91 93       	st	Z+, r25
    15a2:	22 50       	subi	r18, 0x02	; 2
    15a4:	31 09       	sbc	r19, r1
    15a6:	39 83       	std	Y+1, r19	; 0x01
    15a8:	28 83       	st	Y, r18
    15aa:	3a c0       	rjmp	.+116    	; 0x1620 <malloc+0x124>
    15ac:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <__brkval>
    15b0:	30 91 31 03 	lds	r19, 0x0331	; 0x800331 <__brkval+0x1>
    15b4:	23 2b       	or	r18, r19
    15b6:	41 f4       	brne	.+16     	; 0x15c8 <malloc+0xcc>
    15b8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    15bc:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    15c0:	30 93 31 03 	sts	0x0331, r19	; 0x800331 <__brkval+0x1>
    15c4:	20 93 30 03 	sts	0x0330, r18	; 0x800330 <__brkval>
    15c8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    15cc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    15d0:	21 15       	cp	r18, r1
    15d2:	31 05       	cpc	r19, r1
    15d4:	41 f4       	brne	.+16     	; 0x15e6 <malloc+0xea>
    15d6:	2d b7       	in	r18, 0x3d	; 61
    15d8:	3e b7       	in	r19, 0x3e	; 62
    15da:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    15de:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    15e2:	24 1b       	sub	r18, r20
    15e4:	35 0b       	sbc	r19, r21
    15e6:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <__brkval>
    15ea:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <__brkval+0x1>
    15ee:	e2 17       	cp	r30, r18
    15f0:	f3 07       	cpc	r31, r19
    15f2:	a0 f4       	brcc	.+40     	; 0x161c <malloc+0x120>
    15f4:	2e 1b       	sub	r18, r30
    15f6:	3f 0b       	sbc	r19, r31
    15f8:	28 17       	cp	r18, r24
    15fa:	39 07       	cpc	r19, r25
    15fc:	78 f0       	brcs	.+30     	; 0x161c <malloc+0x120>
    15fe:	ac 01       	movw	r20, r24
    1600:	4e 5f       	subi	r20, 0xFE	; 254
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	24 17       	cp	r18, r20
    1606:	35 07       	cpc	r19, r21
    1608:	48 f0       	brcs	.+18     	; 0x161c <malloc+0x120>
    160a:	4e 0f       	add	r20, r30
    160c:	5f 1f       	adc	r21, r31
    160e:	50 93 31 03 	sts	0x0331, r21	; 0x800331 <__brkval+0x1>
    1612:	40 93 30 03 	sts	0x0330, r20	; 0x800330 <__brkval>
    1616:	81 93       	st	Z+, r24
    1618:	91 93       	st	Z+, r25
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <malloc+0x124>
    161c:	e0 e0       	ldi	r30, 0x00	; 0
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	cf 01       	movw	r24, r30
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <free>:
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	09 f4       	brne	.+2      	; 0x1636 <free+0xa>
    1634:	81 c0       	rjmp	.+258    	; 0x1738 <free+0x10c>
    1636:	fc 01       	movw	r30, r24
    1638:	32 97       	sbiw	r30, 0x02	; 2
    163a:	13 82       	std	Z+3, r1	; 0x03
    163c:	12 82       	std	Z+2, r1	; 0x02
    163e:	a0 91 32 03 	lds	r26, 0x0332	; 0x800332 <__flp>
    1642:	b0 91 33 03 	lds	r27, 0x0333	; 0x800333 <__flp+0x1>
    1646:	10 97       	sbiw	r26, 0x00	; 0
    1648:	81 f4       	brne	.+32     	; 0x166a <free+0x3e>
    164a:	20 81       	ld	r18, Z
    164c:	31 81       	ldd	r19, Z+1	; 0x01
    164e:	82 0f       	add	r24, r18
    1650:	93 1f       	adc	r25, r19
    1652:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <__brkval>
    1656:	30 91 31 03 	lds	r19, 0x0331	; 0x800331 <__brkval+0x1>
    165a:	28 17       	cp	r18, r24
    165c:	39 07       	cpc	r19, r25
    165e:	51 f5       	brne	.+84     	; 0x16b4 <free+0x88>
    1660:	f0 93 31 03 	sts	0x0331, r31	; 0x800331 <__brkval+0x1>
    1664:	e0 93 30 03 	sts	0x0330, r30	; 0x800330 <__brkval>
    1668:	67 c0       	rjmp	.+206    	; 0x1738 <free+0x10c>
    166a:	ed 01       	movw	r28, r26
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	ce 17       	cp	r28, r30
    1672:	df 07       	cpc	r29, r31
    1674:	40 f4       	brcc	.+16     	; 0x1686 <free+0x5a>
    1676:	4a 81       	ldd	r20, Y+2	; 0x02
    1678:	5b 81       	ldd	r21, Y+3	; 0x03
    167a:	9e 01       	movw	r18, r28
    167c:	41 15       	cp	r20, r1
    167e:	51 05       	cpc	r21, r1
    1680:	f1 f0       	breq	.+60     	; 0x16be <free+0x92>
    1682:	ea 01       	movw	r28, r20
    1684:	f5 cf       	rjmp	.-22     	; 0x1670 <free+0x44>
    1686:	d3 83       	std	Z+3, r29	; 0x03
    1688:	c2 83       	std	Z+2, r28	; 0x02
    168a:	40 81       	ld	r20, Z
    168c:	51 81       	ldd	r21, Z+1	; 0x01
    168e:	84 0f       	add	r24, r20
    1690:	95 1f       	adc	r25, r21
    1692:	c8 17       	cp	r28, r24
    1694:	d9 07       	cpc	r29, r25
    1696:	59 f4       	brne	.+22     	; 0x16ae <free+0x82>
    1698:	88 81       	ld	r24, Y
    169a:	99 81       	ldd	r25, Y+1	; 0x01
    169c:	84 0f       	add	r24, r20
    169e:	95 1f       	adc	r25, r21
    16a0:	02 96       	adiw	r24, 0x02	; 2
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	9b 81       	ldd	r25, Y+3	; 0x03
    16aa:	93 83       	std	Z+3, r25	; 0x03
    16ac:	82 83       	std	Z+2, r24	; 0x02
    16ae:	21 15       	cp	r18, r1
    16b0:	31 05       	cpc	r19, r1
    16b2:	29 f4       	brne	.+10     	; 0x16be <free+0x92>
    16b4:	f0 93 33 03 	sts	0x0333, r31	; 0x800333 <__flp+0x1>
    16b8:	e0 93 32 03 	sts	0x0332, r30	; 0x800332 <__flp>
    16bc:	3d c0       	rjmp	.+122    	; 0x1738 <free+0x10c>
    16be:	e9 01       	movw	r28, r18
    16c0:	fb 83       	std	Y+3, r31	; 0x03
    16c2:	ea 83       	std	Y+2, r30	; 0x02
    16c4:	49 91       	ld	r20, Y+
    16c6:	59 91       	ld	r21, Y+
    16c8:	c4 0f       	add	r28, r20
    16ca:	d5 1f       	adc	r29, r21
    16cc:	ec 17       	cp	r30, r28
    16ce:	fd 07       	cpc	r31, r29
    16d0:	61 f4       	brne	.+24     	; 0x16ea <free+0xbe>
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	84 0f       	add	r24, r20
    16d8:	95 1f       	adc	r25, r21
    16da:	02 96       	adiw	r24, 0x02	; 2
    16dc:	e9 01       	movw	r28, r18
    16de:	99 83       	std	Y+1, r25	; 0x01
    16e0:	88 83       	st	Y, r24
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	9b 83       	std	Y+3, r25	; 0x03
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	e0 e0       	ldi	r30, 0x00	; 0
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	12 96       	adiw	r26, 0x02	; 2
    16f0:	8d 91       	ld	r24, X+
    16f2:	9c 91       	ld	r25, X
    16f4:	13 97       	sbiw	r26, 0x03	; 3
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	19 f0       	breq	.+6      	; 0x1700 <free+0xd4>
    16fa:	fd 01       	movw	r30, r26
    16fc:	dc 01       	movw	r26, r24
    16fe:	f7 cf       	rjmp	.-18     	; 0x16ee <free+0xc2>
    1700:	8d 91       	ld	r24, X+
    1702:	9c 91       	ld	r25, X
    1704:	11 97       	sbiw	r26, 0x01	; 1
    1706:	9d 01       	movw	r18, r26
    1708:	2e 5f       	subi	r18, 0xFE	; 254
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	82 0f       	add	r24, r18
    170e:	93 1f       	adc	r25, r19
    1710:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <__brkval>
    1714:	30 91 31 03 	lds	r19, 0x0331	; 0x800331 <__brkval+0x1>
    1718:	28 17       	cp	r18, r24
    171a:	39 07       	cpc	r19, r25
    171c:	69 f4       	brne	.+26     	; 0x1738 <free+0x10c>
    171e:	30 97       	sbiw	r30, 0x00	; 0
    1720:	29 f4       	brne	.+10     	; 0x172c <free+0x100>
    1722:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <__flp+0x1>
    1726:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <__flp>
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <free+0x104>
    172c:	13 82       	std	Z+3, r1	; 0x03
    172e:	12 82       	std	Z+2, r1	; 0x02
    1730:	b0 93 31 03 	sts	0x0331, r27	; 0x800331 <__brkval+0x1>
    1734:	a0 93 30 03 	sts	0x0330, r26	; 0x800330 <__brkval>
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	08 95       	ret

0000173e <strnlen_P>:
    173e:	fc 01       	movw	r30, r24
    1740:	05 90       	lpm	r0, Z+
    1742:	61 50       	subi	r22, 0x01	; 1
    1744:	70 40       	sbci	r23, 0x00	; 0
    1746:	01 10       	cpse	r0, r1
    1748:	d8 f7       	brcc	.-10     	; 0x1740 <strnlen_P+0x2>
    174a:	80 95       	com	r24
    174c:	90 95       	com	r25
    174e:	8e 0f       	add	r24, r30
    1750:	9f 1f       	adc	r25, r31
    1752:	08 95       	ret

00001754 <memset>:
    1754:	dc 01       	movw	r26, r24
    1756:	01 c0       	rjmp	.+2      	; 0x175a <memset+0x6>
    1758:	6d 93       	st	X+, r22
    175a:	41 50       	subi	r20, 0x01	; 1
    175c:	50 40       	sbci	r21, 0x00	; 0
    175e:	e0 f7       	brcc	.-8      	; 0x1758 <memset+0x4>
    1760:	08 95       	ret

00001762 <strnlen>:
    1762:	fc 01       	movw	r30, r24
    1764:	61 50       	subi	r22, 0x01	; 1
    1766:	70 40       	sbci	r23, 0x00	; 0
    1768:	01 90       	ld	r0, Z+
    176a:	01 10       	cpse	r0, r1
    176c:	d8 f7       	brcc	.-10     	; 0x1764 <strnlen+0x2>
    176e:	80 95       	com	r24
    1770:	90 95       	com	r25
    1772:	8e 0f       	add	r24, r30
    1774:	9f 1f       	adc	r25, r31
    1776:	08 95       	ret

00001778 <fputc>:
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	fb 01       	movw	r30, r22
    1782:	23 81       	ldd	r18, Z+3	; 0x03
    1784:	21 fd       	sbrc	r18, 1
    1786:	03 c0       	rjmp	.+6      	; 0x178e <fputc+0x16>
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	9f ef       	ldi	r25, 0xFF	; 255
    178c:	2c c0       	rjmp	.+88     	; 0x17e6 <fputc+0x6e>
    178e:	22 ff       	sbrs	r18, 2
    1790:	16 c0       	rjmp	.+44     	; 0x17be <fputc+0x46>
    1792:	46 81       	ldd	r20, Z+6	; 0x06
    1794:	57 81       	ldd	r21, Z+7	; 0x07
    1796:	24 81       	ldd	r18, Z+4	; 0x04
    1798:	35 81       	ldd	r19, Z+5	; 0x05
    179a:	42 17       	cp	r20, r18
    179c:	53 07       	cpc	r21, r19
    179e:	44 f4       	brge	.+16     	; 0x17b0 <fputc+0x38>
    17a0:	a0 81       	ld	r26, Z
    17a2:	b1 81       	ldd	r27, Z+1	; 0x01
    17a4:	9d 01       	movw	r18, r26
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	31 83       	std	Z+1, r19	; 0x01
    17ac:	20 83       	st	Z, r18
    17ae:	8c 93       	st	X, r24
    17b0:	26 81       	ldd	r18, Z+6	; 0x06
    17b2:	37 81       	ldd	r19, Z+7	; 0x07
    17b4:	2f 5f       	subi	r18, 0xFF	; 255
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	37 83       	std	Z+7, r19	; 0x07
    17ba:	26 83       	std	Z+6, r18	; 0x06
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <fputc+0x6e>
    17be:	8b 01       	movw	r16, r22
    17c0:	ec 01       	movw	r28, r24
    17c2:	fb 01       	movw	r30, r22
    17c4:	00 84       	ldd	r0, Z+8	; 0x08
    17c6:	f1 85       	ldd	r31, Z+9	; 0x09
    17c8:	e0 2d       	mov	r30, r0
    17ca:	09 95       	icall
    17cc:	89 2b       	or	r24, r25
    17ce:	e1 f6       	brne	.-72     	; 0x1788 <fputc+0x10>
    17d0:	d8 01       	movw	r26, r16
    17d2:	16 96       	adiw	r26, 0x06	; 6
    17d4:	8d 91       	ld	r24, X+
    17d6:	9c 91       	ld	r25, X
    17d8:	17 97       	sbiw	r26, 0x07	; 7
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	17 96       	adiw	r26, 0x07	; 7
    17de:	9c 93       	st	X, r25
    17e0:	8e 93       	st	-X, r24
    17e2:	16 97       	sbiw	r26, 0x06	; 6
    17e4:	ce 01       	movw	r24, r28
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	08 95       	ret

000017f0 <__ultoa_invert>:
    17f0:	fa 01       	movw	r30, r20
    17f2:	aa 27       	eor	r26, r26
    17f4:	28 30       	cpi	r18, 0x08	; 8
    17f6:	51 f1       	breq	.+84     	; 0x184c <__ultoa_invert+0x5c>
    17f8:	20 31       	cpi	r18, 0x10	; 16
    17fa:	81 f1       	breq	.+96     	; 0x185c <__ultoa_invert+0x6c>
    17fc:	e8 94       	clt
    17fe:	6f 93       	push	r22
    1800:	6e 7f       	andi	r22, 0xFE	; 254
    1802:	6e 5f       	subi	r22, 0xFE	; 254
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	8f 4f       	sbci	r24, 0xFF	; 255
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	af 4f       	sbci	r26, 0xFF	; 255
    180c:	b1 e0       	ldi	r27, 0x01	; 1
    180e:	3e d0       	rcall	.+124    	; 0x188c <__ultoa_invert+0x9c>
    1810:	b4 e0       	ldi	r27, 0x04	; 4
    1812:	3c d0       	rcall	.+120    	; 0x188c <__ultoa_invert+0x9c>
    1814:	67 0f       	add	r22, r23
    1816:	78 1f       	adc	r23, r24
    1818:	89 1f       	adc	r24, r25
    181a:	9a 1f       	adc	r25, r26
    181c:	a1 1d       	adc	r26, r1
    181e:	68 0f       	add	r22, r24
    1820:	79 1f       	adc	r23, r25
    1822:	8a 1f       	adc	r24, r26
    1824:	91 1d       	adc	r25, r1
    1826:	a1 1d       	adc	r26, r1
    1828:	6a 0f       	add	r22, r26
    182a:	71 1d       	adc	r23, r1
    182c:	81 1d       	adc	r24, r1
    182e:	91 1d       	adc	r25, r1
    1830:	a1 1d       	adc	r26, r1
    1832:	20 d0       	rcall	.+64     	; 0x1874 <__ultoa_invert+0x84>
    1834:	09 f4       	brne	.+2      	; 0x1838 <__ultoa_invert+0x48>
    1836:	68 94       	set
    1838:	3f 91       	pop	r19
    183a:	2a e0       	ldi	r18, 0x0A	; 10
    183c:	26 9f       	mul	r18, r22
    183e:	11 24       	eor	r1, r1
    1840:	30 19       	sub	r19, r0
    1842:	30 5d       	subi	r19, 0xD0	; 208
    1844:	31 93       	st	Z+, r19
    1846:	de f6       	brtc	.-74     	; 0x17fe <__ultoa_invert+0xe>
    1848:	cf 01       	movw	r24, r30
    184a:	08 95       	ret
    184c:	46 2f       	mov	r20, r22
    184e:	47 70       	andi	r20, 0x07	; 7
    1850:	40 5d       	subi	r20, 0xD0	; 208
    1852:	41 93       	st	Z+, r20
    1854:	b3 e0       	ldi	r27, 0x03	; 3
    1856:	0f d0       	rcall	.+30     	; 0x1876 <__ultoa_invert+0x86>
    1858:	c9 f7       	brne	.-14     	; 0x184c <__ultoa_invert+0x5c>
    185a:	f6 cf       	rjmp	.-20     	; 0x1848 <__ultoa_invert+0x58>
    185c:	46 2f       	mov	r20, r22
    185e:	4f 70       	andi	r20, 0x0F	; 15
    1860:	40 5d       	subi	r20, 0xD0	; 208
    1862:	4a 33       	cpi	r20, 0x3A	; 58
    1864:	18 f0       	brcs	.+6      	; 0x186c <__ultoa_invert+0x7c>
    1866:	49 5d       	subi	r20, 0xD9	; 217
    1868:	31 fd       	sbrc	r19, 1
    186a:	40 52       	subi	r20, 0x20	; 32
    186c:	41 93       	st	Z+, r20
    186e:	02 d0       	rcall	.+4      	; 0x1874 <__ultoa_invert+0x84>
    1870:	a9 f7       	brne	.-22     	; 0x185c <__ultoa_invert+0x6c>
    1872:	ea cf       	rjmp	.-44     	; 0x1848 <__ultoa_invert+0x58>
    1874:	b4 e0       	ldi	r27, 0x04	; 4
    1876:	a6 95       	lsr	r26
    1878:	97 95       	ror	r25
    187a:	87 95       	ror	r24
    187c:	77 95       	ror	r23
    187e:	67 95       	ror	r22
    1880:	ba 95       	dec	r27
    1882:	c9 f7       	brne	.-14     	; 0x1876 <__ultoa_invert+0x86>
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	61 05       	cpc	r22, r1
    1888:	71 05       	cpc	r23, r1
    188a:	08 95       	ret
    188c:	9b 01       	movw	r18, r22
    188e:	ac 01       	movw	r20, r24
    1890:	0a 2e       	mov	r0, r26
    1892:	06 94       	lsr	r0
    1894:	57 95       	ror	r21
    1896:	47 95       	ror	r20
    1898:	37 95       	ror	r19
    189a:	27 95       	ror	r18
    189c:	ba 95       	dec	r27
    189e:	c9 f7       	brne	.-14     	; 0x1892 <__ultoa_invert+0xa2>
    18a0:	62 0f       	add	r22, r18
    18a2:	73 1f       	adc	r23, r19
    18a4:	84 1f       	adc	r24, r20
    18a6:	95 1f       	adc	r25, r21
    18a8:	a0 1d       	adc	r26, r0
    18aa:	08 95       	ret

000018ac <__divmodsi4>:
    18ac:	05 2e       	mov	r0, r21
    18ae:	97 fb       	bst	r25, 7
    18b0:	1e f4       	brtc	.+6      	; 0x18b8 <__divmodsi4+0xc>
    18b2:	00 94       	com	r0
    18b4:	0e 94 6d 0c 	call	0x18da	; 0x18da <__negsi2>
    18b8:	57 fd       	sbrc	r21, 7
    18ba:	07 d0       	rcall	.+14     	; 0x18ca <__divmodsi4_neg2>
    18bc:	0e 94 bf 0c 	call	0x197e	; 0x197e <__udivmodsi4>
    18c0:	07 fc       	sbrc	r0, 7
    18c2:	03 d0       	rcall	.+6      	; 0x18ca <__divmodsi4_neg2>
    18c4:	4e f4       	brtc	.+18     	; 0x18d8 <__divmodsi4_exit>
    18c6:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__negsi2>

000018ca <__divmodsi4_neg2>:
    18ca:	50 95       	com	r21
    18cc:	40 95       	com	r20
    18ce:	30 95       	com	r19
    18d0:	21 95       	neg	r18
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	4f 4f       	sbci	r20, 0xFF	; 255
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255

000018d8 <__divmodsi4_exit>:
    18d8:	08 95       	ret

000018da <__negsi2>:
    18da:	90 95       	com	r25
    18dc:	80 95       	com	r24
    18de:	70 95       	com	r23
    18e0:	61 95       	neg	r22
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	8f 4f       	sbci	r24, 0xFF	; 255
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	08 95       	ret

000018ea <__muluhisi3>:
    18ea:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__umulhisi3>
    18ee:	a5 9f       	mul	r26, r21
    18f0:	90 0d       	add	r25, r0
    18f2:	b4 9f       	mul	r27, r20
    18f4:	90 0d       	add	r25, r0
    18f6:	a4 9f       	mul	r26, r20
    18f8:	80 0d       	add	r24, r0
    18fa:	91 1d       	adc	r25, r1
    18fc:	11 24       	eor	r1, r1
    18fe:	08 95       	ret

00001900 <__mulshisi3>:
    1900:	b7 ff       	sbrs	r27, 7
    1902:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__muluhisi3>

00001906 <__mulohisi3>:
    1906:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__muluhisi3>
    190a:	82 1b       	sub	r24, r18
    190c:	93 0b       	sbc	r25, r19
    190e:	08 95       	ret

00001910 <__prologue_saves__>:
    1910:	2f 92       	push	r2
    1912:	3f 92       	push	r3
    1914:	4f 92       	push	r4
    1916:	5f 92       	push	r5
    1918:	6f 92       	push	r6
    191a:	7f 92       	push	r7
    191c:	8f 92       	push	r8
    191e:	9f 92       	push	r9
    1920:	af 92       	push	r10
    1922:	bf 92       	push	r11
    1924:	cf 92       	push	r12
    1926:	df 92       	push	r13
    1928:	ef 92       	push	r14
    192a:	ff 92       	push	r15
    192c:	0f 93       	push	r16
    192e:	1f 93       	push	r17
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	ca 1b       	sub	r28, r26
    193a:	db 0b       	sbc	r29, r27
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	09 94       	ijmp

00001948 <__epilogue_restores__>:
    1948:	2a 88       	ldd	r2, Y+18	; 0x12
    194a:	39 88       	ldd	r3, Y+17	; 0x11
    194c:	48 88       	ldd	r4, Y+16	; 0x10
    194e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1950:	6e 84       	ldd	r6, Y+14	; 0x0e
    1952:	7d 84       	ldd	r7, Y+13	; 0x0d
    1954:	8c 84       	ldd	r8, Y+12	; 0x0c
    1956:	9b 84       	ldd	r9, Y+11	; 0x0b
    1958:	aa 84       	ldd	r10, Y+10	; 0x0a
    195a:	b9 84       	ldd	r11, Y+9	; 0x09
    195c:	c8 84       	ldd	r12, Y+8	; 0x08
    195e:	df 80       	ldd	r13, Y+7	; 0x07
    1960:	ee 80       	ldd	r14, Y+6	; 0x06
    1962:	fd 80       	ldd	r15, Y+5	; 0x05
    1964:	0c 81       	ldd	r16, Y+4	; 0x04
    1966:	1b 81       	ldd	r17, Y+3	; 0x03
    1968:	aa 81       	ldd	r26, Y+2	; 0x02
    196a:	b9 81       	ldd	r27, Y+1	; 0x01
    196c:	ce 0f       	add	r28, r30
    196e:	d1 1d       	adc	r29, r1
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	ed 01       	movw	r28, r26
    197c:	08 95       	ret

0000197e <__udivmodsi4>:
    197e:	a1 e2       	ldi	r26, 0x21	; 33
    1980:	1a 2e       	mov	r1, r26
    1982:	aa 1b       	sub	r26, r26
    1984:	bb 1b       	sub	r27, r27
    1986:	fd 01       	movw	r30, r26
    1988:	0d c0       	rjmp	.+26     	; 0x19a4 <__udivmodsi4_ep>

0000198a <__udivmodsi4_loop>:
    198a:	aa 1f       	adc	r26, r26
    198c:	bb 1f       	adc	r27, r27
    198e:	ee 1f       	adc	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	a2 17       	cp	r26, r18
    1994:	b3 07       	cpc	r27, r19
    1996:	e4 07       	cpc	r30, r20
    1998:	f5 07       	cpc	r31, r21
    199a:	20 f0       	brcs	.+8      	; 0x19a4 <__udivmodsi4_ep>
    199c:	a2 1b       	sub	r26, r18
    199e:	b3 0b       	sbc	r27, r19
    19a0:	e4 0b       	sbc	r30, r20
    19a2:	f5 0b       	sbc	r31, r21

000019a4 <__udivmodsi4_ep>:
    19a4:	66 1f       	adc	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	88 1f       	adc	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	1a 94       	dec	r1
    19ae:	69 f7       	brne	.-38     	; 0x198a <__udivmodsi4_loop>
    19b0:	60 95       	com	r22
    19b2:	70 95       	com	r23
    19b4:	80 95       	com	r24
    19b6:	90 95       	com	r25
    19b8:	9b 01       	movw	r18, r22
    19ba:	ac 01       	movw	r20, r24
    19bc:	bd 01       	movw	r22, r26
    19be:	cf 01       	movw	r24, r30
    19c0:	08 95       	ret

000019c2 <__umulhisi3>:
    19c2:	a2 9f       	mul	r26, r18
    19c4:	b0 01       	movw	r22, r0
    19c6:	b3 9f       	mul	r27, r19
    19c8:	c0 01       	movw	r24, r0
    19ca:	a3 9f       	mul	r26, r19
    19cc:	70 0d       	add	r23, r0
    19ce:	81 1d       	adc	r24, r1
    19d0:	11 24       	eor	r1, r1
    19d2:	91 1d       	adc	r25, r1
    19d4:	b2 9f       	mul	r27, r18
    19d6:	70 0d       	add	r23, r0
    19d8:	81 1d       	adc	r24, r1
    19da:	11 24       	eor	r1, r1
    19dc:	91 1d       	adc	r25, r1
    19de:	08 95       	ret

000019e0 <_exit>:
    19e0:	f8 94       	cli

000019e2 <__stop_program>:
    19e2:	ff cf       	rjmp	.-2      	; 0x19e2 <__stop_program>
