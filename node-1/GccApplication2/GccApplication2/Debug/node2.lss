
node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  0008093c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  00080d70  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00080df4  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  000811f4  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00003c5c  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000beb  00000000  00000000  00024112  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d6c  00000000  00000000  00024cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000158  00000000  00000000  00025a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00025bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011d2e  00000000  00000000  00025cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003158  00000000  00000000  00037a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054f49  00000000  00000000  0003ab5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000048c  00000000  00000000  0008faa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 59 02 08 00 55 02 08 00 55 02 08 00     ... Y...U...U...
   80010:	55 02 08 00 55 02 08 00 55 02 08 00 00 00 00 00     U...U...U.......
	...
   8002c:	55 02 08 00 55 02 08 00 00 00 00 00 55 02 08 00     U...U.......U...
   8003c:	55 02 08 00 55 02 08 00 55 02 08 00 55 02 08 00     U...U...U...U...
   8004c:	55 02 08 00 55 02 08 00 55 02 08 00 55 02 08 00     U...U...U...U...
   8005c:	55 02 08 00 dd 06 08 00 55 02 08 00 00 00 00 00     U.......U.......
   8006c:	55 02 08 00 55 02 08 00 55 02 08 00 55 02 08 00     U...U...U...U...
	...
   80084:	55 02 08 00 55 02 08 00 55 02 08 00 55 02 08 00     U...U...U...U...
   80094:	55 02 08 00 55 02 08 00 55 02 08 00 55 02 08 00     U...U...U...U...
   800a4:	00 00 00 00 55 02 08 00 55 02 08 00 55 02 08 00     ....U...U...U...
   800b4:	55 02 08 00 55 02 08 00 55 02 08 00 55 02 08 00     U...U...U...U...
   800c4:	55 02 08 00 55 02 08 00 55 02 08 00 55 02 08 00     U...U...U...U...
   800d4:	55 02 08 00 55 02 08 00 55 02 08 00 55 02 08 00     U...U...U...U...
   800e4:	55 02 08 00 55 02 08 00 e5 01 08 00 55 02 08 00     U...U.......U...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	0008093c 	.word	0x0008093c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008093c 	.word	0x0008093c
   80154:	20000438 	.word	0x20000438
   80158:	0008093c 	.word	0x0008093c
   8015c:	00000000 	.word	0x00000000

00080160 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80160:	014b      	lsls	r3, r1, #5
   80162:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80166:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8016a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8016e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80172:	d033      	beq.n	801dc <can_receive+0x7c>
{
   80174:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80176:	014b      	lsls	r3, r1, #5
   80178:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8017c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80180:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80184:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80188:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8018c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80190:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80192:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   80196:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8019a:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8019c:	2300      	movs	r3, #0
   8019e:	e003      	b.n	801a8 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   801a0:	18c6      	adds	r6, r0, r3
   801a2:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   801a4:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   801a6:	3301      	adds	r3, #1
   801a8:	42ab      	cmp	r3, r5
   801aa:	da05      	bge.n	801b8 <can_receive+0x58>
			if(i < 4)
   801ac:	2b03      	cmp	r3, #3
   801ae:	dcf7      	bgt.n	801a0 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   801b0:	18c6      	adds	r6, r0, r3
   801b2:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   801b4:	0a24      	lsrs	r4, r4, #8
   801b6:	e7f6      	b.n	801a6 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   801b8:	4b09      	ldr	r3, [pc, #36]	; (801e0 <can_receive+0x80>)
   801ba:	f101 0210 	add.w	r2, r1, #16
   801be:	0152      	lsls	r2, r2, #5
   801c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   801c4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   801c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   801ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   801ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   801d6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   801d8:	bc70      	pop	{r4, r5, r6}
   801da:	4770      	bx	lr
		return 1;
   801dc:	2001      	movs	r0, #1
   801de:	4770      	bx	lr
   801e0:	400b4000 	.word	0x400b4000

000801e4 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   801e4:	b510      	push	{r4, lr}
   801e6:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   801e8:	4b15      	ldr	r3, [pc, #84]	; (80240 <CAN0_Handler+0x5c>)
   801ea:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   801ec:	f014 0f06 	tst.w	r4, #6
   801f0:	d019      	beq.n	80226 <CAN0_Handler+0x42>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   801f2:	f014 0f02 	tst.w	r4, #2
   801f6:	d108      	bne.n	8020a <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   801f8:	f014 0f04 	tst.w	r4, #4
   801fc:	d00a      	beq.n	80214 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   801fe:	2102      	movs	r1, #2
   80200:	a801      	add	r0, sp, #4
   80202:	4b10      	ldr	r3, [pc, #64]	; (80244 <CAN0_Handler+0x60>)
   80204:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80206:	2300      	movs	r3, #0
   80208:	e009      	b.n	8021e <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   8020a:	2101      	movs	r1, #1
   8020c:	a801      	add	r0, sp, #4
   8020e:	4b0d      	ldr	r3, [pc, #52]	; (80244 <CAN0_Handler+0x60>)
   80210:	4798      	blx	r3
   80212:	e7f8      	b.n	80206 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80214:	480c      	ldr	r0, [pc, #48]	; (80248 <CAN0_Handler+0x64>)
   80216:	4b0d      	ldr	r3, [pc, #52]	; (8024c <CAN0_Handler+0x68>)
   80218:	4798      	blx	r3
   8021a:	e7f4      	b.n	80206 <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   8021c:	3301      	adds	r3, #1
   8021e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80222:	4293      	cmp	r3, r2
   80224:	dbfa      	blt.n	8021c <CAN0_Handler+0x38>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80226:	f014 0f01 	tst.w	r4, #1
   8022a:	d002      	beq.n	80232 <CAN0_Handler+0x4e>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8022c:	2201      	movs	r2, #1
   8022e:	4b04      	ldr	r3, [pc, #16]	; (80240 <CAN0_Handler+0x5c>)
   80230:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80232:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80236:	4b06      	ldr	r3, [pc, #24]	; (80250 <CAN0_Handler+0x6c>)
   80238:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8023c:	b004      	add	sp, #16
   8023e:	bd10      	pop	{r4, pc}
   80240:	400b4000 	.word	0x400b4000
   80244:	00080161 	.word	0x00080161
   80248:	000808b4 	.word	0x000808b4
   8024c:	0008062d 	.word	0x0008062d
   80250:	e000e100 	.word	0xe000e100

00080254 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80254:	e7fe      	b.n	80254 <Dummy_Handler>
	...

00080258 <Reset_Handler>:
{
   80258:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8025a:	4b11      	ldr	r3, [pc, #68]	; (802a0 <Reset_Handler+0x48>)
   8025c:	4a11      	ldr	r2, [pc, #68]	; (802a4 <Reset_Handler+0x4c>)
   8025e:	429a      	cmp	r2, r3
   80260:	d009      	beq.n	80276 <Reset_Handler+0x1e>
   80262:	4b0f      	ldr	r3, [pc, #60]	; (802a0 <Reset_Handler+0x48>)
   80264:	4a0f      	ldr	r2, [pc, #60]	; (802a4 <Reset_Handler+0x4c>)
   80266:	e003      	b.n	80270 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80268:	6811      	ldr	r1, [r2, #0]
   8026a:	6019      	str	r1, [r3, #0]
   8026c:	3304      	adds	r3, #4
   8026e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80270:	490d      	ldr	r1, [pc, #52]	; (802a8 <Reset_Handler+0x50>)
   80272:	428b      	cmp	r3, r1
   80274:	d3f8      	bcc.n	80268 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80276:	4b0d      	ldr	r3, [pc, #52]	; (802ac <Reset_Handler+0x54>)
   80278:	e002      	b.n	80280 <Reset_Handler+0x28>
                *pDest++ = 0;
   8027a:	2200      	movs	r2, #0
   8027c:	601a      	str	r2, [r3, #0]
   8027e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80280:	4a0b      	ldr	r2, [pc, #44]	; (802b0 <Reset_Handler+0x58>)
   80282:	4293      	cmp	r3, r2
   80284:	d3f9      	bcc.n	8027a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80286:	4b0b      	ldr	r3, [pc, #44]	; (802b4 <Reset_Handler+0x5c>)
   80288:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8028c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80290:	4a09      	ldr	r2, [pc, #36]	; (802b8 <Reset_Handler+0x60>)
   80292:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80294:	4b09      	ldr	r3, [pc, #36]	; (802bc <Reset_Handler+0x64>)
   80296:	4798      	blx	r3
        main();
   80298:	4b09      	ldr	r3, [pc, #36]	; (802c0 <Reset_Handler+0x68>)
   8029a:	4798      	blx	r3
   8029c:	e7fe      	b.n	8029c <Reset_Handler+0x44>
   8029e:	bf00      	nop
   802a0:	20000000 	.word	0x20000000
   802a4:	0008093c 	.word	0x0008093c
   802a8:	20000434 	.word	0x20000434
   802ac:	20000434 	.word	0x20000434
   802b0:	200004b8 	.word	0x200004b8
   802b4:	00080000 	.word	0x00080000
   802b8:	e000ed00 	.word	0xe000ed00
   802bc:	00080745 	.word	0x00080745
   802c0:	00080369 	.word	0x00080369

000802c4 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   802c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   802c8:	4a20      	ldr	r2, [pc, #128]	; (8034c <SystemInit+0x88>)
   802ca:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   802cc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   802d0:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   802d2:	4b1f      	ldr	r3, [pc, #124]	; (80350 <SystemInit+0x8c>)
   802d4:	6a1b      	ldr	r3, [r3, #32]
   802d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   802da:	d107      	bne.n	802ec <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   802dc:	4a1d      	ldr	r2, [pc, #116]	; (80354 <SystemInit+0x90>)
   802de:	4b1c      	ldr	r3, [pc, #112]	; (80350 <SystemInit+0x8c>)
   802e0:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   802e2:	4b1b      	ldr	r3, [pc, #108]	; (80350 <SystemInit+0x8c>)
   802e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   802e6:	f013 0f01 	tst.w	r3, #1
   802ea:	d0fa      	beq.n	802e2 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   802ec:	4a1a      	ldr	r2, [pc, #104]	; (80358 <SystemInit+0x94>)
   802ee:	4b18      	ldr	r3, [pc, #96]	; (80350 <SystemInit+0x8c>)
   802f0:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   802f2:	4b17      	ldr	r3, [pc, #92]	; (80350 <SystemInit+0x8c>)
   802f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   802f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   802fa:	d0fa      	beq.n	802f2 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   802fc:	4a14      	ldr	r2, [pc, #80]	; (80350 <SystemInit+0x8c>)
   802fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80300:	f023 0303 	bic.w	r3, r3, #3
   80304:	f043 0301 	orr.w	r3, r3, #1
   80308:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8030a:	4b11      	ldr	r3, [pc, #68]	; (80350 <SystemInit+0x8c>)
   8030c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8030e:	f013 0f08 	tst.w	r3, #8
   80312:	d0fa      	beq.n	8030a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80314:	4a11      	ldr	r2, [pc, #68]	; (8035c <SystemInit+0x98>)
   80316:	4b0e      	ldr	r3, [pc, #56]	; (80350 <SystemInit+0x8c>)
   80318:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8031a:	4b0d      	ldr	r3, [pc, #52]	; (80350 <SystemInit+0x8c>)
   8031c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8031e:	f013 0f02 	tst.w	r3, #2
   80322:	d0fa      	beq.n	8031a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80324:	2211      	movs	r2, #17
   80326:	4b0a      	ldr	r3, [pc, #40]	; (80350 <SystemInit+0x8c>)
   80328:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8032a:	4b09      	ldr	r3, [pc, #36]	; (80350 <SystemInit+0x8c>)
   8032c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8032e:	f013 0f08 	tst.w	r3, #8
   80332:	d0fa      	beq.n	8032a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80334:	2212      	movs	r2, #18
   80336:	4b06      	ldr	r3, [pc, #24]	; (80350 <SystemInit+0x8c>)
   80338:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8033a:	4b05      	ldr	r3, [pc, #20]	; (80350 <SystemInit+0x8c>)
   8033c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8033e:	f013 0f08 	tst.w	r3, #8
   80342:	d0fa      	beq.n	8033a <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80344:	4a06      	ldr	r2, [pc, #24]	; (80360 <SystemInit+0x9c>)
   80346:	4b07      	ldr	r3, [pc, #28]	; (80364 <SystemInit+0xa0>)
   80348:	601a      	str	r2, [r3, #0]
   8034a:	4770      	bx	lr
   8034c:	400e0a00 	.word	0x400e0a00
   80350:	400e0600 	.word	0x400e0600
   80354:	00370809 	.word	0x00370809
   80358:	01370809 	.word	0x01370809
   8035c:	200d3f01 	.word	0x200d3f01
   80360:	0501bd00 	.word	0x0501bd00
   80364:	20000000 	.word	0x20000000

00080368 <main>:




int main(void)
{
   80368:	b508      	push	{r3, lr}
	
	//Linjen under var fra den utdelte koden for node2 
    /* Initialize the SAM system */
    SystemInit();
   8036a:	4b07      	ldr	r3, [pc, #28]	; (80388 <main+0x20>)
   8036c:	4798      	blx	r3
	configure_uart();
   8036e:	4b07      	ldr	r3, [pc, #28]	; (8038c <main+0x24>)
   80370:	4798      	blx	r3
	WDT->WDT_MR |= 1 << 15;
   80372:	4a07      	ldr	r2, [pc, #28]	; (80390 <main+0x28>)
   80374:	6853      	ldr	r3, [r2, #4]
   80376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   8037a:	6053      	str	r3, [r2, #4]
	

	//uint8_t * ch = ' ';
	//uart_putchar('F');
    //uart_getchar(ch);
	printf("nyy %c\r\n", 'B');
   8037c:	2142      	movs	r1, #66	; 0x42
   8037e:	4805      	ldr	r0, [pc, #20]	; (80394 <main+0x2c>)
   80380:	4b05      	ldr	r3, [pc, #20]	; (80398 <main+0x30>)
   80382:	4798      	blx	r3
   80384:	e7fe      	b.n	80384 <main+0x1c>
   80386:	bf00      	nop
   80388:	000802c5 	.word	0x000802c5
   8038c:	00080651 	.word	0x00080651
   80390:	400e1a50 	.word	0x400e1a50
   80394:	000808e0 	.word	0x000808e0
   80398:	0008062d 	.word	0x0008062d

0008039c <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   8039c:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   8039e:	b2c8      	uxtb	r0, r1
   803a0:	4b01      	ldr	r3, [pc, #4]	; (803a8 <printchar+0xc>)
   803a2:	4798      	blx	r3
   803a4:	bd08      	pop	{r3, pc}
   803a6:	bf00      	nop
   803a8:	000806b9 	.word	0x000806b9

000803ac <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   803ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803b0:	4607      	mov	r7, r0
   803b2:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   803b4:	1e15      	subs	r5, r2, #0
   803b6:	dd02      	ble.n	803be <prints+0x12>
   803b8:	460a      	mov	r2, r1
   803ba:	2100      	movs	r1, #0
   803bc:	e004      	b.n	803c8 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   803be:	f04f 0820 	mov.w	r8, #32
   803c2:	e00e      	b.n	803e2 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   803c4:	3101      	adds	r1, #1
   803c6:	3201      	adds	r2, #1
   803c8:	7810      	ldrb	r0, [r2, #0]
   803ca:	2800      	cmp	r0, #0
   803cc:	d1fa      	bne.n	803c4 <prints+0x18>
		if (len >= width) width = 0;
   803ce:	42a9      	cmp	r1, r5
   803d0:	da01      	bge.n	803d6 <prints+0x2a>
		else width -= len;
   803d2:	1a6d      	subs	r5, r5, r1
   803d4:	e000      	b.n	803d8 <prints+0x2c>
		if (len >= width) width = 0;
   803d6:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   803d8:	f013 0f02 	tst.w	r3, #2
   803dc:	d106      	bne.n	803ec <prints+0x40>
	register int pc = 0, padchar = ' ';
   803de:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   803e2:	f013 0401 	ands.w	r4, r3, #1
   803e6:	d00a      	beq.n	803fe <prints+0x52>
	register int pc = 0, padchar = ' ';
   803e8:	2400      	movs	r4, #0
   803ea:	e010      	b.n	8040e <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   803ec:	f04f 0830 	mov.w	r8, #48	; 0x30
   803f0:	e7f7      	b.n	803e2 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   803f2:	4641      	mov	r1, r8
   803f4:	4638      	mov	r0, r7
   803f6:	4b0d      	ldr	r3, [pc, #52]	; (8042c <prints+0x80>)
   803f8:	4798      	blx	r3
			++pc;
   803fa:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   803fc:	3d01      	subs	r5, #1
   803fe:	2d00      	cmp	r5, #0
   80400:	dcf7      	bgt.n	803f2 <prints+0x46>
   80402:	e004      	b.n	8040e <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   80404:	4638      	mov	r0, r7
   80406:	4b09      	ldr	r3, [pc, #36]	; (8042c <prints+0x80>)
   80408:	4798      	blx	r3
		++pc;
   8040a:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   8040c:	3601      	adds	r6, #1
   8040e:	7831      	ldrb	r1, [r6, #0]
   80410:	2900      	cmp	r1, #0
   80412:	d1f7      	bne.n	80404 <prints+0x58>
   80414:	e005      	b.n	80422 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   80416:	4641      	mov	r1, r8
   80418:	4638      	mov	r0, r7
   8041a:	4b04      	ldr	r3, [pc, #16]	; (8042c <prints+0x80>)
   8041c:	4798      	blx	r3
		++pc;
   8041e:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80420:	3d01      	subs	r5, #1
   80422:	2d00      	cmp	r5, #0
   80424:	dcf7      	bgt.n	80416 <prints+0x6a>
	}

	return pc;
}
   80426:	4620      	mov	r0, r4
   80428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8042c:	0008039d 	.word	0x0008039d

00080430 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80430:	b5f0      	push	{r4, r5, r6, r7, lr}
   80432:	b085      	sub	sp, #20
   80434:	4607      	mov	r7, r0
   80436:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80438:	b151      	cbz	r1, 80450 <printi+0x20>
   8043a:	461e      	mov	r6, r3
   8043c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   8043e:	b113      	cbz	r3, 80446 <printi+0x16>
   80440:	2a0a      	cmp	r2, #10
   80442:	d012      	beq.n	8046a <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80444:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80446:	ad04      	add	r5, sp, #16
   80448:	2300      	movs	r3, #0
   8044a:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   8044e:	e018      	b.n	80482 <printi+0x52>
		print_buf[0] = '0';
   80450:	2330      	movs	r3, #48	; 0x30
   80452:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80456:	2300      	movs	r3, #0
   80458:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   8045c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8045e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80460:	a901      	add	r1, sp, #4
   80462:	4638      	mov	r0, r7
   80464:	4c1b      	ldr	r4, [pc, #108]	; (804d4 <printi+0xa4>)
   80466:	47a0      	blx	r4
   80468:	e029      	b.n	804be <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   8046a:	2900      	cmp	r1, #0
   8046c:	db01      	blt.n	80472 <printi+0x42>
	register int t, neg = 0, pc = 0;
   8046e:	2600      	movs	r6, #0
   80470:	e7e9      	b.n	80446 <printi+0x16>
		u = -i;
   80472:	424c      	negs	r4, r1
		neg = 1;
   80474:	2601      	movs	r6, #1
   80476:	e7e6      	b.n	80446 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80478:	3330      	adds	r3, #48	; 0x30
   8047a:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   8047e:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80482:	b14c      	cbz	r4, 80498 <printi+0x68>
		t = u % b;
   80484:	fbb4 f3f2 	udiv	r3, r4, r2
   80488:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   8048c:	2b09      	cmp	r3, #9
   8048e:	ddf3      	ble.n	80478 <printi+0x48>
			t += letbase - '0' - 10;
   80490:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80494:	440b      	add	r3, r1
   80496:	e7ef      	b.n	80478 <printi+0x48>
	}

	if (neg) {
   80498:	b156      	cbz	r6, 804b0 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   8049a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8049c:	b11b      	cbz	r3, 804a6 <printi+0x76>
   8049e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   804a0:	f013 0f02 	tst.w	r3, #2
   804a4:	d10d      	bne.n	804c2 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   804a6:	232d      	movs	r3, #45	; 0x2d
   804a8:	f805 3c01 	strb.w	r3, [r5, #-1]
   804ac:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   804ae:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   804b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   804b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   804b4:	4629      	mov	r1, r5
   804b6:	4638      	mov	r0, r7
   804b8:	4c06      	ldr	r4, [pc, #24]	; (804d4 <printi+0xa4>)
   804ba:	47a0      	blx	r4
   804bc:	4430      	add	r0, r6
}
   804be:	b005      	add	sp, #20
   804c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   804c2:	212d      	movs	r1, #45	; 0x2d
   804c4:	4638      	mov	r0, r7
   804c6:	4b04      	ldr	r3, [pc, #16]	; (804d8 <printi+0xa8>)
   804c8:	4798      	blx	r3
			--width;
   804ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   804cc:	3b01      	subs	r3, #1
   804ce:	930a      	str	r3, [sp, #40]	; 0x28
   804d0:	e7ee      	b.n	804b0 <printi+0x80>
   804d2:	bf00      	nop
   804d4:	000803ad 	.word	0x000803ad
   804d8:	0008039d 	.word	0x0008039d

000804dc <print>:

static int print( char **out, const char *format, va_list args )
{
   804dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   804de:	b089      	sub	sp, #36	; 0x24
   804e0:	4606      	mov	r6, r0
   804e2:	460c      	mov	r4, r1
   804e4:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   804e6:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   804e8:	e081      	b.n	805ee <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   804ea:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   804ec:	2301      	movs	r3, #1
   804ee:	e08b      	b.n	80608 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   804f0:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   804f2:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   804f6:	7822      	ldrb	r2, [r4, #0]
   804f8:	2a30      	cmp	r2, #48	; 0x30
   804fa:	d0f9      	beq.n	804f0 <print+0x14>
   804fc:	2200      	movs	r2, #0
   804fe:	e006      	b.n	8050e <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80500:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80504:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80506:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   8050a:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8050c:	3401      	adds	r4, #1
   8050e:	7821      	ldrb	r1, [r4, #0]
   80510:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80514:	b2c0      	uxtb	r0, r0
   80516:	2809      	cmp	r0, #9
   80518:	d9f2      	bls.n	80500 <print+0x24>
			}
			if( *format == 's' ) {
   8051a:	2973      	cmp	r1, #115	; 0x73
   8051c:	d018      	beq.n	80550 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   8051e:	2964      	cmp	r1, #100	; 0x64
   80520:	d022      	beq.n	80568 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80522:	2978      	cmp	r1, #120	; 0x78
   80524:	d02f      	beq.n	80586 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80526:	2958      	cmp	r1, #88	; 0x58
   80528:	d03c      	beq.n	805a4 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   8052a:	2975      	cmp	r1, #117	; 0x75
   8052c:	d049      	beq.n	805c2 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   8052e:	2963      	cmp	r1, #99	; 0x63
   80530:	d15c      	bne.n	805ec <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80532:	9905      	ldr	r1, [sp, #20]
   80534:	1d08      	adds	r0, r1, #4
   80536:	9005      	str	r0, [sp, #20]
   80538:	7809      	ldrb	r1, [r1, #0]
   8053a:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   8053e:	2100      	movs	r1, #0
   80540:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80544:	a907      	add	r1, sp, #28
   80546:	4630      	mov	r0, r6
   80548:	4f34      	ldr	r7, [pc, #208]	; (8061c <print+0x140>)
   8054a:	47b8      	blx	r7
   8054c:	4405      	add	r5, r0
				continue;
   8054e:	e04d      	b.n	805ec <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80550:	9905      	ldr	r1, [sp, #20]
   80552:	1d08      	adds	r0, r1, #4
   80554:	9005      	str	r0, [sp, #20]
   80556:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80558:	b121      	cbz	r1, 80564 <print+0x88>
   8055a:	4630      	mov	r0, r6
   8055c:	4f2f      	ldr	r7, [pc, #188]	; (8061c <print+0x140>)
   8055e:	47b8      	blx	r7
   80560:	4405      	add	r5, r0
				continue;
   80562:	e043      	b.n	805ec <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80564:	492e      	ldr	r1, [pc, #184]	; (80620 <print+0x144>)
   80566:	e7f8      	b.n	8055a <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80568:	9905      	ldr	r1, [sp, #20]
   8056a:	1d08      	adds	r0, r1, #4
   8056c:	9005      	str	r0, [sp, #20]
   8056e:	6809      	ldr	r1, [r1, #0]
   80570:	2061      	movs	r0, #97	; 0x61
   80572:	9002      	str	r0, [sp, #8]
   80574:	9301      	str	r3, [sp, #4]
   80576:	9200      	str	r2, [sp, #0]
   80578:	2301      	movs	r3, #1
   8057a:	220a      	movs	r2, #10
   8057c:	4630      	mov	r0, r6
   8057e:	4f29      	ldr	r7, [pc, #164]	; (80624 <print+0x148>)
   80580:	47b8      	blx	r7
   80582:	4405      	add	r5, r0
				continue;
   80584:	e032      	b.n	805ec <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80586:	9905      	ldr	r1, [sp, #20]
   80588:	1d08      	adds	r0, r1, #4
   8058a:	9005      	str	r0, [sp, #20]
   8058c:	6809      	ldr	r1, [r1, #0]
   8058e:	2061      	movs	r0, #97	; 0x61
   80590:	9002      	str	r0, [sp, #8]
   80592:	9301      	str	r3, [sp, #4]
   80594:	9200      	str	r2, [sp, #0]
   80596:	2300      	movs	r3, #0
   80598:	2210      	movs	r2, #16
   8059a:	4630      	mov	r0, r6
   8059c:	4f21      	ldr	r7, [pc, #132]	; (80624 <print+0x148>)
   8059e:	47b8      	blx	r7
   805a0:	4405      	add	r5, r0
				continue;
   805a2:	e023      	b.n	805ec <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   805a4:	9905      	ldr	r1, [sp, #20]
   805a6:	1d08      	adds	r0, r1, #4
   805a8:	9005      	str	r0, [sp, #20]
   805aa:	6809      	ldr	r1, [r1, #0]
   805ac:	2041      	movs	r0, #65	; 0x41
   805ae:	9002      	str	r0, [sp, #8]
   805b0:	9301      	str	r3, [sp, #4]
   805b2:	9200      	str	r2, [sp, #0]
   805b4:	2300      	movs	r3, #0
   805b6:	2210      	movs	r2, #16
   805b8:	4630      	mov	r0, r6
   805ba:	4f1a      	ldr	r7, [pc, #104]	; (80624 <print+0x148>)
   805bc:	47b8      	blx	r7
   805be:	4405      	add	r5, r0
				continue;
   805c0:	e014      	b.n	805ec <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   805c2:	9905      	ldr	r1, [sp, #20]
   805c4:	1d08      	adds	r0, r1, #4
   805c6:	9005      	str	r0, [sp, #20]
   805c8:	6809      	ldr	r1, [r1, #0]
   805ca:	2061      	movs	r0, #97	; 0x61
   805cc:	9002      	str	r0, [sp, #8]
   805ce:	9301      	str	r3, [sp, #4]
   805d0:	9200      	str	r2, [sp, #0]
   805d2:	2300      	movs	r3, #0
   805d4:	220a      	movs	r2, #10
   805d6:	4630      	mov	r0, r6
   805d8:	4f12      	ldr	r7, [pc, #72]	; (80624 <print+0x148>)
   805da:	47b8      	blx	r7
   805dc:	4405      	add	r5, r0
				continue;
   805de:	e005      	b.n	805ec <print+0x110>
			++format;
   805e0:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   805e2:	7821      	ldrb	r1, [r4, #0]
   805e4:	4630      	mov	r0, r6
   805e6:	4b10      	ldr	r3, [pc, #64]	; (80628 <print+0x14c>)
   805e8:	4798      	blx	r3
			++pc;
   805ea:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   805ec:	3401      	adds	r4, #1
   805ee:	7823      	ldrb	r3, [r4, #0]
   805f0:	b163      	cbz	r3, 8060c <print+0x130>
		if (*format == '%') {
   805f2:	2b25      	cmp	r3, #37	; 0x25
   805f4:	d1f5      	bne.n	805e2 <print+0x106>
			++format;
   805f6:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   805f8:	7863      	ldrb	r3, [r4, #1]
   805fa:	b13b      	cbz	r3, 8060c <print+0x130>
			if (*format == '%') goto out;
   805fc:	2b25      	cmp	r3, #37	; 0x25
   805fe:	d0ef      	beq.n	805e0 <print+0x104>
			if (*format == '-') {
   80600:	2b2d      	cmp	r3, #45	; 0x2d
   80602:	f43f af72 	beq.w	804ea <print+0xe>
			width = pad = 0;
   80606:	2300      	movs	r3, #0
   80608:	4614      	mov	r4, r2
   8060a:	e774      	b.n	804f6 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   8060c:	b116      	cbz	r6, 80614 <print+0x138>
   8060e:	6833      	ldr	r3, [r6, #0]
   80610:	2200      	movs	r2, #0
   80612:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80614:	4628      	mov	r0, r5
   80616:	b009      	add	sp, #36	; 0x24
   80618:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8061a:	bf00      	nop
   8061c:	000803ad 	.word	0x000803ad
   80620:	000808ec 	.word	0x000808ec
   80624:	00080431 	.word	0x00080431
   80628:	0008039d 	.word	0x0008039d

0008062c <printf>:

int printf(const char *format, ...)
{
   8062c:	b40f      	push	{r0, r1, r2, r3}
   8062e:	b500      	push	{lr}
   80630:	b083      	sub	sp, #12
   80632:	aa04      	add	r2, sp, #16
   80634:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80638:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   8063a:	2000      	movs	r0, #0
   8063c:	4b03      	ldr	r3, [pc, #12]	; (8064c <printf+0x20>)
   8063e:	4798      	blx	r3
}
   80640:	b003      	add	sp, #12
   80642:	f85d eb04 	ldr.w	lr, [sp], #4
   80646:	b004      	add	sp, #16
   80648:	4770      	bx	lr
   8064a:	bf00      	nop
   8064c:	000804dd 	.word	0x000804dd

00080650 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80650:	4b16      	ldr	r3, [pc, #88]	; (806ac <configure_uart+0x5c>)
   80652:	2200      	movs	r2, #0
   80654:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80656:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80658:	4b15      	ldr	r3, [pc, #84]	; (806b0 <configure_uart+0x60>)
   8065a:	f44f 7140 	mov.w	r1, #768	; 0x300
   8065e:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80660:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80664:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80666:	4002      	ands	r2, r0
   80668:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   8066c:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8066e:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80670:	f44f 7280 	mov.w	r2, #256	; 0x100
   80674:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80678:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   8067a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8067e:	21ac      	movs	r1, #172	; 0xac
   80680:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80682:	f240 2123 	movw	r1, #547	; 0x223
   80686:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80688:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8068c:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8068e:	f240 2102 	movw	r1, #514	; 0x202
   80692:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80696:	f04f 31ff 	mov.w	r1, #4294967295
   8069a:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   8069c:	21e1      	movs	r1, #225	; 0xe1
   8069e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   806a0:	4904      	ldr	r1, [pc, #16]	; (806b4 <configure_uart+0x64>)
   806a2:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   806a4:	2250      	movs	r2, #80	; 0x50
   806a6:	601a      	str	r2, [r3, #0]
   806a8:	4770      	bx	lr
   806aa:	bf00      	nop
   806ac:	20000450 	.word	0x20000450
   806b0:	400e0e00 	.word	0x400e0e00
   806b4:	e000e100 	.word	0xe000e100

000806b8 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   806b8:	4b07      	ldr	r3, [pc, #28]	; (806d8 <uart_putchar+0x20>)
   806ba:	695b      	ldr	r3, [r3, #20]
   806bc:	f013 0f02 	tst.w	r3, #2
   806c0:	d008      	beq.n	806d4 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   806c2:	4b05      	ldr	r3, [pc, #20]	; (806d8 <uart_putchar+0x20>)
   806c4:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   806c6:	4b04      	ldr	r3, [pc, #16]	; (806d8 <uart_putchar+0x20>)
   806c8:	695b      	ldr	r3, [r3, #20]
   806ca:	f413 7f00 	tst.w	r3, #512	; 0x200
   806ce:	d0fa      	beq.n	806c6 <uart_putchar+0xe>
	return 0;
   806d0:	2000      	movs	r0, #0
   806d2:	4770      	bx	lr
	return 1;
   806d4:	2001      	movs	r0, #1
}
   806d6:	4770      	bx	lr
   806d8:	400e0800 	.word	0x400e0800

000806dc <UART_Handler>:

void UART_Handler(void)
{
   806dc:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   806de:	4b15      	ldr	r3, [pc, #84]	; (80734 <UART_Handler+0x58>)
   806e0:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   806e2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   806e6:	d003      	beq.n	806f0 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   806e8:	f44f 71a8 	mov.w	r1, #336	; 0x150
   806ec:	4a11      	ldr	r2, [pc, #68]	; (80734 <UART_Handler+0x58>)
   806ee:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   806f0:	f013 0f01 	tst.w	r3, #1
   806f4:	d012      	beq.n	8071c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   806f6:	4810      	ldr	r0, [pc, #64]	; (80738 <UART_Handler+0x5c>)
   806f8:	7842      	ldrb	r2, [r0, #1]
   806fa:	1c53      	adds	r3, r2, #1
   806fc:	4259      	negs	r1, r3
   806fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80702:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80706:	bf58      	it	pl
   80708:	424b      	negpl	r3, r1
   8070a:	7801      	ldrb	r1, [r0, #0]
   8070c:	428b      	cmp	r3, r1
   8070e:	d006      	beq.n	8071e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80710:	4908      	ldr	r1, [pc, #32]	; (80734 <UART_Handler+0x58>)
   80712:	6988      	ldr	r0, [r1, #24]
   80714:	4908      	ldr	r1, [pc, #32]	; (80738 <UART_Handler+0x5c>)
   80716:	440a      	add	r2, r1
   80718:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   8071a:	704b      	strb	r3, [r1, #1]
   8071c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   8071e:	4807      	ldr	r0, [pc, #28]	; (8073c <UART_Handler+0x60>)
   80720:	4b07      	ldr	r3, [pc, #28]	; (80740 <UART_Handler+0x64>)
   80722:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80724:	4b04      	ldr	r3, [pc, #16]	; (80738 <UART_Handler+0x5c>)
   80726:	7859      	ldrb	r1, [r3, #1]
   80728:	4a02      	ldr	r2, [pc, #8]	; (80734 <UART_Handler+0x58>)
   8072a:	6992      	ldr	r2, [r2, #24]
   8072c:	440b      	add	r3, r1
   8072e:	709a      	strb	r2, [r3, #2]
			return;
   80730:	bd08      	pop	{r3, pc}
   80732:	bf00      	nop
   80734:	400e0800 	.word	0x400e0800
   80738:	20000450 	.word	0x20000450
   8073c:	000808f4 	.word	0x000808f4
   80740:	0008062d 	.word	0x0008062d

00080744 <__libc_init_array>:
   80744:	b570      	push	{r4, r5, r6, lr}
   80746:	4e0f      	ldr	r6, [pc, #60]	; (80784 <__libc_init_array+0x40>)
   80748:	4d0f      	ldr	r5, [pc, #60]	; (80788 <__libc_init_array+0x44>)
   8074a:	1b76      	subs	r6, r6, r5
   8074c:	10b6      	asrs	r6, r6, #2
   8074e:	bf18      	it	ne
   80750:	2400      	movne	r4, #0
   80752:	d005      	beq.n	80760 <__libc_init_array+0x1c>
   80754:	3401      	adds	r4, #1
   80756:	f855 3b04 	ldr.w	r3, [r5], #4
   8075a:	4798      	blx	r3
   8075c:	42a6      	cmp	r6, r4
   8075e:	d1f9      	bne.n	80754 <__libc_init_array+0x10>
   80760:	4e0a      	ldr	r6, [pc, #40]	; (8078c <__libc_init_array+0x48>)
   80762:	4d0b      	ldr	r5, [pc, #44]	; (80790 <__libc_init_array+0x4c>)
   80764:	f000 f8d8 	bl	80918 <_init>
   80768:	1b76      	subs	r6, r6, r5
   8076a:	10b6      	asrs	r6, r6, #2
   8076c:	bf18      	it	ne
   8076e:	2400      	movne	r4, #0
   80770:	d006      	beq.n	80780 <__libc_init_array+0x3c>
   80772:	3401      	adds	r4, #1
   80774:	f855 3b04 	ldr.w	r3, [r5], #4
   80778:	4798      	blx	r3
   8077a:	42a6      	cmp	r6, r4
   8077c:	d1f9      	bne.n	80772 <__libc_init_array+0x2e>
   8077e:	bd70      	pop	{r4, r5, r6, pc}
   80780:	bd70      	pop	{r4, r5, r6, pc}
   80782:	bf00      	nop
   80784:	00080924 	.word	0x00080924
   80788:	00080924 	.word	0x00080924
   8078c:	0008092c 	.word	0x0008092c
   80790:	00080924 	.word	0x00080924

00080794 <register_fini>:
   80794:	4b02      	ldr	r3, [pc, #8]	; (807a0 <register_fini+0xc>)
   80796:	b113      	cbz	r3, 8079e <register_fini+0xa>
   80798:	4802      	ldr	r0, [pc, #8]	; (807a4 <register_fini+0x10>)
   8079a:	f000 b805 	b.w	807a8 <atexit>
   8079e:	4770      	bx	lr
   807a0:	00000000 	.word	0x00000000
   807a4:	000807b5 	.word	0x000807b5

000807a8 <atexit>:
   807a8:	2300      	movs	r3, #0
   807aa:	4601      	mov	r1, r0
   807ac:	461a      	mov	r2, r3
   807ae:	4618      	mov	r0, r3
   807b0:	f000 b81e 	b.w	807f0 <__register_exitproc>

000807b4 <__libc_fini_array>:
   807b4:	b538      	push	{r3, r4, r5, lr}
   807b6:	4c0a      	ldr	r4, [pc, #40]	; (807e0 <__libc_fini_array+0x2c>)
   807b8:	4d0a      	ldr	r5, [pc, #40]	; (807e4 <__libc_fini_array+0x30>)
   807ba:	1b64      	subs	r4, r4, r5
   807bc:	10a4      	asrs	r4, r4, #2
   807be:	d00a      	beq.n	807d6 <__libc_fini_array+0x22>
   807c0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   807c4:	3b01      	subs	r3, #1
   807c6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   807ca:	3c01      	subs	r4, #1
   807cc:	f855 3904 	ldr.w	r3, [r5], #-4
   807d0:	4798      	blx	r3
   807d2:	2c00      	cmp	r4, #0
   807d4:	d1f9      	bne.n	807ca <__libc_fini_array+0x16>
   807d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   807da:	f000 b8a7 	b.w	8092c <_fini>
   807de:	bf00      	nop
   807e0:	0008093c 	.word	0x0008093c
   807e4:	00080938 	.word	0x00080938

000807e8 <__retarget_lock_acquire_recursive>:
   807e8:	4770      	bx	lr
   807ea:	bf00      	nop

000807ec <__retarget_lock_release_recursive>:
   807ec:	4770      	bx	lr
   807ee:	bf00      	nop

000807f0 <__register_exitproc>:
   807f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   807f4:	4d2c      	ldr	r5, [pc, #176]	; (808a8 <__register_exitproc+0xb8>)
   807f6:	4606      	mov	r6, r0
   807f8:	6828      	ldr	r0, [r5, #0]
   807fa:	4698      	mov	r8, r3
   807fc:	460f      	mov	r7, r1
   807fe:	4691      	mov	r9, r2
   80800:	f7ff fff2 	bl	807e8 <__retarget_lock_acquire_recursive>
   80804:	4b29      	ldr	r3, [pc, #164]	; (808ac <__register_exitproc+0xbc>)
   80806:	681c      	ldr	r4, [r3, #0]
   80808:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8080c:	2b00      	cmp	r3, #0
   8080e:	d03e      	beq.n	8088e <__register_exitproc+0x9e>
   80810:	685a      	ldr	r2, [r3, #4]
   80812:	2a1f      	cmp	r2, #31
   80814:	dc1c      	bgt.n	80850 <__register_exitproc+0x60>
   80816:	f102 0e01 	add.w	lr, r2, #1
   8081a:	b176      	cbz	r6, 8083a <__register_exitproc+0x4a>
   8081c:	2101      	movs	r1, #1
   8081e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80822:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80826:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8082a:	4091      	lsls	r1, r2
   8082c:	4308      	orrs	r0, r1
   8082e:	2e02      	cmp	r6, #2
   80830:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80834:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80838:	d023      	beq.n	80882 <__register_exitproc+0x92>
   8083a:	3202      	adds	r2, #2
   8083c:	f8c3 e004 	str.w	lr, [r3, #4]
   80840:	6828      	ldr	r0, [r5, #0]
   80842:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80846:	f7ff ffd1 	bl	807ec <__retarget_lock_release_recursive>
   8084a:	2000      	movs	r0, #0
   8084c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80850:	4b17      	ldr	r3, [pc, #92]	; (808b0 <__register_exitproc+0xc0>)
   80852:	b30b      	cbz	r3, 80898 <__register_exitproc+0xa8>
   80854:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80858:	f3af 8000 	nop.w
   8085c:	4603      	mov	r3, r0
   8085e:	b1d8      	cbz	r0, 80898 <__register_exitproc+0xa8>
   80860:	2000      	movs	r0, #0
   80862:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80866:	f04f 0e01 	mov.w	lr, #1
   8086a:	6058      	str	r0, [r3, #4]
   8086c:	6019      	str	r1, [r3, #0]
   8086e:	4602      	mov	r2, r0
   80870:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80874:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80878:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8087c:	2e00      	cmp	r6, #0
   8087e:	d0dc      	beq.n	8083a <__register_exitproc+0x4a>
   80880:	e7cc      	b.n	8081c <__register_exitproc+0x2c>
   80882:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80886:	4301      	orrs	r1, r0
   80888:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8088c:	e7d5      	b.n	8083a <__register_exitproc+0x4a>
   8088e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80892:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80896:	e7bb      	b.n	80810 <__register_exitproc+0x20>
   80898:	6828      	ldr	r0, [r5, #0]
   8089a:	f7ff ffa7 	bl	807ec <__retarget_lock_release_recursive>
   8089e:	f04f 30ff 	mov.w	r0, #4294967295
   808a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   808a6:	bf00      	nop
   808a8:	20000430 	.word	0x20000430
   808ac:	00080914 	.word	0x00080914
   808b0:	00000000 	.word	0x00000000
   808b4:	304e4143 	.word	0x304e4143
   808b8:	73656d20 	.word	0x73656d20
   808bc:	65676173 	.word	0x65676173
   808c0:	72726120 	.word	0x72726120
   808c4:	64657669 	.word	0x64657669
   808c8:	206e6920 	.word	0x206e6920
   808cc:	2d6e6f6e 	.word	0x2d6e6f6e
   808d0:	64657375 	.word	0x64657375
   808d4:	69616d20 	.word	0x69616d20
   808d8:	786f626c 	.word	0x786f626c
   808dc:	00000d0a 	.word	0x00000d0a
   808e0:	2079796e 	.word	0x2079796e
   808e4:	0a0d6325 	.word	0x0a0d6325
   808e8:	00000000 	.word	0x00000000
   808ec:	6c756e28 	.word	0x6c756e28
   808f0:	0000296c 	.word	0x0000296c
   808f4:	3a525245 	.word	0x3a525245
   808f8:	52415520 	.word	0x52415520
   808fc:	58522054 	.word	0x58522054
   80900:	66756220 	.word	0x66756220
   80904:	20726566 	.word	0x20726566
   80908:	66207369 	.word	0x66207369
   8090c:	0a6c6c75 	.word	0x0a6c6c75
   80910:	0000000d 	.word	0x0000000d

00080914 <_global_impure_ptr>:
   80914:	20000008                                ... 

00080918 <_init>:
   80918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8091a:	bf00      	nop
   8091c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8091e:	bc08      	pop	{r3}
   80920:	469e      	mov	lr, r3
   80922:	4770      	bx	lr

00080924 <__init_array_start>:
   80924:	00080795 	.word	0x00080795

00080928 <__frame_dummy_init_array_entry>:
   80928:	00080119                                ....

0008092c <_fini>:
   8092c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8092e:	bf00      	nop
   80930:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80932:	bc08      	pop	{r3}
   80934:	469e      	mov	lr, r3
   80936:	4770      	bx	lr

00080938 <__fini_array_start>:
   80938:	000800f5 	.word	0x000800f5
